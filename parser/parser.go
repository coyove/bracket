// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

//line parser.go.y:29
type yySymType struct {
	yys   int
	token Token
	expr  Node
}

const TDo = 57346
const TLocal = 57347
const TElseIf = 57348
const TThen = 57349
const TEnd = 57350
const TBreak = 57351
const TElse = 57352
const TFor = 57353
const TWhile = 57354
const TFunc = 57355
const TIf = 57356
const TLen = 57357
const TReturn = 57358
const TReturnVoid = 57359
const TYield = 57360
const TYieldVoid = 57361
const TRepeat = 57362
const TUntil = 57363
const TNot = 57364
const TLabel = 57365
const TGoto = 57366
const TOr = 57367
const TAnd = 57368
const TEqeq = 57369
const TNeq = 57370
const TLte = 57371
const TGte = 57372
const TIdent = 57373
const TNumber = 57374
const TString = 57375
const TAddEq = 57376
const TSubEq = 57377
const TMulEq = 57378
const TDivEq = 57379
const TModEq = 57380
const TSquare = 57381
const TDotDot = 57382
const ASSIGN = 57383
const FUNC = 57384
const UNARY = 57385

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"TDo",
	"TLocal",
	"TElseIf",
	"TThen",
	"TEnd",
	"TBreak",
	"TElse",
	"TFor",
	"TWhile",
	"TFunc",
	"TIf",
	"TLen",
	"TReturn",
	"TReturnVoid",
	"TYield",
	"TYieldVoid",
	"TRepeat",
	"TUntil",
	"TNot",
	"TLabel",
	"TGoto",
	"TOr",
	"TAnd",
	"TEqeq",
	"TNeq",
	"TLte",
	"TGte",
	"TIdent",
	"TNumber",
	"TString",
	"'{'",
	"'['",
	"'('",
	"'='",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"'#'",
	"'.'",
	"'&'",
	"TAddEq",
	"TSubEq",
	"TMulEq",
	"TDivEq",
	"TModEq",
	"TSquare",
	"TDotDot",
	"'T'",
	"ASSIGN",
	"FUNC",
	"UNARY",
	"';'",
	"']'",
	"','",
	"')'",
	"'}'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:383

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 27,
	37, 56,
	62, 56,
	-2, 82,
	-1, 104,
	37, 57,
	62, 57,
	-2, 82,
}

const yyPrivate = 57344

const yyLast = 1016

var yyAct = [...]int{

	33, 36, 41, 18, 27, 181, 63, 52, 91, 164,
	141, 164, 142, 165, 32, 165, 59, 164, 139, 54,
	140, 165, 190, 189, 58, 102, 177, 61, 101, 62,
	46, 150, 151, 18, 27, 149, 148, 70, 55, 88,
	89, 90, 166, 199, 82, 83, 84, 203, 96, 173,
	186, 156, 184, 102, 143, 117, 107, 92, 105, 104,
	98, 18, 27, 56, 120, 155, 99, 54, 153, 138,
	103, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 38, 64,
	65, 66, 67, 68, 97, 144, 43, 43, 34, 35,
	42, 28, 28, 49, 147, 86, 51, 39, 60, 57,
	38, 159, 40, 45, 53, 157, 152, 87, 161, 43,
	34, 35, 42, 154, 28, 158, 112, 95, 4, 39,
	167, 160, 54, 44, 40, 162, 79, 81, 82, 83,
	84, 85, 121, 111, 168, 3, 193, 171, 172, 37,
	106, 121, 170, 6, 22, 17, 18, 27, 4, 174,
	18, 27, 18, 27, 18, 27, 185, 16, 113, 1,
	5, 187, 176, 19, 50, 3, 21, 31, 18, 27,
	49, 192, 47, 51, 195, 196, 109, 198, 79, 81,
	82, 83, 84, 85, 48, 2, 18, 27, 0, 194,
	5, 0, 205, 80, 207, 0, 18, 27, 18, 27,
	200, 0, 210, 18, 27, 0, 0, 204, 0, 206,
	0, 0, 0, 0, 0, 0, 211, 0, 0, 0,
	0, 71, 72, 77, 78, 76, 75, 0, 0, 0,
	0, 0, 0, 0, 73, 74, 79, 81, 82, 83,
	84, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 71, 72, 77, 78, 76, 75, 201, 0,
	0, 0, 0, 0, 0, 73, 74, 79, 81, 82,
	83, 84, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 163, 146,
	71, 72, 77, 78, 76, 75, 0, 0, 0, 0,
	0, 0, 0, 73, 74, 79, 81, 82, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 145, 146, 71, 72,
	77, 78, 76, 75, 0, 0, 0, 0, 0, 0,
	0, 73, 74, 79, 81, 82, 83, 84, 85, 114,
	116, 183, 0, 0, 11, 182, 25, 23, 80, 26,
	0, 15, 14, 9, 10, 24, 119, 0, 13, 12,
	0, 0, 0, 0, 0, 0, 29, 0, 0, 0,
	0, 28, 71, 72, 77, 78, 76, 75, 0, 0,
	0, 0, 0, 0, 0, 73, 74, 79, 81, 82,
	83, 84, 85, 0, 0, 115, 0, 0, 0, 0,
	0, 0, 80, 7, 20, 0, 0, 69, 11, 180,
	25, 23, 30, 26, 0, 15, 14, 9, 10, 24,
	0, 0, 13, 12, 114, 116, 0, 0, 212, 11,
	29, 25, 23, 0, 26, 28, 15, 14, 9, 10,
	24, 0, 0, 13, 12, 0, 0, 0, 0, 0,
	0, 29, 0, 0, 0, 0, 28, 114, 116, 8,
	0, 208, 11, 0, 25, 23, 0, 26, 0, 15,
	14, 9, 10, 24, 0, 0, 13, 12, 0, 0,
	115, 0, 0, 0, 29, 0, 0, 0, 0, 28,
	71, 72, 77, 78, 76, 75, 0, 0, 0, 0,
	0, 0, 0, 73, 74, 79, 81, 82, 83, 84,
	85, 0, 0, 115, 0, 0, 0, 114, 116, 0,
	80, 191, 11, 0, 25, 23, 197, 26, 0, 15,
	14, 9, 10, 24, 0, 0, 13, 12, 0, 0,
	0, 0, 0, 0, 29, 0, 0, 0, 0, 28,
	71, 72, 77, 78, 76, 75, 0, 0, 0, 0,
	0, 0, 0, 73, 74, 79, 81, 82, 83, 84,
	85, 0, 0, 115, 0, 0, 0, 114, 116, 0,
	80, 179, 11, 0, 25, 23, 188, 26, 0, 15,
	14, 9, 10, 24, 0, 0, 13, 12, 114, 116,
	0, 0, 178, 11, 29, 25, 23, 0, 26, 28,
	15, 14, 9, 10, 24, 0, 0, 13, 12, 0,
	0, 0, 0, 0, 0, 29, 0, 0, 0, 0,
	28, 114, 116, 115, 0, 175, 11, 0, 25, 23,
	0, 26, 0, 15, 14, 9, 10, 24, 0, 0,
	13, 12, 0, 0, 115, 0, 0, 0, 29, 0,
	0, 0, 0, 28, 71, 72, 77, 78, 76, 75,
	0, 0, 0, 0, 0, 0, 0, 73, 74, 79,
	81, 82, 83, 84, 85, 0, 0, 115, 0, 0,
	0, 114, 116, 0, 80, 0, 11, 0, 25, 23,
	169, 26, 0, 15, 14, 9, 10, 24, 110, 0,
	13, 12, 7, 20, 0, 0, 0, 11, 29, 25,
	23, 30, 26, 28, 15, 14, 9, 10, 24, 0,
	0, 13, 12, 0, 0, 0, 0, 0, 0, 29,
	0, 0, 0, 0, 28, 114, 116, 115, 0, 0,
	11, 0, 25, 23, 0, 26, 0, 15, 14, 9,
	10, 24, 0, 0, 13, 12, 0, 0, 8, 38,
	0, 0, 29, 0, 0, 0, 0, 28, 93, 34,
	35, 42, 94, 28, 0, 38, 0, 0, 39, 0,
	209, 0, 0, 40, 93, 34, 35, 42, 94, 28,
	0, 115, 0, 0, 39, 0, 0, 0, 0, 40,
	100, 71, 72, 77, 78, 76, 75, 202, 0, 0,
	0, 0, 0, 0, 73, 74, 79, 81, 82, 83,
	84, 85, 0, 0, 0, 71, 72, 77, 78, 76,
	75, 80, 0, 0, 0, 0, 0, 0, 73, 74,
	79, 81, 82, 83, 84, 85, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 72, 77, 78, 76, 75,
	0, 0, 0, 0, 108, 0, 0, 73, 74, 79,
	81, 82, 83, 84, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 71, 72, 77, 78, 76,
	75, 0, 0, 0, 0, 0, 0, 0, 73, 74,
	79, 81, 82, 83, 84, 85, 71, 72, 77, 78,
	76, 75, 0, 0, 0, 80, 0, 0, 0, 73,
	74, 79, 81, 82, 83, 84, 85, 72, 77, 78,
	76, 75, 0, 0, 0, 0, 80, 0, 0, 73,
	74, 79, 81, 82, 83, 84, 85, 77, 78, 76,
	75, 0, 0, 0, 0, 0, 80, 0, 73, 74,
	79, 81, 82, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 80,
}
var yyPact = [...]int{

	-1000, 728, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 88,
	-1000, -1000, 102, 82, -1000, 88, -1000, -1000, 147, -1000,
	101, 1, 78, 88, -1000, 77, 88, -1000, 88, 40,
	-1000, 419, -25, 921, -1000, -1000, 70, -1000, 88, 88,
	88, -1000, 783, -1000, -1000, 104, -25, 88, 63, -1000,
	-1000, 767, -9, -1000, -1000, 88, 65, 20, 900, 707,
	18, 869, 313, 88, -1000, -1000, -1000, -1000, -1000, -1000,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 38, -1000, -1000,
	-1000, -44, -52, 17, 88, -1000, 275, 40, -27, -31,
	-1000, 88, 37, -25, -1000, 70, 32, -12, -1000, -1000,
	88, -1000, -1000, -1000, -1000, -1000, 36, 88, -1000, -1000,
	921, 921, 941, 960, 148, 148, 148, 148, 148, 148,
	2, 96, 2, -1000, -1000, -1000, 2, 237, -1000, -22,
	-1000, 66, -1000, 88, 659, 40, 88, 88, -1000, -14,
	783, -1000, -25, -1000, 647, -1000, -1000, -37, 614, 921,
	593, 367, 355, -1000, 15, 88, -1000, -1000, 921, 13,
	88, 545, 921, -1000, -40, -1000, 533, -1000, -1000, -1000,
	88, 138, -1000, 88, 88, 485, 88, 921, -1000, -1000,
	-20, -1000, 206, -1000, 761, 830, 921, 10, 921, -1000,
	-1000, 88, -1000, 88, 473, 806, 355, 921, -1000, -1000,
	-1000, 440, -1000,
}
var yyPgo = [...]int{

	0, 169, 16, 195, 186, 2, 176, 7, 14, 174,
	8, 0, 173, 6, 1, 168, 167, 155, 5, 143,
	126, 154, 153, 150, 149,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 20, 20, 13, 13,
	13, 13, 13, 15, 15, 15, 15, 15, 12, 12,
	12, 16, 16, 16, 16, 17, 18, 18, 18, 21,
	21, 22, 22, 23, 23, 19, 19, 19, 19, 19,
	19, 19, 5, 5, 5, 5, 6, 6, 7, 7,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 14, 14, 14, 14, 14, 14, 14, 14,
	8, 8, 9, 9, 10, 10, 10, 10, 24, 24,
	24, 24,
}
var yyR2 = [...]int{

	0, 0, 2, 0, 2, 1, 1, 1, 1, 3,
	1, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 4, 3, 3, 6,
	5, 5, 4, 9, 11, 6, 0, 2, 5, 1,
	2, 5, 6, 2, 3, 2, 1, 1, 2, 3,
	1, 2, 1, 4, 6, 3, 1, 3, 1, 3,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 1, 2, 2, 3, 4, 5, 6, 7,
	1, 3, 2, 3, 3, 5, 5, 7, 3, 4,
	3, 4,
}
var yyChk = [...]int{

	-1000, -1, -3, -19, -20, -15, -22, 4, 60, 18,
	19, 9, 24, 23, 17, 16, -16, -17, -14, -12,
	5, -6, -21, 12, 20, 11, 14, -5, 36, 31,
	13, -1, -8, -11, 32, 33, -14, -24, 22, 41,
	46, -5, 34, 31, 31, 31, -8, 35, 47, 33,
	-9, 36, -7, 13, 31, 37, 62, 31, -11, -2,
	31, -11, -11, -13, 49, 50, 51, 52, 53, 8,
	62, 25, 26, 38, 39, 30, 29, 27, 28, 40,
	55, 41, 42, 43, 44, 45, 35, 47, -11, -11,
	-11, -10, -8, 31, 35, 23, -11, 31, -10, -8,
	63, 37, 62, -8, -5, -14, -23, 36, 4, -4,
	21, -19, -20, -15, 4, 60, 5, 37, 7, 63,
	-11, -11, -11, -11, -11, -11, -11, -11, -11, -11,
	-11, -11, -11, -11, -11, -11, -11, -11, 31, 62,
	64, 62, 64, 37, -11, 61, 62, -13, 63, 62,
	62, 63, -8, 31, -2, 33, 63, -7, -2, -11,
	-2, -11, -2, 61, 31, 35, 64, 64, -11, 61,
	-13, -11, -11, 63, -10, 8, -2, 63, 8, 8,
	62, -18, 10, 6, 37, -11, 37, -11, 61, 63,
	62, 8, -11, 8, -2, -11, -11, 61, -11, 63,
	4, 62, 7, 37, -2, -11, -2, -11, 8, 4,
	-18, -2, 8,
}
var yyDef = [...]int{

	1, -2, 2, 5, 6, 7, 8, 1, 10, 0,
	46, 47, 0, 0, 50, 0, 16, 17, 23, 24,
	0, 0, 0, 0, 3, 0, 0, -2, 0, 52,
	39, 0, 45, 90, 60, 61, 62, 63, 0, 0,
	0, 82, 0, 52, 48, 0, 51, 0, 0, 83,
	84, 0, 25, 40, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 18, 19, 20, 21, 22, 9,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 80,
	81, 0, 0, 52, 0, 49, 0, 55, 0, 0,
	92, 0, 0, 27, -2, 0, 3, 0, 3, 4,
	0, 11, 12, 13, 3, 15, 0, 0, 3, 85,
	28, 91, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 0, 55, 0,
	98, 0, 100, 0, 0, 53, 0, 0, 86, 0,
	0, 93, 26, 59, 0, 3, 43, 0, 0, 32,
	0, 0, 36, 53, 0, 0, 99, 101, 94, 0,
	0, 0, 30, 87, 0, 41, 0, 44, 31, 14,
	0, 0, 3, 0, 0, 0, 0, 29, 54, 88,
	0, 42, 0, 35, 37, 0, 96, 0, 95, 89,
	3, 0, 3, 0, 0, 0, 36, 97, 33, 3,
	38, 0, 34,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 46, 3, 44, 48, 3,
	36, 63, 42, 40, 62, 41, 47, 43, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 60,
	39, 37, 38, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 56, 3, 3, 3, 3, 3,
	3, 35, 3, 61, 45, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 34, 3, 64,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 49, 50, 51, 52, 53, 54, 55, 57,
	58, 59,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:59
		{
			yyVAL.expr = __chain()
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.expr
			}
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:65
		{
			yyVAL.expr = yyDollar[1].expr.append(yyDollar[2].expr)
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.expr
			}
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:73
		{
			yyVAL.expr = __chain()
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:76
		{
			yyVAL.expr = yyDollar[1].expr.append(yyDollar[2].expr)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:81
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:82
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:83
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:84
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:85
		{
			yyVAL.expr = __do(yyDollar[2].expr)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:86
		{
			yyVAL.expr = emptyNode
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:89
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:90
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:91
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:92
		{
			yyVAL.expr = __do(yyDollar[2].expr)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:93
		{
			yyVAL.expr = emptyNode
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:96
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:97
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:100
		{
			yyVAL.expr = NewSymbol(AAdd).SetPos(yyDollar[1].token.Pos)
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:101
		{
			yyVAL.expr = NewSymbol(ASub).SetPos(yyDollar[1].token.Pos)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:102
		{
			yyVAL.expr = NewSymbol(AMul).SetPos(yyDollar[1].token.Pos)
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:103
		{
			yyVAL.expr = NewSymbol(ADiv).SetPos(yyDollar[1].token.Pos)
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:104
		{
			yyVAL.expr = NewSymbol(AMod).SetPos(yyDollar[1].token.Pos)
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:107
		{
			if yyDollar[1].expr.isCallStat() {
				// Single call statement, clear env.V to avoid side effects
				yyVAL.expr = __chain(yyDollar[1].expr, popvClearNode)
			} else {
				yyVAL.expr = yyDollar[1].expr
			}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:115
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:118
		{
			yyVAL.expr = __chain()
			for _, v := range yyDollar[2].expr.Nodes {
				yyVAL.expr = yyVAL.expr.append(__set(v, NewSymbol(ANil)).SetPos(yyDollar[1].token.Pos))
			}
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:124
		{
			m, n := len(yyDollar[2].expr.Nodes), len(yyDollar[4].expr.Nodes)
			for i, count := 0, m-n; i < count; i++ {
				if i == count-1 {
					yyDollar[4].expr = yyDollar[4].expr.append(__chain(popvNode, popvClearNode))
				} else {
					yyDollar[4].expr = yyDollar[4].expr.append(popvNode)
				}
			}

			yyVAL.expr = __chain()
			for i, v := range yyDollar[2].expr.Nodes {
				if v.IsSymbolDotDotDot() {
					yyVAL.expr = yyVAL.expr.append(__set(v, __popvAll(i, yyDollar[4].expr.Nodes[i])).SetPos(yyDollar[1].token.Pos))
				} else {
					yyVAL.expr = yyVAL.expr.append(__set(v, yyDollar[4].expr.Nodes[i]).SetPos(yyDollar[1].token.Pos))
				}
			}

			if m == 1 && n == 1 && yyDollar[4].expr.Nodes[0].isCallStat() {
				// Single call statement with single assignment, clear env.V to avoid side effects
				yyVAL.expr = yyVAL.expr.append(popvClearNode)
			}
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:148
		{
			nodes := yyDollar[1].expr.Nodes
			m, n := len(nodes), len(yyDollar[3].expr.Nodes)
			for i, count := 0, m-n; i < count; i++ {
				if i == count-1 {
					yyDollar[3].expr = yyDollar[3].expr.append(__chain(popvNode, popvClearNode))
				} else {
					yyDollar[3].expr = yyDollar[3].expr.append(popvNode)
				}
			}

			if head := nodes[0]; len(nodes) == 1 && !nodes[0].IsSymbolDotDotDot() {
				yyVAL.expr = head.moveLoadStore(__move, yyDollar[3].expr.Nodes[0]).SetPos(yyDollar[2].token.Pos)
			} else {
				// a0, ..., an = b0, ..., bn
				yyVAL.expr = __chain()
				names, retaddr := []Node{}, NewComplex(NewSymbol(ARetAddr))
				for i := range nodes {
					names = append(names, randomVarname())
					retaddr = retaddr.append(names[i])
					if nodes[i].IsSymbolDotDotDot() {
						yyVAL.expr = yyVAL.expr.append(__set(names[i], __popvAll(i, yyDollar[3].expr.Nodes[i])).SetPos(yyDollar[2].token.Pos))
					} else {
						yyVAL.expr = yyVAL.expr.append(__set(names[i], yyDollar[3].expr.Nodes[i]).SetPos(yyDollar[2].token.Pos))
					}
				}
				for i, v := range nodes {
					yyVAL.expr = yyVAL.expr.append(v.moveLoadStore(__move, names[i]).SetPos(yyDollar[2].token.Pos))
				}
				yyVAL.expr = yyVAL.expr.append(retaddr)
			}

			if m == 1 && n == 1 && yyDollar[3].expr.Nodes[0].isCallStat() {
				// Single call statement with single assignment, clear env.V to avoid side effects
				yyVAL.expr = __chain(yyVAL.expr, popvClearNode)
			}
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:187
		{
			yyVAL.expr = __move(NewSymbolFromToken(yyDollar[1].token), NewComplex(yyDollar[2].expr, NewSymbolFromToken(yyDollar[1].token), yyDollar[3].expr)).SetPos(yyDollar[2].expr.Pos())
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:190
		{
			yyVAL.expr = __store(yyDollar[1].expr, yyDollar[3].expr, NewComplex(yyDollar[5].expr, __load(yyDollar[1].expr, yyDollar[3].expr), yyDollar[6].expr).SetPos(yyDollar[5].expr.Pos()))
		}
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:193
		{
			i := NewString(yyDollar[3].token.Str)
			yyVAL.expr = __store(yyDollar[1].expr, i, NewComplex(yyDollar[4].expr, __load(yyDollar[1].expr, i), yyDollar[5].expr).SetPos(yyDollar[4].expr.Pos()))
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:199
		{
			yyVAL.expr = __loop(__if(yyDollar[2].expr, yyDollar[4].expr, breakNode).SetPos(yyDollar[1].token.Pos)).SetPos(yyDollar[1].token.Pos)
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:202
		{
			yyVAL.expr = __loop(
				__chain(
					yyDollar[2].expr,
					__if(yyDollar[4].expr, breakNode, emptyNode).SetPos(yyDollar[1].token.Pos),
				).SetPos(yyDollar[1].token.Pos),
			).SetPos(yyDollar[1].token.Pos)
		}
	case 33:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:210
		{
			forVar, forEnd := NewSymbolFromToken(yyDollar[2].token), randomVarname()
			yyVAL.expr = __do(
				__set(forVar, yyDollar[4].expr).SetPos(yyDollar[1].token.Pos),
				__set(forEnd, yyDollar[6].expr).SetPos(yyDollar[1].token.Pos),
				__loop(
					__if(
						__lessEq(forVar, forEnd),
						__chain(yyDollar[8].expr, __inc(forVar, oneNode).SetPos(yyDollar[1].token.Pos)),
						breakNode,
					).SetPos(yyDollar[1].token.Pos),
				).SetPos(yyDollar[1].token.Pos),
			)
		}
	case 34:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:224
		{
			forVar, forEnd := NewSymbolFromToken(yyDollar[2].token), randomVarname()
			if yyDollar[8].expr.IsNumber() { // step is a static number, easy case
				var cond Node
				if yyDollar[8].expr.IsNegativeNumber() {
					cond = __lessEq(forEnd, forVar)
				} else {
					cond = __lessEq(forVar, forEnd)
				}
				yyVAL.expr = __do(
					__set(forVar, yyDollar[4].expr).SetPos(yyDollar[1].token.Pos),
					__set(forEnd, yyDollar[6].expr).SetPos(yyDollar[1].token.Pos),
					__loop(
						__chain(
							__if(
								cond,
								__chain(yyDollar[10].expr, __inc(forVar, yyDollar[8].expr)),
								breakNode,
							).SetPos(yyDollar[1].token.Pos),
						),
					).SetPos(yyDollar[1].token.Pos),
				)
			} else {
				forStep := randomVarname()
				yyVAL.expr = __do(
					__set(forVar, yyDollar[4].expr).SetPos(yyDollar[1].token.Pos),
					__set(forEnd, yyDollar[6].expr).SetPos(yyDollar[1].token.Pos),
					__set(forStep, yyDollar[8].expr).SetPos(yyDollar[1].token.Pos),
					__loop(
						__chain(
							__if(
								__less(zeroNode, forStep).SetPos(yyDollar[1].token.Pos),
								// +step
								__if(__less(forEnd, forVar), breakNode, emptyNode).SetPos(yyDollar[1].token.Pos),
								// -step
								__if(__less(forVar, forEnd), breakNode, emptyNode).SetPos(yyDollar[1].token.Pos),
							).SetPos(yyDollar[1].token.Pos),
							yyDollar[10].expr,
							__inc(forVar, forStep),
						),
					).SetPos(yyDollar[1].token.Pos),
				)
			}

		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:271
		{
			yyVAL.expr = __if(yyDollar[2].expr, yyDollar[4].expr, yyDollar[5].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 36:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:276
		{
			yyVAL.expr = NewComplex()
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:279
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 38:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:282
		{
			yyVAL.expr = __if(yyDollar[2].expr, yyDollar[4].expr, yyDollar[5].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:287
		{
			yyVAL.expr = NewSymbol(AMove).SetPos(yyDollar[1].token.Pos)
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:288
		{
			yyVAL.expr = NewSymbol(ASet).SetPos(yyDollar[1].token.Pos)
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:291
		{
			yyVAL.expr = __func(yyDollar[1].expr, yyDollar[2].token, yyDollar[3].expr, "", yyDollar[4].expr)
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:292
		{
			yyVAL.expr = __func(yyDollar[1].expr, yyDollar[2].token, yyDollar[3].expr, yyDollar[4].token.Str, yyDollar[5].expr)
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:295
		{
			yyVAL.expr = NewComplex()
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:296
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:299
		{
			yyVAL.expr = NewComplex(NewSymbol(AYield), yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:300
		{
			yyVAL.expr = NewComplex(NewSymbol(AYield), emptyNode).SetPos(yyDollar[1].token.Pos)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:301
		{
			yyVAL.expr = NewComplex(NewSymbol(ABreak)).SetPos(yyDollar[1].token.Pos)
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:302
		{
			yyVAL.expr = NewComplex(NewSymbol(AGoto), NewSymbolFromToken(yyDollar[2].token)).SetPos(yyDollar[1].token.Pos)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:303
		{
			yyVAL.expr = NewComplex(NewSymbol(ALabel), NewSymbolFromToken(yyDollar[2].token))
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:304
		{
			yyVAL.expr = NewComplex(NewSymbol(AReturn), emptyNode).SetPos(yyDollar[1].token.Pos)
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:305
		{
			if len(yyDollar[2].expr.Nodes) == 1 {
				x := yyDollar[2].expr.Nodes[0]
				if len(x.Nodes) == 3 && x.Nodes[0].SymbolValue() == ACall {
					x.Nodes[0].strSym = ATailCall
				}
			}
			yyVAL.expr = NewComplex(NewSymbol(AReturn), yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:316
		{
			yyVAL.expr = NewSymbolFromToken(yyDollar[1].token)
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:317
		{
			yyVAL.expr = __load(yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:318
		{
			yyVAL.expr = NewComplex(NewSymbol(ASlice), yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:319
		{
			yyVAL.expr = __load(yyDollar[1].expr, NewString(yyDollar[3].token.Str)).SetPos(yyDollar[2].token.Pos)
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:322
		{
			yyVAL.expr = NewComplex(yyDollar[1].expr)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:323
		{
			yyVAL.expr = yyDollar[1].expr.append(yyDollar[3].expr)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:326
		{
			yyVAL.expr = NewComplex(NewSymbolFromToken(yyDollar[1].token))
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:327
		{
			yyVAL.expr = yyDollar[1].expr.append(NewSymbolFromToken(yyDollar[3].token))
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:330
		{
			yyVAL.expr = NewNumberFromString(yyDollar[1].token.Str)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:331
		{
			yyVAL.expr = NewString(yyDollar[1].token.Str)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:332
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:333
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:334
		{
			yyVAL.expr = NewComplex(NewSymbol(AOr), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:335
		{
			yyVAL.expr = NewComplex(NewSymbol(AAnd), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:336
		{
			yyVAL.expr = NewComplex(NewSymbol(ALess), yyDollar[3].expr, yyDollar[1].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:337
		{
			yyVAL.expr = NewComplex(NewSymbol(ALess), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:338
		{
			yyVAL.expr = NewComplex(NewSymbol(ALessEq), yyDollar[3].expr, yyDollar[1].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:339
		{
			yyVAL.expr = NewComplex(NewSymbol(ALessEq), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:340
		{
			yyVAL.expr = NewComplex(NewSymbol(AEq), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:341
		{
			yyVAL.expr = NewComplex(NewSymbol(ANeq), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:342
		{
			yyVAL.expr = NewComplex(NewSymbol(AAdd), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:343
		{
			yyVAL.expr = NewComplex(NewSymbol(AConcat), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:344
		{
			yyVAL.expr = NewComplex(NewSymbol(ASub), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:345
		{
			yyVAL.expr = NewComplex(NewSymbol(AMul), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:346
		{
			yyVAL.expr = NewComplex(NewSymbol(ADiv), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:347
		{
			yyVAL.expr = NewComplex(NewSymbol(AMod), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:348
		{
			yyVAL.expr = NewComplex(NewSymbol(APow), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:349
		{
			yyVAL.expr = NewComplex(NewSymbol(ANot), yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:350
		{
			yyVAL.expr = NewComplex(NewSymbol(ASub), zeroNode, yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:351
		{
			yyVAL.expr = NewComplex(NewSymbol(ALen), yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:354
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:355
		{
			yyVAL.expr = __call(yyDollar[1].expr, NewComplex(NewString(yyDollar[2].token.Str))).SetPos(yyDollar[1].expr.Pos())
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:356
		{
			yyVAL.expr = __call(yyDollar[1].expr, yyDollar[2].expr).SetPos(yyDollar[1].expr.Pos())
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:357
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:358
		{
			yyVAL.expr = __callMap(yyDollar[1].expr, emptyNode, yyDollar[3].expr).SetPos(yyDollar[1].expr.Pos())
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:359
		{
			yyVAL.expr = __callMap(yyDollar[1].expr, emptyNode, yyDollar[3].expr).SetPos(yyDollar[1].expr.Pos())
		}
	case 88:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:360
		{
			yyVAL.expr = __callMap(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr).SetPos(yyDollar[1].expr.Pos())
		}
	case 89:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:361
		{
			yyVAL.expr = __callMap(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr).SetPos(yyDollar[1].expr.Pos())
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:364
		{
			yyVAL.expr = NewComplex(yyDollar[1].expr)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:365
		{
			yyVAL.expr = yyDollar[1].expr.append(yyDollar[3].expr)
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:368
		{
			yyVAL.expr = NewComplex()
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:369
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:372
		{
			yyVAL.expr = NewComplex(NewString(yyDollar[1].token.Str), yyDollar[3].expr)
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:373
		{
			yyVAL.expr = NewComplex(yyDollar[2].expr, yyDollar[5].expr)
		}
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:374
		{
			yyVAL.expr = yyDollar[1].expr.append(NewString(yyDollar[3].token.Str)).append(yyDollar[5].expr)
		}
	case 97:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:375
		{
			yyVAL.expr = yyDollar[1].expr.append(yyDollar[4].expr).append(yyDollar[7].expr)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:378
		{
			yyVAL.expr = NewComplex(NewSymbol(AJSON), emptyNode, yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:379
		{
			yyVAL.expr = NewComplex(NewSymbol(AJSON), emptyNode, yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:380
		{
			yyVAL.expr = NewComplex(NewSymbol(AJSON), yyDollar[2].expr, emptyNode).SetPos(yyDollar[1].token.Pos)
		}
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:381
		{
			yyVAL.expr = NewComplex(NewSymbol(AJSON), yyDollar[2].expr, emptyNode).SetPos(yyDollar[1].token.Pos)
		}
	}
	goto yystack /* stack new state and value */
}

// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import "strconv"
import "math/rand"

//line parser.go.y:33
type yySymType struct {
	yys   int
	token Token
	expr  *Node
	atom  Symbol
}

const TDo = 57346
const TIn = 57347
const TLocal = 57348
const TElseIf = 57349
const TThen = 57350
const TEnd = 57351
const TBreak = 57352
const TContinue = 57353
const TElse = 57354
const TFor = 57355
const TWhile = 57356
const TFunc = 57357
const TIf = 57358
const TLen = 57359
const TReturn = 57360
const TReturnVoid = 57361
const TImport = 57362
const TYield = 57363
const TYieldVoid = 57364
const TRepeat = 57365
const TUntil = 57366
const TNot = 57367
const TEqeq = 57368
const TNeq = 57369
const TLte = 57370
const TGte = 57371
const TIdent = 57372
const TNumber = 57373
const TString = 57374
const TAddEq = 57375
const TSubEq = 57376
const TMulEq = 57377
const TDivEq = 57378
const TModEq = 57379
const TSquare = 57380
const TDotDotDot = 57381
const TDotDot = 57382
const TSet = 57383
const ASSIGN = 57384
const FUNC = 57385
const TOr = 57386
const TAnd = 57387
const UNARY = 57388

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"TDo",
	"TIn",
	"TLocal",
	"TElseIf",
	"TThen",
	"TEnd",
	"TBreak",
	"TContinue",
	"TElse",
	"TFor",
	"TWhile",
	"TFunc",
	"TIf",
	"TLen",
	"TReturn",
	"TReturnVoid",
	"TImport",
	"TYield",
	"TYieldVoid",
	"TRepeat",
	"TUntil",
	"TNot",
	"TEqeq",
	"TNeq",
	"TLte",
	"TGte",
	"TIdent",
	"TNumber",
	"TString",
	"'{'",
	"'['",
	"'('",
	"TAddEq",
	"TSubEq",
	"TMulEq",
	"TDivEq",
	"TModEq",
	"TSquare",
	"TDotDotDot",
	"TDotDot",
	"TSet",
	"'T'",
	"ASSIGN",
	"FUNC",
	"TOr",
	"TAnd",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"UNARY",
	"';'",
	"'='",
	"']'",
	"'.'",
	"','",
	"':'",
	"')'",
	"'&'",
	"'#'",
	"'}'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:397

func opSetMove(op *Node) func(dest, src interface{}) *Node {
	if op.Sym() == ASet {
		return __set
	}
	return __move
}

func randomVarname() *Node {
	return Sym("v" + strconv.FormatInt(rand.Int63(), 10))
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 27,
	60, 52,
	63, 52,
	-2, 86,
	-1, 116,
	60, 53,
	63, 53,
	-2, 86,
}

const yyPrivate = 57344

const yyLast = 1215

var yyAct = [...]int{

	33, 39, 193, 18, 102, 70, 105, 58, 55, 38,
	178, 156, 32, 178, 179, 154, 203, 179, 153, 201,
	155, 204, 151, 64, 202, 50, 67, 152, 57, 114,
	77, 177, 47, 18, 27, 72, 73, 74, 75, 76,
	71, 79, 98, 99, 60, 101, 227, 103, 218, 57,
	79, 180, 161, 109, 157, 125, 61, 126, 71, 106,
	205, 157, 199, 71, 27, 117, 46, 18, 56, 112,
	45, 127, 26, 124, 120, 115, 91, 92, 93, 149,
	130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 141, 142, 143, 144, 145, 116, 146, 27, 95,
	51, 59, 26, 54, 46, 96, 56, 113, 173, 158,
	114, 150, 54, 46, 52, 56, 160, 172, 163, 62,
	166, 167, 63, 169, 1, 59, 162, 57, 168, 122,
	164, 31, 121, 97, 48, 147, 26, 174, 57, 29,
	60, 128, 53, 72, 73, 74, 75, 76, 65, 184,
	18, 110, 61, 108, 100, 130, 68, 66, 185, 210,
	191, 188, 37, 183, 17, 187, 181, 18, 4, 3,
	16, 15, 18, 18, 5, 19, 69, 197, 198, 21,
	200, 27, 88, 90, 94, 91, 92, 93, 206, 2,
	0, 0, 208, 209, 0, 0, 212, 0, 27, 0,
	215, 0, 130, 27, 27, 0, 219, 0, 0, 18,
	0, 0, 0, 18, 0, 18, 18, 0, 0, 26,
	0, 0, 0, 0, 230, 0, 0, 148, 232, 0,
	18, 18, 0, 18, 236, 0, 26, 0, 0, 18,
	27, 26, 26, 165, 27, 89, 27, 27, 170, 171,
	0, 0, 0, 0, 88, 90, 94, 91, 92, 93,
	0, 27, 27, 0, 27, 0, 0, 49, 0, 0,
	27, 0, 0, 0, 0, 0, 30, 0, 26, 0,
	0, 36, 26, 0, 26, 26, 42, 0, 0, 0,
	0, 107, 35, 40, 46, 108, 29, 0, 0, 26,
	26, 0, 26, 34, 0, 0, 0, 49, 26, 0,
	0, 0, 0, 0, 41, 207, 30, 0, 0, 211,
	0, 36, 213, 214, 0, 0, 42, 43, 44, 104,
	0, 48, 35, 40, 46, 0, 29, 0, 0, 0,
	0, 0, 0, 34, 0, 0, 228, 229, 0, 231,
	0, 0, 49, 0, 41, 0, 0, 0, 0, 0,
	237, 30, 0, 0, 0, 0, 36, 43, 44, 217,
	0, 42, 0, 0, 0, 0, 48, 35, 40, 46,
	0, 29, 0, 0, 0, 0, 0, 0, 34, 0,
	0, 0, 0, 86, 87, 85, 84, 0, 0, 41,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 43, 44, 182, 80, 81, 82, 83, 88,
	90, 94, 91, 92, 93, 49, 0, 0, 0, 0,
	0, 0, 129, 0, 30, 0, 0, 0, 0, 36,
	0, 0, 0, 0, 42, 0, 0, 0, 0, 48,
	35, 40, 46, 0, 29, 0, 0, 222, 0, 0,
	0, 34, 0, 0, 49, 0, 0, 0, 0, 0,
	0, 0, 41, 30, 0, 0, 0, 0, 36, 86,
	87, 85, 84, 42, 111, 43, 44, 0, 48, 35,
	40, 46, 0, 29, 0, 0, 89, 0, 0, 0,
	34, 80, 81, 82, 83, 88, 90, 94, 91, 92,
	93, 41, 86, 87, 85, 84, 223, 0, 0, 0,
	0, 0, 0, 0, 43, 44, 0, 0, 0, 89,
	0, 0, 0, 0, 80, 81, 82, 83, 88, 90,
	94, 91, 92, 93, 6, 0, 20, 195, 0, 192,
	10, 11, 194, 24, 22, 30, 25, 0, 12, 13,
	14, 8, 9, 23, 0, 0, 0, 6, 0, 20,
	28, 0, 238, 10, 11, 29, 24, 22, 30, 25,
	0, 12, 13, 14, 8, 9, 23, 0, 0, 0,
	0, 0, 0, 28, 0, 6, 0, 20, 29, 7,
	234, 10, 11, 0, 24, 22, 30, 25, 0, 12,
	13, 14, 8, 9, 23, 0, 0, 0, 6, 0,
	20, 28, 7, 233, 10, 11, 29, 24, 22, 30,
	25, 0, 12, 13, 14, 8, 9, 23, 0, 0,
	0, 0, 0, 0, 28, 0, 6, 0, 20, 29,
	7, 226, 10, 11, 0, 24, 22, 30, 25, 0,
	12, 13, 14, 8, 9, 23, 0, 0, 0, 6,
	0, 20, 28, 7, 225, 10, 11, 29, 24, 22,
	30, 25, 0, 12, 13, 14, 8, 9, 23, 0,
	0, 0, 0, 0, 0, 28, 0, 6, 0, 20,
	29, 7, 220, 10, 11, 0, 24, 22, 30, 25,
	0, 12, 13, 14, 8, 9, 23, 0, 86, 87,
	85, 84, 0, 28, 7, 0, 0, 0, 29, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 0, 0,
	80, 81, 82, 83, 88, 90, 94, 91, 92, 93,
	0, 0, 7, 216, 6, 0, 20, 0, 0, 196,
	10, 11, 0, 24, 22, 30, 25, 0, 12, 13,
	14, 8, 9, 23, 0, 0, 0, 6, 0, 20,
	28, 0, 189, 10, 11, 29, 24, 22, 30, 25,
	0, 12, 13, 14, 8, 9, 23, 0, 86, 87,
	85, 84, 0, 28, 0, 0, 0, 0, 29, 7,
	0, 0, 0, 0, 0, 89, 0, 0, 0, 0,
	80, 81, 82, 83, 88, 90, 94, 91, 92, 93,
	0, 0, 7, 186, 6, 0, 20, 0, 0, 176,
	10, 11, 0, 24, 22, 30, 25, 0, 12, 13,
	14, 8, 9, 23, 0, 86, 87, 85, 84, 0,
	28, 0, 0, 0, 0, 29, 0, 0, 0, 0,
	0, 0, 89, 0, 0, 0, 0, 80, 81, 82,
	83, 88, 90, 94, 91, 92, 93, 0, 0, 7,
	175, 86, 87, 85, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 0, 80, 81, 82, 83, 88, 90, 94,
	91, 92, 93, 6, 0, 20, 159, 0, 0, 10,
	11, 0, 24, 22, 30, 25, 0, 12, 13, 14,
	8, 9, 23, 119, 0, 0, 6, 0, 20, 28,
	0, 78, 10, 11, 29, 24, 22, 30, 25, 0,
	12, 13, 14, 8, 9, 23, 0, 0, 0, 0,
	0, 235, 28, 6, 0, 20, 0, 29, 7, 10,
	11, 0, 24, 22, 30, 25, 0, 12, 13, 14,
	8, 9, 23, 86, 87, 85, 84, 0, 0, 28,
	0, 7, 0, 0, 29, 0, 0, 0, 0, 0,
	89, 224, 0, 0, 0, 80, 81, 82, 83, 88,
	90, 94, 91, 92, 93, 221, 0, 0, 7, 86,
	87, 85, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 190, 0, 0, 89, 86, 87, 85,
	84, 80, 81, 82, 83, 88, 90, 94, 91, 92,
	93, 0, 0, 0, 89, 86, 87, 85, 84, 80,
	81, 82, 83, 88, 90, 94, 91, 92, 93, 123,
	0, 0, 89, 0, 0, 0, 0, 80, 81, 82,
	83, 88, 90, 94, 91, 92, 93, 86, 87, 85,
	84, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 0, 0, 0, 89, 0, 0, 0, 0, 80,
	81, 82, 83, 88, 90, 94, 91, 92, 93, 86,
	87, 85, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 86, 87, 85,
	84, 80, 81, 82, 83, 88, 90, 94, 91, 92,
	93, 0, 0, 0, 89, 86, 87, 85, 84, 80,
	81, 82, 83, 88, 90, 94, 91, 92, 93, 0,
	0, 0, 89, 86, 87, 85, 84, 0, 81, 82,
	83, 88, 90, 94, 91, 92, 93, 0, 0, 0,
	89, 0, 0, 0, 0, 0, 0, 82, 83, 88,
	90, 94, 91, 92, 93,
}
var yyPact = [...]int{

	-1000, 969, -1000, -1000, -1000, -1000, -1000, -1000, 458, -1000,
	-1000, -1000, 458, -1000, 68, -1000, -1000, -1000, 80, -1000,
	110, 59, 458, -1000, 127, 458, 126, -1000, -1, 458,
	-1000, 942, -22, 1121, -1000, -1000, 67, -1000, -1000, 71,
	-1000, 458, 458, 124, 458, 12, 261, -1000, -24, 86,
	-22, -1000, 458, 121, -1000, -1000, 419, -1000, 47, -1000,
	-1000, -1000, 458, 104, 1103, 919, 69, 1071, 12, -7,
	458, 111, -1000, -1000, -1000, -1000, -1000, 367, -1000, 458,
	458, 458, 458, 458, 458, 458, 458, 458, 458, 458,
	458, 458, 458, 458, 458, -1000, 458, 105, -1000, -1000,
	-1000, -1000, -1000, 14, -1000, -41, -48, -6, 458, 865,
	107, -1000, -13, 458, 88, -22, -1000, 71, -1000, 458,
	458, 98, 458, -1000, -1000, 87, 78, 1121, 33, -1000,
	1121, 1139, 1157, 202, 202, 202, 202, 202, 202, 21,
	130, 21, -1000, -1000, -1000, 21, 829, -1000, 830, -1000,
	-34, -17, -1000, 458, 346, -1000, 119, 458, 772, 107,
	458, -1000, -22, -1000, -1000, 773, 1121, 1039, 155, 486,
	540, 750, 12, 12, -1000, -1000, -1000, -1000, 2, 458,
	-1000, -44, -1000, -47, 1, 1121, 0, 458, 1121, -1000,
	-1000, 458, 458, 150, -1000, 458, -1000, -1000, -1000, 458,
	692, 301, -1000, -20, -1000, 458, 1121, 693, 1021, 453,
	-1000, 969, 1003, 665, 642, 1121, -14, -1000, -1000, 1121,
	-1000, -1000, -1000, 458, -1000, -1000, -1000, 458, 614, 591,
	967, 540, 1121, -1000, -1000, -1000, -1000, 563, -1000,
}
var yyPgo = [...]int{

	0, 124, 189, 32, 179, 7, 176, 12, 8, 6,
	0, 175, 5, 1, 174, 171, 170, 2, 169, 168,
	70, 164, 162, 4, 9,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 2, 2, 2, 19, 19,
	19, 12, 12, 12, 12, 12, 14, 14, 14, 14,
	14, 11, 11, 11, 15, 15, 15, 15, 15, 15,
	16, 17, 17, 17, 20, 20, 21, 21, 21, 22,
	23, 23, 18, 18, 18, 18, 18, 18, 18, 3,
	3, 3, 4, 4, 5, 5, 5, 5, 6, 6,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 13, 13, 13, 13,
	13, 7, 7, 8, 8, 8, 9, 9, 9, 9,
	24, 24, 24, 24, 24, 24, 24, 24, 24,
}
var yyR2 = [...]int{

	0, 0, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 4,
	3, 3, 6, 5, 5, 4, 7, 9, 9, 11,
	6, 0, 2, 5, 1, 2, 5, 7, 7, 4,
	2, 3, 2, 1, 1, 1, 2, 1, 2, 1,
	4, 3, 1, 3, 1, 1, 3, 3, 1, 3,
	1, 1, 2, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 1, 2, 4, 2,
	3, 1, 3, 2, 3, 1, 3, 5, 5, 7,
	2, 3, 4, 5, 6, 3, 5, 6, 4,
}
var yyChk = [...]int{

	-1000, -1, -2, -18, -19, -14, 4, 59, 21, 22,
	10, 11, 18, 19, 20, -15, -16, -21, -13, -11,
	6, -4, 14, 23, 13, 16, -20, -3, 30, 35,
	15, -1, -7, -10, 42, 31, 20, -22, -24, -13,
	32, 53, 25, 66, 67, -20, 33, -3, 30, 6,
	-7, 32, 34, 62, 32, -8, 35, -24, -5, 15,
	30, 42, 60, 63, -10, -1, 30, -10, 30, -6,
	-12, 64, 36, 37, 38, 39, 40, -10, 9, 63,
	48, 49, 50, 51, 29, 28, 26, 27, 52, 43,
	53, 55, 56, 57, 54, 32, 34, 62, -10, -10,
	30, -10, -23, 35, 68, -9, -7, 30, 34, -10,
	30, 65, -7, 60, 63, -7, -3, -13, 4, 24,
	5, 63, 60, 8, -23, 62, 64, -10, 30, 65,
	-10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
	-10, -10, -10, -10, -10, -10, -10, 30, -1, 65,
	-5, 63, 68, 59, 63, 68, 59, 60, -10, 61,
	-12, 65, -7, 30, 42, -1, -10, -10, 30, -10,
	-1, -1, 30, 30, -8, 61, 9, 65, 30, 34,
	68, -7, 68, -9, 30, -10, 61, -12, -10, 9,
	4, 5, 63, -17, 12, 7, 9, -23, -23, 60,
	-10, 63, 68, 63, 68, 60, -10, -1, -10, -10,
	9, -1, -10, -1, -1, -10, 61, 68, 68, -10,
	9, 4, 4, 63, 8, 9, 9, 60, -1, -1,
	-10, -1, -10, 9, 9, 4, -17, -1, 9,
}
var yyDef = [...]int{

	1, -2, 2, 3, 4, 5, 1, 7, 0, 43,
	44, 45, 0, 47, 0, 8, 9, 10, 16, 17,
	0, 0, 0, 1, 0, 0, 0, -2, 49, 0,
	34, 0, 42, 91, 60, 61, 0, 63, 64, 65,
	66, 0, 0, 0, 0, 0, 0, 86, 49, 0,
	46, 48, 0, 0, 87, 89, 0, 95, 18, 35,
	54, 55, 0, 0, 0, 0, 0, 0, 58, 0,
	0, 0, 11, 12, 13, 14, 15, 0, 6, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 82, 83,
	84, 85, 1, 0, 100, 0, 0, 49, 0, 0,
	51, 93, 0, 0, 0, 20, -2, 0, 1, 0,
	0, 0, 0, 1, 1, 0, 0, 21, 0, 90,
	92, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 81, 0, 51, 0, 40,
	0, 0, 101, 0, 0, 105, 0, 0, 0, 50,
	0, 94, 19, 56, 57, 0, 25, 0, 0, 0,
	31, 0, 59, 0, 88, 50, 39, 41, 0, 0,
	102, 0, 108, 0, 0, 96, 0, 0, 23, 24,
	1, 0, 0, 0, 1, 0, 36, 1, 1, 0,
	0, 0, 103, 0, 106, 0, 22, 0, 0, 0,
	30, 32, 0, 0, 0, 98, 0, 104, 107, 97,
	26, 1, 1, 0, 1, 37, 38, 0, 0, 0,
	0, 31, 99, 27, 28, 1, 33, 0, 29,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 67, 3, 57, 66, 3,
	35, 65, 55, 52, 63, 53, 62, 56, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 64, 59,
	51, 60, 50, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 45, 3, 3, 3, 3, 3,
	3, 34, 3, 61, 54, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 33, 3, 68,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	46, 47, 48, 49, 58,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:64
		{
			yyVAL.expr = __chain()
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.expr
			}
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:70
		{
			yyVAL.expr = yyDollar[1].expr.CplAppend(yyDollar[2].expr)
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.expr
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:78
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:79
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:80
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:81
		{
			yyVAL.expr = __do(yyDollar[2].expr)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:82
		{
			yyVAL.expr = emptyNode
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:85
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:86
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:87
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:90
		{
			yyVAL.atom = AAdd
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:91
		{
			yyVAL.atom = ASub
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:92
		{
			yyVAL.atom = AMul
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:93
		{
			yyVAL.atom = ADiv
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:94
		{
			yyVAL.atom = AMod
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:97
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:100
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:103
		{
			yyVAL.expr = __chain()
			for _, v := range yyDollar[2].expr.Cpl() {
				yyVAL.expr = yyVAL.expr.CplAppend(__set(v, nilNode).pos0(yyDollar[1].token))
			}
		}
	case 19:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:109
		{
			m, n := len(yyDollar[2].expr.Cpl()), len(yyDollar[4].expr.Cpl())
			for i := 0; i < m-n; i++ {
				yyDollar[4].expr.CplAppend(popvNode)
			}

			yyVAL.expr = __chain()
			for i, v := range yyDollar[2].expr.Cpl() {
				yyVAL.expr = yyVAL.expr.CplAppend(__set(v, yyDollar[4].expr.CplIndex(i)).pos0(yyDollar[1].token))
			}
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:120
		{
			nodes := yyDollar[1].expr.Cpl()
			m, n := len(nodes), len(yyDollar[3].expr.Cpl())
			for i := 0; i < m-n; i++ {
				yyDollar[3].expr.CplAppend(popvNode)
			}

			if head := nodes[0]; len(nodes) == 1 {
				// a0 = b0
				yyVAL.expr = head.moveLoadStore(__move, yyDollar[3].expr.CplIndex(0)).pos0(yyDollar[1].expr)
				if a, s := yyDollar[3].expr.CplIndex(0).isSimpleAddSub(); a != "" && a == head.Sym() {
					yyVAL.expr = __inc(head, Num(s)).pos0(yyDollar[1].expr)
				}
			} else {
				// a0, ..., an = b0, ..., bn
				yyVAL.expr = __chain()
				names, retaddr := []*Node{}, Cpl(ARetAddr)
				for i := range nodes {
					names = append(names, randomVarname())
					retaddr.CplAppend(names[i])
					yyVAL.expr.CplAppend(__set(names[i], yyDollar[3].expr.CplIndex(i)).pos0(yyDollar[1].expr))
				}
				for i, v := range nodes {
					yyVAL.expr.CplAppend(v.moveLoadStore(__move, names[i]).pos0(yyDollar[1].expr))
				}
				yyVAL.expr.CplAppend(retaddr)
			}
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:150
		{
			yyVAL.expr = __move(SymTok(yyDollar[1].token), Cpl(yyDollar[2].atom, SymTok(yyDollar[1].token).pos0(yyDollar[1].token), yyDollar[3].expr)).pos0(yyDollar[1].token)
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:153
		{
			yyVAL.expr = __store(yyDollar[1].expr, yyDollar[3].expr, Cpl(yyDollar[5].atom, __load(yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr), yyDollar[6].expr).pos0(yyDollar[1].expr))
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:156
		{
			yyVAL.expr = __store(yyDollar[1].expr, Nod(yyDollar[3].token.Str), Cpl(yyDollar[4].atom, __load(yyDollar[1].expr, Nod(yyDollar[3].token.Str)).pos0(yyDollar[1].expr), yyDollar[5].expr).pos0(yyDollar[1].expr))
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:161
		{
			yyVAL.expr = __loop(__if(yyDollar[2].expr, yyDollar[4].expr, breakNode).pos0(yyDollar[1].token)).pos0(yyDollar[1].token)
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:164
		{
			yyVAL.expr = __loop(
				__chain(
					yyDollar[2].expr,
					__if(yyDollar[4].expr, breakNode, emptyNode).pos0(yyDollar[1].token),
				).pos0(yyDollar[1].token),
			).pos0(yyDollar[1].token)
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:172
		{
			iter := randomVarname()
			yyVAL.expr = __do(
				__set(iter, yyDollar[4].expr).pos0(yyDollar[1].token),
				__loop(
					__chain(
						__set(yyDollar[2].token, __call(iter, emptyNode).pos0(yyDollar[1].token)).pos0(yyDollar[1].token),
						__if(yyDollar[2].token, yyDollar[6].expr, breakNode).pos0(yyDollar[1].token),
					),
				).pos0(yyDollar[1].token),
			)
		}
	case 27:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:184
		{
			iter := randomVarname()
			yyVAL.expr = __do(
				__set(iter, yyDollar[6].expr).pos0(yyDollar[1].token),
				__loop(
					__chain(
						__set(yyDollar[2].token, __call(iter, emptyNode).pos0(yyDollar[1].token)).pos0(yyDollar[1].token),
						__set(yyDollar[4].token, popvNode).pos0(yyDollar[1].token),
						__if(yyDollar[2].token, yyDollar[8].expr, breakNode).pos0(yyDollar[1].token),
					),
				).pos0(yyDollar[1].token),
			)
		}
	case 28:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:197
		{
			forVar, forEnd := SymTok(yyDollar[2].token), randomVarname()
			yyVAL.expr = __do(
				__set(forVar, yyDollar[4].expr).pos0(yyDollar[1].token),
				__set(forEnd, yyDollar[6].expr).pos0(yyDollar[1].token),
				__loop(
					__if(
						__lessEq(forVar, forEnd),
						__chain(yyDollar[8].expr, __inc(forVar, oneNode).pos0(yyDollar[1].token)),
						breakNode,
					).pos0(yyDollar[1].token),
				).pos0(yyDollar[1].token),
			)
		}
	case 29:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:211
		{
			forVar, forEnd := SymTok(yyDollar[2].token), randomVarname()
			if yyDollar[8].expr.Type() == NUM { // step is a static number, easy case
				var cond *Node
				if yyDollar[8].expr.Num() < 0 {
					cond = __lessEq(forEnd, forVar)
				} else {
					cond = __lessEq(forVar, forEnd)
				}
				yyVAL.expr = __do(
					__set(forVar, yyDollar[4].expr).pos0(yyDollar[1].token),
					__set(forEnd, yyDollar[6].expr).pos0(yyDollar[1].token),
					__loop(
						__chain(
							__if(
								cond,
								__chain(yyDollar[10].expr, __inc(forVar, yyDollar[8].expr)),
								breakNode,
							).pos0(yyDollar[1].token),
						),
					).pos0(yyDollar[1].token),
				)
			} else {
				forStep := randomVarname()
				yyVAL.expr = __do(
					__set(forVar, yyDollar[4].expr).pos0(yyDollar[1].token),
					__set(forEnd, yyDollar[6].expr).pos0(yyDollar[1].token),
					__set(forStep, yyDollar[8].expr).pos0(yyDollar[1].token),
					__loop(
						__chain(
							__if(
								__less(zeroNode, forStep).pos0(yyDollar[1].token),
								// +step
								__if(__less(forEnd, forVar), breakNode, emptyNode).pos0(yyDollar[1].token),
								// -step
								__if(__less(forVar, forEnd), breakNode, emptyNode).pos0(yyDollar[1].token),
							).pos0(yyDollar[1].token),
							yyDollar[10].expr,
							__inc(forVar, forStep),
						),
					).pos0(yyDollar[1].token),
				)
			}

		}
	case 30:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:258
		{
			yyVAL.expr = __if(yyDollar[2].expr, yyDollar[4].expr, yyDollar[5].expr).pos0(yyDollar[1].token)
		}
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:263
		{
			yyVAL.expr = Cpl()
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:266
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:269
		{
			yyVAL.expr = __if(yyDollar[2].expr, yyDollar[4].expr, yyDollar[5].expr).pos0(yyDollar[1].token)
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:274
		{
			yyVAL.expr = Nod(AMove).SetPos(yyDollar[1].token)
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:277
		{
			yyVAL.expr = Nod(ASet).SetPos(yyDollar[1].token)
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:282
		{
			funcname := SymTok(yyDollar[2].token)
			yyVAL.expr = __chain(
				opSetMove(yyDollar[1].expr)(funcname, nilNode).pos0(yyDollar[2].token),
				__move(funcname, __func(yyDollar[3].expr, yyDollar[4].expr).pos0(yyDollar[2].token)).pos0(yyDollar[2].token),
			)
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:289
		{
			yyVAL.expr = __store(yyDollar[2].expr, Nod(yyDollar[4].token.Str), __func(yyDollar[5].expr, yyDollar[6].expr).pos0(yyDollar[4].token)).pos0(yyDollar[4].token)
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:292
		{
			paramlist := yyDollar[5].expr.CplPrepend(Sym("self"))
			yyVAL.expr = __store(
				yyDollar[2].expr, Nod(yyDollar[4].token.Str), __func(paramlist, yyDollar[6].expr).pos0(yyDollar[4].token),
			).pos0(yyDollar[4].token)
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:300
		{
			yyVAL.expr = __func(yyDollar[2].expr, yyDollar[3].expr).pos0(yyDollar[1].expr).SetPos(yyDollar[1].expr)
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:305
		{
			yyVAL.expr = Cpl()
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:306
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 42:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:309
		{
			yyVAL.expr = Cpl(AYield, yyDollar[2].expr).pos0(yyDollar[1].token)
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:310
		{
			yyVAL.expr = Cpl(AYield, emptyNode).pos0(yyDollar[1].token)
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:311
		{
			yyVAL.expr = Cpl(ABreak).pos0(yyDollar[1].token)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:312
		{
			yyVAL.expr = Cpl(AContinue).pos0(yyDollar[1].token)
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:313
		{
			yyVAL.expr = Cpl(AReturn, yyDollar[2].expr).pos0(yyDollar[1].token)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:314
		{
			yyVAL.expr = Cpl(AReturn, emptyNode).pos0(yyDollar[1].token)
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:315
		{
			yyVAL.expr = __move(Sym(moduleNameFromPath(yyDollar[2].token.Str)), yylex.(*Lexer).loadFile(joinSourcePath(yyDollar[1].token.Pos.Source, yyDollar[2].token.Str), yyDollar[1].token)).pos0(yyDollar[1].token)
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:318
		{
			yyVAL.expr = SymTok(yyDollar[1].token).SetPos(yyDollar[1].token)
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:319
		{
			yyVAL.expr = __load(yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[3].expr).SetPos(yyDollar[3].expr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:320
		{
			yyVAL.expr = __load(yyDollar[1].expr, Nod(yyDollar[3].token.Str)).pos0(yyDollar[3].token).SetPos(yyDollar[3].token)
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:323
		{
			yyVAL.expr = Cpl(yyDollar[1].expr)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:324
		{
			yyVAL.expr = yyDollar[1].expr.CplAppend(yyDollar[3].expr)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:327
		{
			yyVAL.expr = Cpl(yyDollar[1].token.Str)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:328
		{
			yyVAL.expr = Cpl("...")
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:329
		{
			yyVAL.expr = yyDollar[1].expr.CplAppend(SymTok(yyDollar[3].token))
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:330
		{
			yyVAL.expr = yyDollar[1].expr.CplAppend(Sym("...").SetPos(yyDollar[3].token))
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:333
		{
			yyVAL.expr = SymTok(yyDollar[1].token)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:334
		{
			yyVAL.expr = __load(yyDollar[1].expr, Nod(yyDollar[3].token.Str)).pos0(yyDollar[3].token)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:337
		{
			yyVAL.expr = __call(Sym("unpack"), Cpl(Sym("arg"))).pos0(yyDollar[1].token)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:338
		{
			yyVAL.expr = Num(yyDollar[1].token.Str).SetPos(yyDollar[1].token)
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:339
		{
			yyVAL.expr = yylex.(*Lexer).loadFile(joinSourcePath(yyDollar[1].token.Pos.Source, yyDollar[2].token.Str), yyDollar[1].token)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:340
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:341
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:342
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:343
		{
			yyVAL.expr = Nod(yyDollar[1].token.Str).SetPos(yyDollar[1].token)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:344
		{
			yyVAL.expr = Cpl(AOr, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:345
		{
			yyVAL.expr = Cpl(AAnd, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:346
		{
			yyVAL.expr = Cpl(ALess, yyDollar[3].expr, yyDollar[1].expr).pos0(yyDollar[1].expr)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:347
		{
			yyVAL.expr = Cpl(ALess, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:348
		{
			yyVAL.expr = Cpl(ALessEq, yyDollar[3].expr, yyDollar[1].expr).pos0(yyDollar[1].expr)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:349
		{
			yyVAL.expr = Cpl(ALessEq, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:350
		{
			yyVAL.expr = Cpl(AEq, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:351
		{
			yyVAL.expr = Cpl(ANeq, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:352
		{
			yyVAL.expr = Cpl(AAdd, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:353
		{
			yyVAL.expr = Cpl(AConcat, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:354
		{
			yyVAL.expr = Cpl(ASub, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:355
		{
			yyVAL.expr = Cpl(AMul, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:356
		{
			yyVAL.expr = Cpl(ADiv, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:357
		{
			yyVAL.expr = Cpl(AMod, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:358
		{
			yyVAL.expr = Cpl(APow, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:359
		{
			yyVAL.expr = Cpl(ASub, zeroNode, yyDollar[2].expr).pos0(yyDollar[2].expr)
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:360
		{
			yyVAL.expr = Cpl(ANot, yyDollar[2].expr).pos0(yyDollar[2].expr)
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:361
		{
			yyVAL.expr = Cpl(AAddrOf, SymTok(yyDollar[2].token)).pos0(yyDollar[2].token)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:362
		{
			yyVAL.expr = Cpl(ALen, yyDollar[2].expr)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:365
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:366
		{
			yyVAL.expr = __call(yyDollar[1].expr, Cpl(Nod(yyDollar[2].token.Str))).pos0(yyDollar[1].expr)
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:367
		{
			yyVAL.expr = __call(__load(yyDollar[1].token, Nod(yyDollar[3].token.Str)).pos0(yyDollar[1].token), yyDollar[4].expr.CplPrepend(SymTok(yyDollar[1].token))).pos0(yyDollar[1].token)
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:368
		{
			yyVAL.expr = __call(yyDollar[1].expr, yyDollar[2].expr).pos0(yyDollar[1].expr)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:369
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:372
		{
			yyVAL.expr = Cpl(yyDollar[1].expr)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:373
		{
			yyVAL.expr = yyDollar[1].expr.CplAppend(yyDollar[3].expr)
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:376
		{
			yyVAL.expr = Cpl()
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:377
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:378
		{
			yyVAL.expr = Cpl(yyDollar[1].expr)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:381
		{
			yyVAL.expr = Cpl(Nod(yyDollar[1].token.Str), yyDollar[3].expr)
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:382
		{
			yyVAL.expr = Cpl(yyDollar[2].expr, yyDollar[5].expr)
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:383
		{
			yyVAL.expr = yyDollar[1].expr.CplAppend(Nod(yyDollar[3].token.Str), yyDollar[5].expr)
		}
	case 99:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:384
		{
			yyVAL.expr = yyDollar[1].expr.CplAppend(yyDollar[4].expr, yyDollar[7].expr)
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:387
		{
			yyVAL.expr = Cpl(AArray, emptyNode).pos0(yyDollar[1].token)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:388
		{
			yyVAL.expr = Cpl(AHash, yyDollar[2].expr).pos0(yyDollar[1].token)
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:389
		{
			yyVAL.expr = Cpl(AHash, yyDollar[2].expr).pos0(yyDollar[1].token)
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:390
		{
			yyVAL.expr = Cpl(AHashArray, yyDollar[2].expr, yyDollar[4].expr).pos0(yyDollar[1].token)
		}
	case 104:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:391
		{
			yyVAL.expr = Cpl(AHashArray, yyDollar[2].expr, yyDollar[4].expr).pos0(yyDollar[1].token)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:392
		{
			yyVAL.expr = Cpl(AArray, yyDollar[2].expr).pos0(yyDollar[1].token)
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:393
		{
			yyVAL.expr = Cpl(AHashArray, yyDollar[4].expr, yyDollar[2].expr).pos0(yyDollar[1].token)
		}
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:394
		{
			yyVAL.expr = Cpl(AHashArray, yyDollar[4].expr, yyDollar[2].expr).pos0(yyDollar[1].token)
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:395
		{
			yyVAL.expr = Cpl(AArray, yyDollar[2].expr).pos0(yyDollar[1].token)
		}
	}
	goto yystack /* stack new state and value */
}

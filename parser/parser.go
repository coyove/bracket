// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

//line parser.go.y:29
type yySymType struct {
	yys   int
	token Token
	expr  Node
	atom  Symbol
}

const TDo = 57346
const TIn = 57347
const TLocal = 57348
const TElseIf = 57349
const TThen = 57350
const TEnd = 57351
const TBreak = 57352
const TElse = 57353
const TFor = 57354
const TWhile = 57355
const TFunc = 57356
const TIf = 57357
const TLen = 57358
const TReturn = 57359
const TReturnVoid = 57360
const TImport = 57361
const TYield = 57362
const TYieldVoid = 57363
const TRepeat = 57364
const TUntil = 57365
const TNot = 57366
const TLabel = 57367
const TGoto = 57368
const TOr = 57369
const TAnd = 57370
const TEqeq = 57371
const TNeq = 57372
const TLte = 57373
const TGte = 57374
const TIdent = 57375
const TNumber = 57376
const TString = 57377
const TAddEq = 57378
const TSubEq = 57379
const TMulEq = 57380
const TDivEq = 57381
const TModEq = 57382
const TSquare = 57383
const TDotDot = 57384
const ASSIGN = 57385
const FUNC = 57386
const UNARY = 57387

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"TDo",
	"TIn",
	"TLocal",
	"TElseIf",
	"TThen",
	"TEnd",
	"TBreak",
	"TElse",
	"TFor",
	"TWhile",
	"TFunc",
	"TIf",
	"TLen",
	"TReturn",
	"TReturnVoid",
	"TImport",
	"TYield",
	"TYieldVoid",
	"TRepeat",
	"TUntil",
	"TNot",
	"TLabel",
	"TGoto",
	"TOr",
	"TAnd",
	"TEqeq",
	"TNeq",
	"TLte",
	"TGte",
	"TIdent",
	"TNumber",
	"TString",
	"'{'",
	"'['",
	"'('",
	"'='",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"'#'",
	"'.'",
	"TAddEq",
	"TSubEq",
	"TMulEq",
	"TDivEq",
	"TModEq",
	"TSquare",
	"TDotDot",
	"'T'",
	"ASSIGN",
	"FUNC",
	"UNARY",
	"';'",
	"']'",
	"','",
	"':'",
	"')'",
	"'}'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:412

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 28,
	39, 52,
	63, 52,
	-2, 82,
	-1, 117,
	39, 53,
	63, 53,
	-2, 82,
}

const yyPrivate = 57344

const yyLast = 1202

var yyAct = [...]int{

	34, 39, 190, 19, 102, 105, 176, 71, 38, 56,
	177, 200, 59, 72, 201, 73, 74, 75, 76, 77,
	198, 157, 176, 199, 64, 125, 177, 68, 58, 72,
	115, 78, 175, 80, 19, 46, 222, 28, 66, 214,
	126, 61, 99, 100, 101, 44, 72, 27, 58, 188,
	80, 156, 161, 154, 110, 178, 155, 153, 202, 151,
	121, 157, 152, 196, 45, 118, 57, 19, 28, 92,
	93, 94, 127, 149, 124, 122, 114, 103, 27, 62,
	171, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 47, 146, 117,
	115, 28, 30, 63, 96, 49, 60, 170, 80, 158,
	1, 27, 163, 147, 33, 128, 150, 32, 115, 160,
	182, 165, 111, 167, 108, 61, 69, 58, 109, 67,
	52, 51, 50, 60, 206, 65, 37, 58, 172, 89,
	91, 92, 93, 94, 95, 73, 74, 75, 76, 77,
	19, 18, 4, 90, 3, 130, 17, 16, 183, 5,
	106, 186, 181, 20, 70, 22, 19, 185, 2, 0,
	19, 19, 113, 0, 0, 194, 195, 116, 197, 0,
	0, 0, 0, 0, 28, 0, 203, 0, 0, 0,
	205, 0, 0, 208, 27, 0, 0, 211, 0, 130,
	28, 0, 0, 215, 28, 28, 19, 0, 0, 19,
	27, 19, 19, 148, 27, 27, 0, 0, 0, 224,
	0, 0, 0, 226, 0, 19, 0, 19, 229, 162,
	164, 0, 19, 0, 168, 169, 166, 0, 0, 0,
	28, 0, 0, 28, 0, 28, 28, 0, 0, 0,
	27, 0, 0, 27, 0, 27, 27, 0, 0, 28,
	0, 28, 0, 0, 0, 0, 28, 0, 179, 27,
	0, 27, 0, 0, 0, 6, 27, 21, 192, 0,
	0, 10, 191, 25, 23, 31, 26, 0, 15, 14,
	11, 8, 9, 24, 0, 0, 13, 12, 0, 204,
	0, 0, 207, 0, 29, 209, 210, 0, 0, 30,
	55, 45, 97, 57, 0, 55, 45, 53, 57, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 223, 54,
	225, 0, 7, 81, 82, 87, 88, 86, 85, 230,
	89, 91, 92, 93, 94, 95, 83, 84, 89, 91,
	92, 93, 94, 95, 0, 0, 0, 0, 0, 6,
	0, 21, 90, 0, 231, 10, 0, 25, 23, 31,
	26, 129, 15, 14, 11, 8, 9, 24, 0, 0,
	13, 12, 0, 0, 0, 0, 0, 0, 29, 6,
	0, 21, 0, 30, 227, 10, 0, 25, 23, 31,
	26, 0, 15, 14, 11, 8, 9, 24, 0, 0,
	13, 12, 0, 0, 0, 0, 7, 0, 29, 6,
	0, 21, 0, 30, 221, 10, 0, 25, 23, 31,
	26, 0, 15, 14, 11, 8, 9, 24, 0, 0,
	13, 12, 0, 0, 0, 0, 7, 0, 29, 6,
	0, 21, 0, 30, 220, 10, 0, 25, 23, 31,
	26, 217, 15, 14, 11, 8, 9, 24, 0, 0,
	13, 12, 0, 0, 0, 0, 7, 0, 29, 0,
	0, 0, 0, 30, 81, 82, 87, 88, 86, 85,
	0, 0, 0, 0, 0, 0, 0, 83, 84, 89,
	91, 92, 93, 94, 95, 0, 7, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 6, 0, 21, 0,
	218, 216, 10, 0, 25, 23, 31, 26, 0, 15,
	14, 11, 8, 9, 24, 0, 0, 13, 12, 0,
	0, 0, 0, 0, 0, 29, 6, 0, 21, 0,
	30, 193, 10, 0, 25, 23, 31, 26, 0, 15,
	14, 11, 8, 9, 24, 0, 0, 13, 12, 0,
	0, 0, 0, 7, 0, 29, 6, 0, 21, 0,
	30, 187, 10, 0, 25, 23, 31, 26, 0, 15,
	14, 11, 8, 9, 24, 0, 0, 13, 12, 0,
	0, 0, 0, 7, 0, 29, 6, 0, 21, 0,
	30, 174, 10, 0, 25, 23, 31, 26, 0, 15,
	14, 11, 8, 9, 24, 0, 0, 13, 12, 0,
	0, 0, 0, 7, 0, 29, 6, 0, 21, 0,
	30, 0, 10, 0, 25, 23, 31, 26, 0, 15,
	14, 11, 8, 9, 24, 120, 0, 13, 12, 0,
	0, 0, 0, 7, 0, 29, 6, 0, 21, 0,
	30, 79, 10, 0, 25, 23, 31, 26, 0, 15,
	14, 11, 8, 9, 24, 0, 0, 13, 12, 0,
	0, 0, 0, 7, 0, 29, 6, 0, 21, 0,
	30, 0, 10, 0, 25, 23, 31, 26, 0, 15,
	14, 11, 8, 9, 24, 0, 0, 13, 12, 0,
	0, 0, 0, 7, 0, 29, 0, 0, 0, 0,
	30, 81, 82, 87, 88, 86, 85, 0, 0, 0,
	0, 0, 0, 0, 83, 84, 89, 91, 92, 93,
	94, 95, 0, 7, 0, 48, 0, 0, 0, 0,
	90, 48, 0, 31, 0, 0, 0, 189, 36, 31,
	0, 0, 0, 42, 36, 0, 0, 0, 0, 42,
	0, 0, 107, 35, 40, 45, 108, 30, 47, 35,
	40, 45, 41, 30, 0, 0, 0, 43, 41, 0,
	0, 0, 0, 43, 0, 0, 0, 0, 0, 81,
	82, 87, 88, 86, 85, 104, 0, 0, 0, 0,
	0, 213, 83, 84, 89, 91, 92, 93, 94, 95,
	0, 0, 81, 82, 87, 88, 86, 85, 90, 0,
	0, 0, 0, 0, 212, 83, 84, 89, 91, 92,
	93, 94, 95, 0, 0, 48, 0, 0, 0, 0,
	0, 90, 0, 31, 0, 0, 0, 184, 36, 0,
	0, 0, 0, 42, 0, 0, 0, 0, 0, 0,
	0, 0, 47, 35, 40, 45, 0, 30, 0, 0,
	0, 0, 41, 0, 0, 0, 0, 43, 0, 0,
	0, 0, 0, 81, 82, 87, 88, 86, 85, 0,
	0, 0, 0, 0, 0, 180, 83, 84, 89, 91,
	92, 93, 94, 95, 0, 0, 81, 82, 87, 88,
	86, 85, 90, 0, 0, 0, 0, 0, 173, 83,
	84, 89, 91, 92, 93, 94, 95, 0, 0, 48,
	0, 0, 0, 0, 0, 90, 0, 31, 0, 0,
	0, 159, 36, 0, 0, 0, 0, 42, 0, 0,
	0, 0, 0, 228, 0, 0, 47, 35, 40, 45,
	0, 30, 0, 0, 0, 0, 41, 0, 0, 0,
	0, 43, 0, 0, 0, 0, 81, 82, 87, 88,
	86, 85, 0, 0, 0, 0, 0, 219, 112, 83,
	84, 89, 91, 92, 93, 94, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 81, 82, 87, 88,
	86, 85, 0, 0, 0, 0, 0, 123, 0, 83,
	84, 89, 91, 92, 93, 94, 95, 0, 0, 0,
	0, 0, 0, 0, 119, 90, 81, 82, 87, 88,
	86, 85, 0, 0, 0, 0, 0, 0, 0, 83,
	84, 89, 91, 92, 93, 94, 95, 81, 82, 87,
	88, 86, 85, 0, 0, 90, 0, 0, 0, 0,
	83, 84, 89, 91, 92, 93, 94, 95, 81, 82,
	87, 88, 86, 85, 0, 0, 90, 0, 0, 0,
	0, 83, 84, 89, 91, 92, 93, 94, 95, 82,
	87, 88, 86, 85, 0, 0, 0, 90, 0, 0,
	0, 83, 84, 89, 91, 92, 93, 94, 95, 87,
	88, 86, 85, 0, 0, 0, 0, 90, 0, 0,
	83, 84, 89, 91, 92, 93, 94, 95, 0, 48,
	0, 0, 0, 0, 0, 0, 90, 31, 0, 0,
	0, 0, 36, 0, 0, 0, 0, 42, 0, 0,
	0, 0, 0, 0, 0, 0, 47, 35, 40, 45,
	0, 30, 0, 0, 0, 0, 41, 0, 0, 0,
	0, 43,
}
var yyPact = [...]int{

	-1000, 692, -1000, -1000, -1000, -1000, -1000, -1000, 1153, -1000,
	-1000, 70, 99, 98, -1000, 1153, -1000, -1000, -1000, 280,
	-1000, 92, 40, 1153, -1000, 96, 1153, 93, -1000, -35,
	1153, -1000, 662, -30, 1071, -1000, 69, -1000, -1000, 275,
	-1000, 1153, 1153, 1153, 39, 749, -1000, -51, 119, -1000,
	-1000, 103, -30, 1153, 89, -1000, -1000, 943, -1000, 37,
	-1000, -1000, 1153, 64, 1050, 632, 55, 36, 1029, 39,
	-24, 1153, 82, -1000, -1000, -1000, -1000, -1000, 306, -1000,
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
	1153, 1153, 1153, 1153, 1153, 1153, -1000, 1153, 80, -1000,
	-1000, -1000, -1000, 8, -1000, -4, -10, -18, 1153, -1000,
	899, 95, -1000, -13, 1153, 79, -30, -1000, 275, -1000,
	1153, 1153, 1153, -1000, -1000, 74, 47, 1071, 28, -1000,
	1071, 1091, 1110, 97, 97, 97, 97, 97, 97, 25,
	298, 25, -1000, -1000, -1000, 25, 876, -1000, 602, -1000,
	-33, -11, -1000, 1153, 849, -1000, 87, 1153, 805, 95,
	1153, -1000, -30, -1000, 572, 1071, 45, 704, 271, 542,
	39, 39, -1000, -1000, -1000, -1000, 24, 1153, -1000, -43,
	-1000, -52, 22, 1071, 19, 1153, 1071, -1000, -1000, 1153,
	125, -1000, 1153, -1000, -1000, -1000, 1153, 782, 755, -1000,
	-27, -1000, 1153, 1071, 512, 457, -1000, 692, 999, 445,
	415, 1071, -3, -1000, -1000, 1071, -1000, -1000, 1153, -1000,
	-1000, -1000, 1153, 385, 969, 271, 1071, -1000, -1000, -1000,
	355, -1000,
}
var yyPgo = [...]int{

	0, 110, 168, 35, 165, 12, 164, 114, 9, 5,
	0, 163, 7, 1, 159, 157, 156, 2, 154, 152,
	45, 151, 136, 4, 8,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 2, 2, 2, 19, 19,
	19, 12, 12, 12, 12, 12, 14, 14, 14, 14,
	14, 11, 11, 11, 15, 15, 15, 15, 15, 16,
	17, 17, 17, 20, 20, 21, 21, 21, 22, 23,
	23, 18, 18, 18, 18, 18, 18, 18, 18, 3,
	3, 3, 4, 4, 5, 5, 6, 6, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 13, 13, 13, 13, 13, 7, 7, 8,
	8, 8, 9, 9, 9, 9, 24, 24, 24, 24,
	24, 24, 24, 24, 24,
}
var yyR2 = [...]int{

	0, 0, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 4,
	3, 3, 6, 5, 5, 4, 7, 9, 11, 6,
	0, 2, 5, 1, 2, 5, 7, 7, 4, 2,
	3, 2, 1, 1, 2, 2, 3, 1, 2, 1,
	4, 3, 1, 3, 1, 3, 1, 3, 1, 2,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 1, 2, 4, 2, 3, 1, 3, 2,
	3, 1, 3, 5, 5, 7, 2, 3, 4, 5,
	6, 3, 5, 6, 4,
}
var yyChk = [...]int{

	-1000, -1, -2, -18, -19, -14, 4, 61, 20, 21,
	10, 19, 26, 25, 18, 17, -15, -16, -21, -13,
	-11, 6, -4, 13, 22, 12, 15, -20, -3, 33,
	38, 14, -1, -7, -10, 34, 19, -22, -24, -13,
	35, 43, 24, 48, -20, 36, -3, 33, 6, 35,
	33, 33, -7, 37, 49, 35, -8, 38, -24, -5,
	14, 33, 39, 63, -10, -1, -5, 33, -10, 33,
	-6, -12, 64, 50, 51, 52, 53, 54, -10, 9,
	63, 27, 28, 40, 41, 32, 31, 29, 30, 42,
	56, 43, 44, 45, 46, 47, 35, 37, 49, -10,
	-10, -10, -23, 38, 66, -9, -7, 33, 37, 25,
	-10, 33, 65, -7, 39, 63, -7, -3, -13, 4,
	23, 5, 39, 8, -23, 49, 64, -10, 33, 65,
	-10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
	-10, -10, -10, -10, -10, -10, -10, 33, -1, 65,
	-5, 63, 66, 61, 63, 66, 61, 39, -10, 62,
	-12, 65, -7, 33, -1, -10, -7, -10, -1, -1,
	33, 33, -8, 62, 9, 65, 33, 37, 66, -7,
	66, -9, 33, -10, 62, -12, -10, 9, 4, 63,
	-17, 11, 7, 9, -23, -23, 39, -10, 63, 66,
	63, 66, 39, -10, -1, -10, 9, -1, -10, -1,
	-1, -10, 62, 66, 66, -10, 9, 4, 63, 8,
	9, 9, 39, -1, -10, -1, -10, 9, 4, -17,
	-1, 9,
}
var yyDef = [...]int{

	1, -2, 2, 3, 4, 5, 1, 7, 0, 42,
	43, 0, 0, 0, 47, 0, 8, 9, 10, 16,
	17, 0, 0, 0, 1, 0, 0, 0, -2, 49,
	0, 33, 0, 41, 87, 58, 0, 60, 61, 62,
	63, 0, 0, 0, 0, 0, 82, 49, 0, 44,
	45, 0, 48, 0, 0, 83, 85, 0, 91, 18,
	34, 54, 0, 0, 0, 0, 0, 54, 0, 56,
	0, 0, 0, 11, 12, 13, 14, 15, 0, 6,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 0, 79,
	80, 81, 1, 0, 96, 0, 0, 49, 0, 46,
	0, 51, 89, 0, 0, 0, 20, -2, 0, 1,
	0, 0, 0, 1, 1, 0, 0, 21, 0, 86,
	88, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 76, 77, 78, 0, 51, 0, 39,
	0, 0, 97, 0, 0, 101, 0, 0, 0, 50,
	0, 90, 19, 55, 0, 25, 0, 0, 30, 0,
	57, 0, 84, 50, 38, 40, 0, 0, 98, 0,
	104, 0, 0, 92, 0, 0, 23, 24, 1, 0,
	0, 1, 0, 35, 1, 1, 0, 0, 0, 99,
	0, 102, 0, 22, 0, 0, 29, 31, 0, 0,
	0, 94, 0, 100, 103, 93, 26, 1, 0, 1,
	36, 37, 0, 0, 0, 30, 95, 27, 1, 32,
	0, 28,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 48, 3, 46, 3, 3,
	38, 65, 44, 42, 63, 43, 49, 45, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 64, 61,
	41, 39, 40, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 57, 3, 3, 3, 3, 3,
	3, 37, 3, 62, 47, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 36, 3, 66,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 50, 51, 52, 53, 54, 55,
	56, 58, 59, 60,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:61
		{
			yyVAL.expr = __chain()
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.expr
			}
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:67
		{
			yyVAL.expr = yyDollar[1].expr.CplAppend(yyDollar[2].expr)
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.expr
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:75
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:76
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:77
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:78
		{
			yyVAL.expr = __do(yyDollar[2].expr)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:79
		{
			yyVAL.expr = emptyNode
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:82
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:83
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:84
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:87
		{
			yyVAL.expr = Node{AAdd.SetPos(yyDollar[1].token.Pos)}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:88
		{
			yyVAL.expr = Node{ASub.SetPos(yyDollar[1].token.Pos)}
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:89
		{
			yyVAL.expr = Node{AMul.SetPos(yyDollar[1].token.Pos)}
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:90
		{
			yyVAL.expr = Node{ADiv.SetPos(yyDollar[1].token.Pos)}
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:91
		{
			yyVAL.expr = Node{AMod.SetPos(yyDollar[1].token.Pos)}
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:94
		{
			if yyDollar[1].expr.isCallStat() {
				// Single call statement, clear env.V to avoid side effects
				yyVAL.expr = __chain(yyDollar[1].expr, popvClearNode)
			} else {
				yyVAL.expr = yyDollar[1].expr
			}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:102
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:105
		{
			yyVAL.expr = __chain()
			for _, v := range yyDollar[2].expr.Cpl() {
				yyVAL.expr = yyVAL.expr.CplAppend(__set(v, Node{ANil}).SetPos(yyDollar[1].token.Pos))
			}
		}
	case 19:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:111
		{
			m, n := len(yyDollar[2].expr.Cpl()), len(yyDollar[4].expr.Cpl())
			for i, count := 0, m-n; i < count; i++ {
				if i == count-1 {
					yyDollar[4].expr = yyDollar[4].expr.CplAppend(popvEndNode)
				} else {
					yyDollar[4].expr = yyDollar[4].expr.CplAppend(popvNode)
				}
			}

			yyVAL.expr = __chain()
			for i, v := range yyDollar[2].expr.Cpl() {
				if v.Sym().Text == "..." {
					yyVAL.expr = yyVAL.expr.CplAppend(__set(v, popvAllNode).SetPos(yyDollar[1].token.Pos))
				} else {
					yyVAL.expr = yyVAL.expr.CplAppend(__set(v, yyDollar[4].expr.CplIndex(i)).SetPos(yyDollar[1].token.Pos))
				}
			}

			if m == 1 && n == 1 && yyDollar[4].expr.CplIndex(0).isCallStat() {
				// Single call statement with single assignment, clear env.V to avoid side effects
				yyVAL.expr = yyVAL.expr.CplAppend(popvClearNode)
			}
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:135
		{
			nodes := yyDollar[1].expr.Cpl()
			m, n := len(nodes), len(yyDollar[3].expr.Cpl())
			for i, count := 0, m-n; i < count; i++ {
				if i == count-1 {
					yyDollar[3].expr = yyDollar[3].expr.CplAppend(popvEndNode)
				} else {
					yyDollar[3].expr = yyDollar[3].expr.CplAppend(popvNode)
				}
			}

			if head := nodes[0]; len(nodes) == 1 {
				// a0 = b0
				// if a, s, ok := $3.CplIndex(0).isSimpleAddSub(); ok && a.Equals(head.Sym()) {
				//    $$ = __inc(head, Num(s)).SetPos($2.Pos)
				// } else {
				yyVAL.expr = head.moveLoadStore(__move, yyDollar[3].expr.CplIndex(0)).SetPos(yyDollar[2].token.Pos)
				// }
			} else {
				// a0, ..., an = b0, ..., bn
				yyVAL.expr = __chain()
				names, retaddr := []Node{}, Cpl(Node{ARetAddr})
				for i := range nodes {
					names = append(names, randomVarname())
					retaddr = retaddr.CplAppend(names[i])
					if nodes[i].Sym().Text == "..." {
						yyVAL.expr = yyVAL.expr.CplAppend(__set(names[i], popvAllNode).SetPos(yyDollar[2].token.Pos))
					} else {
						yyVAL.expr = yyVAL.expr.CplAppend(__set(names[i], yyDollar[3].expr.CplIndex(i)).SetPos(yyDollar[2].token.Pos))
					}
				}
				for i, v := range nodes {
					yyVAL.expr = yyVAL.expr.CplAppend(v.moveLoadStore(__move, names[i]).SetPos(yyDollar[2].token.Pos))
				}
				yyVAL.expr = yyVAL.expr.CplAppend(retaddr)
			}

			if m == 1 && n == 1 && yyDollar[3].expr.CplIndex(0).isCallStat() {
				// Single call statement with single assignment, clear env.V to avoid side effects
				yyVAL.expr = __chain(yyVAL.expr, popvClearNode)
			}
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:179
		{
			yyVAL.expr = __move(SymTok(yyDollar[1].token), Cpl(yyDollar[2].expr, SymTok(yyDollar[1].token), yyDollar[3].expr)).SetPos(yyDollar[2].expr.Pos())
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:182
		{
			yyVAL.expr = __store(yyDollar[1].expr, yyDollar[3].expr, Cpl(yyDollar[5].expr, __load(yyDollar[1].expr, yyDollar[3].expr), yyDollar[6].expr).SetPos(yyDollar[5].expr.Pos()))
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:185
		{
			i := Node{yyDollar[3].token.Str}
			yyVAL.expr = __store(yyDollar[1].expr, i, Cpl(yyDollar[4].expr, __load(yyDollar[1].expr, i), yyDollar[5].expr).SetPos(yyDollar[4].expr.Pos()))
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:191
		{
			yyVAL.expr = __loop(__if(yyDollar[2].expr, yyDollar[4].expr, breakNode).SetPos(yyDollar[1].token.Pos)).SetPos(yyDollar[1].token.Pos)
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:194
		{
			yyVAL.expr = __loop(
				__chain(
					yyDollar[2].expr,
					__if(yyDollar[4].expr, breakNode, emptyNode).SetPos(yyDollar[1].token.Pos),
				).SetPos(yyDollar[1].token.Pos),
			).SetPos(yyDollar[1].token.Pos)
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:202
		{
			yyVAL.expr = forLoop(yyDollar[1].token.Pos, yyDollar[2].expr.Cpl(), yyDollar[4].expr.Cpl(), yyDollar[6].expr)
		}
	case 27:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:205
		{
			forVar, forEnd := SymTok(yyDollar[2].token), randomVarname()
			yyVAL.expr = __do(
				__set(forVar, yyDollar[4].expr).SetPos(yyDollar[1].token.Pos),
				__set(forEnd, yyDollar[6].expr).SetPos(yyDollar[1].token.Pos),
				__loop(
					__if(
						__lessEq(forVar, forEnd),
						__chain(yyDollar[8].expr, __inc(forVar, oneNode).SetPos(yyDollar[1].token.Pos)),
						breakNode,
					).SetPos(yyDollar[1].token.Pos),
				).SetPos(yyDollar[1].token.Pos),
			)
		}
	case 28:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:219
		{
			forVar, forEnd := SymTok(yyDollar[2].token), randomVarname()
			if yyDollar[8].expr.Type() == NUM { // step is a static number, easy case
				var cond Node
				if yyDollar[8].expr.Num() < 0 {
					cond = __lessEq(forEnd, forVar)
				} else {
					cond = __lessEq(forVar, forEnd)
				}
				yyVAL.expr = __do(
					__set(forVar, yyDollar[4].expr).SetPos(yyDollar[1].token.Pos),
					__set(forEnd, yyDollar[6].expr).SetPos(yyDollar[1].token.Pos),
					__loop(
						__chain(
							__if(
								cond,
								__chain(yyDollar[10].expr, __inc(forVar, yyDollar[8].expr)),
								breakNode,
							).SetPos(yyDollar[1].token.Pos),
						),
					).SetPos(yyDollar[1].token.Pos),
				)
			} else {
				forStep := randomVarname()
				yyVAL.expr = __do(
					__set(forVar, yyDollar[4].expr).SetPos(yyDollar[1].token.Pos),
					__set(forEnd, yyDollar[6].expr).SetPos(yyDollar[1].token.Pos),
					__set(forStep, yyDollar[8].expr).SetPos(yyDollar[1].token.Pos),
					__loop(
						__chain(
							__if(
								__less(zeroNode, forStep).SetPos(yyDollar[1].token.Pos),
								// +step
								__if(__less(forEnd, forVar), breakNode, emptyNode).SetPos(yyDollar[1].token.Pos),
								// -step
								__if(__less(forVar, forEnd), breakNode, emptyNode).SetPos(yyDollar[1].token.Pos),
							).SetPos(yyDollar[1].token.Pos),
							yyDollar[10].expr,
							__inc(forVar, forStep),
						),
					).SetPos(yyDollar[1].token.Pos),
				)
			}

		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:266
		{
			yyVAL.expr = __if(yyDollar[2].expr, yyDollar[4].expr, yyDollar[5].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:271
		{
			yyVAL.expr = Cpl()
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:274
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:277
		{
			yyVAL.expr = __if(yyDollar[2].expr, yyDollar[4].expr, yyDollar[5].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:282
		{
			yyVAL.expr = Node{AMove}.SetPos(yyDollar[1].token.Pos)
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:283
		{
			yyVAL.expr = Node{ASet}.SetPos(yyDollar[1].token.Pos)
		}
	case 35:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:286
		{
			funcname := SymTok(yyDollar[2].token)
			x := __move
			if yyDollar[1].expr.Sym().Equals(ASet) {
				x = __set
			}
			yyVAL.expr = __chain(
				x(funcname, Node{ANil}).SetPos(yyDollar[1].expr.Pos()),
				__move(funcname, __func(yyDollar[3].expr, yyDollar[4].expr).SetPos(yyDollar[1].expr.Pos())).SetPos(yyDollar[1].expr.Pos()),
			)
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:297
		{
			yyVAL.expr = __store(yyDollar[2].expr, Node{yyDollar[4].token.Str}, __func(yyDollar[5].expr, yyDollar[6].expr).SetPos(yyDollar[1].expr.Pos())).SetPos(yyDollar[1].expr.Pos())
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:300
		{
			paramlist := yyDollar[5].expr.CplPrepend(Sym("self"))
			yyVAL.expr = __store(
				yyDollar[2].expr, Node{yyDollar[4].token.Str}, __func(paramlist, yyDollar[6].expr).SetPos(yyDollar[1].expr.Pos()),
			).SetPos(yyDollar[1].expr.Pos())
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:308
		{
			yyVAL.expr = __func(yyDollar[2].expr, yyDollar[3].expr).SetPos(yyDollar[1].expr.Pos()).SetPos(yyDollar[1].expr.Pos())
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:313
		{
			yyVAL.expr = Cpl()
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:314
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:317
		{
			yyVAL.expr = Cpl(Node{AYield}, yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:318
		{
			yyVAL.expr = Cpl(Node{AYield}, emptyNode).SetPos(yyDollar[1].token.Pos)
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:319
		{
			yyVAL.expr = Cpl(Node{ABreak}).SetPos(yyDollar[1].token.Pos)
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:320
		{
			yyVAL.expr = __move(Sym(moduleNameFromPath(yyDollar[2].token.Str)), yylex.(*Lexer).loadFile(joinSourcePath(yyDollar[1].token.Pos.Source, yyDollar[2].token.Str))).SetPos(yyDollar[1].token.Pos)
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:321
		{
			yyVAL.expr = Cpl(Node{AGoto}, SymTok(yyDollar[2].token)).SetPos(yyDollar[1].token.Pos)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:322
		{
			yyVAL.expr = Cpl(Node{ALabel}, SymTok(yyDollar[2].token))
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:323
		{
			yyVAL.expr = Cpl(Node{AReturn}, emptyNode).SetPos(yyDollar[1].token.Pos)
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:324
		{
			if len(yyDollar[2].expr.Cpl()) == 1 {
				x := yyDollar[2].expr.CplIndex(0)
				if len(x.Cpl()) == 3 && x.CplIndex(0).Sym().Equals(ACall) {
					tc := x.CplIndex(0).Sym()
					tc.Text = ATailCall.Text
					x.Value.([]Node)[0] = Node{tc}
				}
			}
			yyVAL.expr = Cpl(Node{AReturn}, yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:337
		{
			yyVAL.expr = SymTok(yyDollar[1].token)
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:338
		{
			yyVAL.expr = __load(yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos) /* (10)[0] is valid if number has metamethod */
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:339
		{
			yyVAL.expr = __load(yyDollar[1].expr, Node{yyDollar[3].token.Str}).SetPos(yyDollar[2].token.Pos)
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:342
		{
			yyVAL.expr = Cpl(yyDollar[1].expr)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:343
		{
			yyVAL.expr = yyDollar[1].expr.CplAppend(yyDollar[3].expr)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:346
		{
			yyVAL.expr = Cpl(SymTok(yyDollar[1].token))
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:347
		{
			yyVAL.expr = yyDollar[1].expr.CplAppend(SymTok(yyDollar[3].token))
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:350
		{
			yyVAL.expr = SymTok(yyDollar[1].token)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:351
		{
			yyVAL.expr = __load(yyDollar[1].expr, Node{yyDollar[3].token.Str}).SetPos(yyDollar[1].expr.Pos())
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:354
		{
			yyVAL.expr = Num(yyDollar[1].token.Str)
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:355
		{
			yyVAL.expr = yylex.(*Lexer).loadFile(joinSourcePath(yyDollar[1].token.Pos.Source, yyDollar[2].token.Str))
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:356
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:357
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:358
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:359
		{
			yyVAL.expr = Node{yyDollar[1].token.Str}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:360
		{
			yyVAL.expr = Cpl(Node{AOr}, yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:361
		{
			yyVAL.expr = Cpl(Node{AAnd}, yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:362
		{
			yyVAL.expr = Cpl(Node{ALess}, yyDollar[3].expr, yyDollar[1].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:363
		{
			yyVAL.expr = Cpl(Node{ALess}, yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:364
		{
			yyVAL.expr = Cpl(Node{ALessEq}, yyDollar[3].expr, yyDollar[1].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:365
		{
			yyVAL.expr = Cpl(Node{ALessEq}, yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:366
		{
			yyVAL.expr = Cpl(Node{AEq}, yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:367
		{
			yyVAL.expr = Cpl(Node{ANeq}, yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:368
		{
			yyVAL.expr = Cpl(Node{AAdd}, yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:369
		{
			yyVAL.expr = Cpl(Node{AConcat}, yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:370
		{
			yyVAL.expr = Cpl(Node{ASub}, yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:371
		{
			yyVAL.expr = Cpl(Node{AMul}, yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:372
		{
			yyVAL.expr = Cpl(Node{ADiv}, yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:373
		{
			yyVAL.expr = Cpl(Node{AMod}, yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:374
		{
			yyVAL.expr = Cpl(Node{APow}, yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:375
		{
			yyVAL.expr = Cpl(Node{ASub}, zeroNode, yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:376
		{
			yyVAL.expr = Cpl(Node{ANot}, yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:377
		{
			yyVAL.expr = Cpl(Node{ALen}, yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:380
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:381
		{
			yyVAL.expr = __call(yyDollar[1].expr, Cpl(Node{yyDollar[2].token.Str})).SetPos(yyDollar[1].expr.Pos())
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:382
		{
			yyVAL.expr = __call(__load(SymTok(yyDollar[1].token), Node{yyDollar[3].token.Str}).SetPos(yyDollar[1].token.Pos), yyDollar[4].expr.CplPrepend(SymTok(yyDollar[1].token))).SetPos(yyDollar[1].token.Pos)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:383
		{
			yyVAL.expr = __call(yyDollar[1].expr, yyDollar[2].expr).SetPos(yyDollar[1].expr.Pos())
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:384
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:387
		{
			yyVAL.expr = Cpl(yyDollar[1].expr)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:388
		{
			yyVAL.expr = yyDollar[1].expr.CplAppend(yyDollar[3].expr)
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:391
		{
			yyVAL.expr = Cpl()
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:392
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:393
		{
			yyVAL.expr = Cpl(yyDollar[1].expr)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:396
		{
			yyVAL.expr = Cpl(Node{yyDollar[1].token.Str}, yyDollar[3].expr)
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:397
		{
			yyVAL.expr = Cpl(yyDollar[2].expr, yyDollar[5].expr)
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:398
		{
			yyVAL.expr = yyDollar[1].expr.CplAppend(Node{yyDollar[3].token.Str}, yyDollar[5].expr)
		}
	case 95:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:399
		{
			yyVAL.expr = yyDollar[1].expr.CplAppend(yyDollar[4].expr, yyDollar[7].expr)
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:402
		{
			yyVAL.expr = Cpl(Node{AArray}, emptyNode).SetPos(yyDollar[1].token.Pos)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:403
		{
			yyVAL.expr = Cpl(Node{AHash}, yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:404
		{
			yyVAL.expr = Cpl(Node{AHash}, yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:405
		{
			yyVAL.expr = Cpl(Node{AHashArray}, yyDollar[2].expr, yyDollar[4].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 100:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:406
		{
			yyVAL.expr = Cpl(Node{AHashArray}, yyDollar[2].expr, yyDollar[4].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:407
		{
			yyVAL.expr = Cpl(Node{AArray}, yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:408
		{
			yyVAL.expr = Cpl(Node{AHashArray}, yyDollar[4].expr, yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 103:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:409
		{
			yyVAL.expr = Cpl(Node{AHashArray}, yyDollar[4].expr, yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:410
		{
			yyVAL.expr = Cpl(Node{AArray}, yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	}
	goto yystack /* stack new state and value */
}

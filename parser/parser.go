// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

//line parser.go.y:25
type yySymType struct {
	yys   int
	token Token
	expr  Node
}

const TDo = 57346
const TLocal = 57347
const TElseIf = 57348
const TThen = 57349
const TEnd = 57350
const TBreak = 57351
const TElse = 57352
const TFor = 57353
const TWhile = 57354
const TFunc = 57355
const TIf = 57356
const TReturn = 57357
const TReturnVoid = 57358
const TRepeat = 57359
const TUntil = 57360
const TNot = 57361
const TLabel = 57362
const TGoto = 57363
const TIn = 57364
const TLsh = 57365
const TRsh = 57366
const TURsh = 57367
const TNew = 57368
const TOr = 57369
const TAnd = 57370
const TEqeq = 57371
const TNeq = 57372
const TLte = 57373
const TGte = 57374
const TIdent = 57375
const TNumber = 57376
const TString = 57377
const TIDiv = 57378
const ASSIGN = 57379
const FUNC = 57380
const UNARY = 57381

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"TDo",
	"TLocal",
	"TElseIf",
	"TThen",
	"TEnd",
	"TBreak",
	"TElse",
	"TFor",
	"TWhile",
	"TFunc",
	"TIf",
	"TReturn",
	"TReturnVoid",
	"TRepeat",
	"TUntil",
	"TNot",
	"TLabel",
	"TGoto",
	"TIn",
	"TLsh",
	"TRsh",
	"TURsh",
	"TNew",
	"TOr",
	"TAnd",
	"TEqeq",
	"TNeq",
	"TLte",
	"TGte",
	"TIdent",
	"TNumber",
	"TString",
	"':'",
	"'{'",
	"'['",
	"'('",
	"'='",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"'#'",
	"'.'",
	"'&'",
	"'|'",
	"'~'",
	"TIDiv",
	"'T'",
	"ASSIGN",
	"FUNC",
	"UNARY",
	"';'",
	"'}'",
	"','",
	"')'",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:349

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 25,
	40, 48,
	60, 48,
	61, 48,
	-2, 83,
	-1, 108,
	40, 49,
	60, 49,
	61, 49,
	-2, 83,
}

const yyPrivate = 57344

const yyLast = 1241

var yyAct = [...]int{
	91, 31, 180, 16, 138, 89, 105, 207, 90, 201,
	47, 44, 105, 176, 30, 49, 38, 49, 171, 169,
	141, 53, 55, 36, 152, 58, 151, 105, 104, 16,
	92, 33, 34, 87, 35, 93, 32, 147, 95, 96,
	97, 39, 98, 50, 192, 164, 154, 109, 51, 105,
	37, 139, 102, 53, 162, 103, 107, 88, 16, 106,
	211, 185, 183, 172, 51, 153, 142, 114, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 75, 76,
	77, 78, 80, 110, 143, 140, 177, 46, 216, 79,
	77, 78, 80, 40, 111, 25, 165, 146, 148, 79,
	149, 166, 145, 49, 158, 159, 206, 48, 16, 191,
	175, 155, 27, 25, 43, 45, 156, 41, 46, 150,
	26, 25, 49, 100, 99, 94, 57, 54, 29, 42,
	163, 28, 66, 167, 18, 56, 195, 62, 163, 4,
	61, 6, 3, 163, 173, 108, 170, 15, 14, 16,
	25, 63, 16, 5, 52, 59, 2, 184, 1, 0,
	0, 0, 0, 187, 0, 186, 16, 0, 0, 0,
	194, 0, 0, 197, 198, 0, 200, 116, 193, 0,
	0, 16, 16, 0, 0, 0, 0, 0, 16, 0,
	0, 0, 0, 0, 0, 0, 16, 16, 0, 0,
	218, 0, 220, 0, 0, 0, 16, 16, 0, 16,
	25, 16, 226, 0, 0, 16, 0, 0, 0, 38,
	16, 0, 0, 0, 0, 157, 36, 0, 160, 0,
	0, 0, 0, 92, 33, 34, 0, 35, 93, 32,
	0, 84, 85, 86, 39, 67, 68, 73, 74, 72,
	71, 25, 0, 37, 25, 84, 85, 86, 0, 69,
	70, 75, 76, 77, 78, 80, 83, 174, 25, 81,
	82, 0, 79, 0, 0, 75, 76, 77, 78, 80,
	0, 199, 0, 25, 25, 0, 79, 0, 189, 190,
	25, 0, 0, 0, 196, 0, 0, 0, 25, 25,
	0, 0, 0, 0, 204, 205, 0, 0, 25, 25,
	0, 25, 0, 25, 0, 0, 0, 25, 0, 214,
	215, 217, 25, 219, 0, 0, 84, 85, 86, 223,
	67, 68, 73, 74, 72, 71, 0, 0, 228, 0,
	0, 0, 0, 0, 69, 70, 75, 76, 77, 78,
	80, 83, 0, 0, 81, 82, 0, 79, 0, 0,
	0, 0, 0, 84, 85, 86, 168, 67, 68, 73,
	74, 72, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 70, 75, 76, 77, 78, 80, 83, 208,
	0, 81, 82, 0, 79, 0, 0, 0, 0, 0,
	0, 0, 0, 144, 0, 0, 0, 0, 84, 85,
	86, 0, 67, 68, 73, 74, 72, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 70, 75, 76,
	77, 78, 80, 83, 0, 0, 81, 82, 0, 79,
	0, 0, 0, 84, 85, 86, 209, 67, 68, 73,
	74, 72, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 70, 75, 76, 77, 78, 80, 83, 0,
	0, 81, 82, 0, 79, 0, 0, 0, 0, 84,
	85, 86, 137, 67, 68, 73, 74, 72, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 70, 75,
	76, 77, 78, 80, 83, 0, 0, 81, 82, 0,
	79, 0, 225, 64, 17, 182, 0, 179, 9, 181,
	23, 21, 0, 24, 13, 12, 22, 0, 0, 11,
	10, 84, 85, 86, 0, 67, 68, 73, 74, 72,
	71, 0, 26, 0, 0, 0, 19, 0, 0, 69,
	70, 75, 76, 77, 78, 80, 83, 210, 0, 81,
	82, 0, 79, 0, 0, 0, 0, 0, 65, 0,
	0, 0, 0, 84, 85, 86, 0, 67, 68, 73,
	74, 72, 71, 0, 0, 0, 0, 0, 0, 115,
	0, 69, 70, 75, 76, 77, 78, 80, 83, 0,
	0, 81, 82, 0, 79, 84, 85, 86, 0, 67,
	68, 73, 74, 72, 71, 0, 0, 0, 112, 0,
	0, 0, 0, 69, 70, 75, 76, 77, 78, 80,
	83, 0, 0, 81, 82, 0, 79, 84, 85, 86,
	0, 67, 68, 73, 74, 72, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 70, 75, 76, 77,
	78, 80, 83, 0, 0, 81, 82, 0, 79, 64,
	17, 0, 0, 229, 9, 0, 23, 21, 0, 24,
	13, 12, 22, 64, 17, 11, 10, 227, 9, 0,
	23, 21, 0, 24, 13, 12, 22, 0, 26, 11,
	10, 0, 19, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 26, 0, 0, 0, 19, 0, 0, 0,
	0, 84, 85, 86, 65, 67, 68, 73, 74, 72,
	71, 0, 0, 0, 0, 0, 0, 0, 65, 69,
	70, 75, 76, 77, 78, 80, 83, 0, 0, 81,
	82, 0, 79, 64, 17, 0, 0, 224, 9, 0,
	23, 21, 0, 24, 13, 12, 22, 64, 17, 11,
	10, 222, 9, 0, 23, 21, 0, 24, 13, 12,
	22, 0, 26, 11, 10, 0, 19, 0, 0, 0,
	0, 0, 0, 0, 64, 17, 26, 0, 221, 9,
	19, 23, 21, 0, 24, 13, 12, 22, 65, 0,
	11, 10, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 65, 26, 64, 17, 0, 19, 213, 9,
	0, 23, 21, 0, 24, 13, 12, 22, 0, 0,
	11, 10, 0, 0, 0, 0, 0, 0, 0, 65,
	0, 64, 17, 26, 0, 212, 9, 19, 23, 21,
	0, 24, 13, 12, 22, 64, 17, 11, 10, 203,
	9, 0, 23, 21, 0, 24, 13, 12, 22, 65,
	26, 11, 10, 0, 19, 0, 0, 0, 0, 0,
	0, 0, 64, 17, 26, 0, 202, 9, 19, 23,
	21, 0, 24, 13, 12, 22, 65, 0, 11, 10,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	65, 26, 64, 17, 0, 19, 188, 9, 0, 23,
	21, 0, 24, 13, 12, 22, 0, 0, 11, 10,
	0, 0, 0, 0, 0, 0, 0, 65, 0, 64,
	17, 26, 0, 178, 9, 19, 23, 21, 0, 24,
	13, 12, 22, 64, 17, 11, 10, 161, 9, 0,
	23, 21, 0, 24, 13, 12, 22, 65, 26, 11,
	10, 0, 19, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 26, 0, 0, 0, 19, 0, 64, 17,
	0, 0, 0, 9, 65, 23, 21, 0, 24, 13,
	12, 22, 113, 0, 11, 10, 0, 0, 65, 0,
	0, 0, 0, 0, 0, 64, 17, 26, 0, 60,
	9, 19, 23, 21, 0, 24, 13, 12, 22, 7,
	17, 11, 10, 0, 9, 0, 23, 21, 20, 24,
	13, 12, 22, 65, 26, 11, 10, 0, 19, 0,
	0, 0, 0, 0, 0, 0, 64, 17, 26, 0,
	0, 9, 19, 23, 21, 0, 24, 13, 12, 22,
	65, 0, 11, 10, 84, 85, 86, 0, 0, 68,
	73, 74, 72, 71, 8, 26, 0, 0, 0, 19,
	0, 0, 69, 70, 75, 76, 77, 78, 80, 83,
	38, 0, 81, 82, 0, 79, 0, 36, 0, 0,
	0, 65, 0, 0, 92, 33, 34, 0, 35, 93,
	32, 0, 0, 0, 0, 39, 0, 0, 0, 84,
	85, 86, 0, 0, 37, 73, 74, 72, 71, 0,
	0, 0, 0, 101, 0, 0, 0, 69, 70, 75,
	76, 77, 78, 80, 83, 0, 0, 81, 82, 0,
	79, 84, 85, 86, 0, 0, 0, 73, 74, 72,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	70, 75, 76, 77, 78, 80, 38, 0, 0, 0,
	0, 0, 79, 36, 0, 0, 0, 0, 0, 0,
	26, 33, 34, 0, 35, 0, 32, 0, 0, 0,
	0, 39, 0, 0, 0, 0, 0, 0, 0, 0,
	37,
}

var yyPact = [...]int{
	-1000, 1045, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	108, 105, -1000, 1187, -1000, -1000, 89, 80, 3, 97,
	104, 1187, -1000, 103, 1187, -1000, -1000, 1031, -1000, 122,
	708, 89, 1187, -1000, -1000, -3, 102, 1187, 1187, 1187,
	-1000, 1187, 101, -1000, -1000, 100, 1101, -12, 99, -1000,
	1187, 97, -13, 89, 54, 624, 1004, 27, 592, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1187, 1187, 1187,
	1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
	1187, 1187, 1187, 1187, 1187, 1187, 1187, 430, -1000, -10,
	-41, 708, 26, 1187, -1000, -1000, -1000, -1000, 350, -1000,
	58, -1000, -24, -41, 1187, 96, -34, -37, -1000, 25,
	-16, 93, -1000, 1187, 1187, -1000, 969, 1071, 1126, 242,
	242, 242, 242, 242, 242, 55, 55, -1000, -1000, -1000,
	-1000, 1158, 1158, 1158, 45, 45, 45, -1000, -6, 1187,
	-15, 73, 1187, 313, -1000, -1000, -43, 210, -44, -37,
	-1000, 23, 1187, 1187, 85, -49, 57, 955, 708, 466,
	519, -1000, -1000, 708, -1000, 22, 1187, 708, 21, -1000,
	-41, -1000, 1187, 708, 928, -1000, 84, -18, -1000, 1187,
	138, -1000, 1187, 1187, 228, 1187, -53, 708, -1000, 898,
	871, -1000, 81, -55, 395, -1000, 1072, 560, 708, 20,
	708, -1000, -1000, -1000, 857, 830, -1000, 63, -1000, 1187,
	-1000, 1187, -1000, -1000, 800, 773, -1000, 759, 518, 519,
	708, -1000, -1000, 689, -1000, -1000, -1000, -1000, 675, -1000,
}

var yyPgo = [...]int{
	0, 168, 122, 166, 165, 103, 144, 10, 0, 5,
	8, 1, 11, 161, 158, 157, 2, 150, 147, 151,
	4,
}

var yyR1 = [...]int{
	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 18, 18, 13, 13,
	13, 13, 13, 13, 14, 14, 14, 14, 15, 16,
	16, 16, 19, 19, 19, 19, 19, 19, 19, 19,
	17, 17, 17, 17, 17, 5, 5, 5, 6, 6,
	7, 7, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 11, 11, 11, 11, 12, 12, 12,
	12, 9, 9, 10, 10, 10, 10, 20, 20,
}

var yyR2 = [...]int{
	0, 0, 2, 0, 2, 1, 1, 1, 1, 3,
	1, 1, 1, 1, 3, 1, 1, 1, 1, 2,
	4, 6, 3, 5, 5, 4, 9, 11, 6, 0,
	2, 5, 6, 7, 7, 8, 8, 9, 9, 10,
	1, 2, 3, 1, 2, 1, 4, 3, 1, 3,
	1, 3, 1, 3, 1, 1, 2, 4, 4, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 1, 2, 2, 4, 2, 4, 4,
	6, 1, 3, 3, 5, 5, 7, 0, 1,
}

var yyChk = [...]int{
	-1000, -1, -3, -17, -18, -13, -19, 4, 59, 9,
	21, 20, 16, 15, -14, -15, -11, 5, -6, 37,
	13, 12, 17, 11, 14, -5, 33, -2, 33, 33,
	-8, -11, 39, 34, 35, 37, 26, 53, 19, 44,
	-5, 38, 50, 35, -12, 36, 39, -7, 37, 33,
	40, 61, -6, -11, 33, -8, -2, 33, -8, -4,
	8, -17, -18, -13, 4, 59, 20, 27, 28, 41,
	42, 32, 31, 29, 30, 43, 44, 45, 46, 54,
	47, 51, 52, 48, 23, 24, 25, -8, 60, -9,
	-10, -8, 33, 38, 33, -8, -8, -8, -8, 33,
	33, 62, -9, -10, 40, 61, -7, -9, -5, 60,
	39, 50, 4, 18, 40, 7, -2, -8, -8, -8,
	-8, -8, -8, -8, -8, -8, -8, -8, -8, -8,
	-8, -8, -8, -8, -8, -8, -8, 62, -20, 61,
	-20, 61, 40, -8, 63, -12, -20, 61, -20, -9,
	33, 60, 61, 40, 62, -7, 33, -2, -8, -8,
	-2, 8, 60, -8, 60, 33, 38, -8, 63, 62,
	-10, 62, 40, -8, -2, 35, 62, 39, 8, 61,
	-16, 10, 6, 40, -8, 40, -20, -8, 8, -2,
	-2, 35, 62, -7, -8, 8, -2, -8, -8, 63,
	-8, 62, 8, 8, -2, -2, 35, 62, 4, 61,
	7, 40, 8, 8, -2, -2, 35, -2, -8, -2,
	-8, 8, 8, -2, 8, 4, -16, 8, -2, 8,
}

var yyDef = [...]int{
	1, -2, 2, 5, 6, 7, 8, 3, 10, 40,
	0, 0, 43, 0, 16, 17, 18, 0, 0, 0,
	0, 0, 3, 0, 0, -2, 45, 0, 41, 0,
	44, 52, 0, 54, 55, 0, 0, 0, 0, 0,
	83, 0, 0, 84, 85, 0, 0, 19, 0, 50,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4,
	9, 11, 12, 13, 3, 15, 42, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 97,
	97, 91, 45, 0, 79, 80, 81, 82, 0, 47,
	0, 87, 97, 97, 0, 0, 0, 22, -2, 0,
	0, 0, 3, 0, 0, 3, 0, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 53, 0, 98,
	0, 98, 0, 0, 46, 86, 0, 98, 0, 20,
	51, 0, 0, 0, 3, 0, 0, 0, 25, 0,
	29, 14, 57, 92, 58, 0, 0, 93, 0, 88,
	97, 89, 0, 23, 0, 3, 3, 0, 24, 0,
	0, 3, 0, 0, 0, 0, 0, 21, 32, 0,
	0, 3, 3, 0, 0, 28, 30, 0, 95, 0,
	94, 90, 34, 33, 0, 0, 3, 3, 3, 0,
	3, 0, 35, 36, 0, 0, 3, 0, 0, 29,
	96, 38, 37, 0, 26, 3, 31, 39, 0, 27,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 49, 3, 47, 51, 3,
	39, 62, 45, 43, 61, 44, 50, 46, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 36, 59,
	42, 40, 41, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 55, 3, 3, 3, 3, 3,
	3, 38, 3, 63, 48, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 37, 52, 60, 53,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 54, 56, 57, 58,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:55
		{
			yyVAL.expr = __chain()
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.expr
			}
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:61
		{
			yyVAL.expr = yyDollar[1].expr.append(yyDollar[2].expr)
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.expr
			}
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:69
		{
			yyVAL.expr = __chain()
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:72
		{
			yyVAL.expr = yyDollar[1].expr.append(yyDollar[2].expr)
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:77
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:78
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:79
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:80
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:81
		{
			yyVAL.expr = __do(yyDollar[2].expr)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:82
		{
			yyVAL.expr = emptyNode
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:85
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:86
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:87
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:88
		{
			yyVAL.expr = __do(yyDollar[2].expr)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:89
		{
			yyVAL.expr = emptyNode
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:92
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:93
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:96
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:99
		{
			yyVAL.expr = __chain()
			for _, v := range yyDollar[2].expr.Nodes {
				yyVAL.expr = yyVAL.expr.append(__set(v, NewSymbol(ANil)).SetPos(yyDollar[1].token.Pos))
			}
		}
	case 20:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:105
		{
			yyVAL.expr = __local(yyDollar[2].expr.Nodes, yyDollar[4].expr.Nodes, yyDollar[1].token.Pos)
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:108
		{
			tmp := randomVarname()
			yyVAL.expr = __chain(__local([]Node{tmp}, []Node{yyDollar[6].expr}, yyDollar[1].token.Pos))
			for i, ident := range yyDollar[3].expr.Nodes {
				yyVAL.expr = yyVAL.expr.append(__local([]Node{ident}, []Node{__load(tmp, NewNumberFromInt(int64(i))).SetPos(yyDollar[1].token.Pos)}, yyDollar[1].token.Pos))
			}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:115
		{
			yyVAL.expr = __moveMulti(yyDollar[1].expr.Nodes, yyDollar[3].expr.Nodes, yyDollar[2].token.Pos)
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:118
		{
			tmp := randomVarname()
			yyVAL.expr = __chain(__local([]Node{tmp}, []Node{yyDollar[5].expr}, yyDollar[1].token.Pos))
			for i, decl := range yyDollar[2].expr.Nodes {
				x := decl.moveLoadStore(__move, __load(tmp, NewNumberFromInt(int64(i))).SetPos(yyDollar[1].token.Pos)).SetPos(yyDollar[1].token.Pos)
				yyVAL.expr = yyVAL.expr.append(__local([]Node{decl}, []Node{x}, yyDollar[1].token.Pos))
			}
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:128
		{
			yyVAL.expr = __loop(__if(yyDollar[2].expr, yyDollar[4].expr, breakNode).SetPos(yyDollar[1].token.Pos)).SetPos(yyDollar[1].token.Pos)
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:131
		{
			yyVAL.expr = __loop(
				__chain(
					yyDollar[2].expr,
					__if(yyDollar[4].expr, breakNode, emptyNode).SetPos(yyDollar[1].token.Pos),
				).SetPos(yyDollar[1].token.Pos),
			).SetPos(yyDollar[1].token.Pos)
		}
	case 26:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:139
		{
			forVar, forEnd := NewSymbolFromToken(yyDollar[2].token), randomVarname()
			yyVAL.expr = __do(
				__set(forVar, yyDollar[4].expr).SetPos(yyDollar[1].token.Pos),
				__set(forEnd, yyDollar[6].expr).SetPos(yyDollar[1].token.Pos),
				__loop(
					__if(
						__less(forVar, forEnd),
						__chain(yyDollar[8].expr, __inc(forVar, oneNode).SetPos(yyDollar[1].token.Pos)),
						breakNode,
					).SetPos(yyDollar[1].token.Pos),
				).SetPos(yyDollar[1].token.Pos),
			)
		}
	case 27:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:153
		{
			forVar, forEnd, forStep := NewSymbolFromToken(yyDollar[2].token), randomVarname(), randomVarname()
			body := __chain(yyDollar[10].expr, __inc(forVar, forStep))
			yyVAL.expr = __do(
				__set(forVar, yyDollar[4].expr).SetPos(yyDollar[1].token.Pos),
				__set(forEnd, yyDollar[6].expr).SetPos(yyDollar[1].token.Pos),
				__set(forStep, yyDollar[8].expr).SetPos(yyDollar[1].token.Pos))

			if yyDollar[8].expr.IsNumber() { // step is a static number, easy case
				if yyDollar[8].expr.IsNegativeNumber() {
					yyVAL.expr = yyVAL.expr.append(__loop(__if(__less(forEnd, forVar), body, breakNode).SetPos(yyDollar[1].token.Pos)).SetPos(yyDollar[1].token.Pos))
				} else {
					yyVAL.expr = yyVAL.expr.append(__loop(__if(__less(forVar, forEnd), body, breakNode).SetPos(yyDollar[1].token.Pos)).SetPos(yyDollar[1].token.Pos))
				}
			} else {
				yyVAL.expr = yyVAL.expr.append(__loop(
					__if(
						__less(zeroNode, forStep).SetPos(yyDollar[1].token.Pos),
						// +step
						__if(__lessEq(forEnd, forVar), breakNode, body).SetPos(yyDollar[1].token.Pos),
						// -step
						__if(__lessEq(forVar, forEnd), breakNode, body).SetPos(yyDollar[1].token.Pos),
					).SetPos(yyDollar[1].token.Pos),
				).SetPos(yyDollar[1].token.Pos))
			}
		}
	case 28:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:181
		{
			yyVAL.expr = __if(yyDollar[2].expr, yyDollar[4].expr, yyDollar[5].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 29:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:186
		{
			yyVAL.expr = NewComplex()
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:189
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:192
		{
			yyVAL.expr = __if(yyDollar[2].expr, yyDollar[4].expr, yyDollar[5].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:197
		{
			yyVAL.expr = __func(yyDollar[2].token, emptyNode, "", yyDollar[5].expr)
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:198
		{
			yyVAL.expr = __func(yyDollar[2].token, yyDollar[4].expr, "", yyDollar[6].expr)
		}
	case 34:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:199
		{
			yyVAL.expr = __func(yyDollar[2].token, emptyNode, yyDollar[5].token.Str, yyDollar[6].expr)
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:200
		{
			yyVAL.expr = __func(yyDollar[2].token, yyDollar[4].expr, yyDollar[6].token.Str, yyDollar[7].expr)
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:201
		{
			yyVAL.expr = __store(NewSymbolFromToken(yyDollar[2].token), NewString(yyDollar[4].token.Str), __func(yyDollar[4].token, emptyNode, "", yyDollar[7].expr))
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:204
		{
			yyVAL.expr = __store(NewSymbolFromToken(yyDollar[2].token), NewString(yyDollar[4].token.Str), __func(yyDollar[4].token, yyDollar[6].expr, "", yyDollar[8].expr))
		}
	case 38:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:207
		{
			yyVAL.expr = __store(NewSymbolFromToken(yyDollar[2].token), NewString(yyDollar[4].token.Str), __func(yyDollar[4].token, emptyNode, yyDollar[7].token.Str, yyDollar[8].expr))
		}
	case 39:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:210
		{
			yyVAL.expr = __store(NewSymbolFromToken(yyDollar[2].token), NewString(yyDollar[4].token.Str), __func(yyDollar[4].token, yyDollar[6].expr, yyDollar[8].token.Str, yyDollar[9].expr))
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:215
		{
			yyVAL.expr = NewComplex(NewSymbol(ABreak)).SetPos(yyDollar[1].token.Pos)
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:218
		{
			yyVAL.expr = NewComplex(NewSymbol(AGoto), NewSymbolFromToken(yyDollar[2].token)).SetPos(yyDollar[1].token.Pos)
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:221
		{
			yyVAL.expr = NewComplex(NewSymbol(ALabel), NewSymbolFromToken(yyDollar[2].token))
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:224
		{
			yyVAL.expr = NewComplex(NewSymbol(AReturn), NewSymbol(ANil)).SetPos(yyDollar[1].token.Pos)
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:227
		{
			if len(yyDollar[2].expr.Nodes) == 3 && yyDollar[2].expr.Nodes[0].SymbolValue() == ACall {
				// return call(...) -> return tailcall(...)
				yyDollar[2].expr.Nodes[0].strSym = ATailCall
			}
			yyVAL.expr = NewComplex(NewSymbol(AReturn), yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:236
		{
			yyVAL.expr = NewSymbolFromToken(yyDollar[1].token)
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:239
		{
			yyVAL.expr = __load(yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:242
		{
			yyVAL.expr = __load(yyDollar[1].expr, NewString(yyDollar[3].token.Str)).SetPos(yyDollar[2].token.Pos)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:247
		{
			yyVAL.expr = NewComplex(yyDollar[1].expr)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:250
		{
			yyVAL.expr = yyDollar[1].expr.append(yyDollar[3].expr)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:255
		{
			yyVAL.expr = NewComplex(NewSymbolFromToken(yyDollar[1].token))
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:258
		{
			yyVAL.expr = yyDollar[1].expr.append(NewSymbolFromToken(yyDollar[3].token))
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:263
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:264
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:265
		{
			yyVAL.expr = NewNumberFromString(yyDollar[1].token.Str)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:266
		{
			yyVAL.expr = NewString(yyDollar[1].token.Str)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:267
		{
			yyVAL.expr = NewComplex(NewSymbol(AMap), emptyNode).SetPos(yyDollar[1].token.Pos)
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:268
		{
			yyVAL.expr = NewComplex(NewSymbol(AMapArray), yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:269
		{
			yyVAL.expr = NewComplex(NewSymbol(AMap), yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:270
		{
			yyVAL.expr = NewComplex(NewSymbol(AOr), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:271
		{
			yyVAL.expr = NewComplex(NewSymbol(AAnd), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:272
		{
			yyVAL.expr = NewComplex(NewSymbol(ALess), yyDollar[3].expr, yyDollar[1].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:273
		{
			yyVAL.expr = NewComplex(NewSymbol(ALess), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:274
		{
			yyVAL.expr = NewComplex(NewSymbol(ALessEq), yyDollar[3].expr, yyDollar[1].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:275
		{
			yyVAL.expr = NewComplex(NewSymbol(ALessEq), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:276
		{
			yyVAL.expr = NewComplex(NewSymbol(AEq), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:277
		{
			yyVAL.expr = NewComplex(NewSymbol(ANeq), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:278
		{
			yyVAL.expr = NewComplex(NewSymbol(AAdd), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:279
		{
			yyVAL.expr = NewComplex(NewSymbol(ASub), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:280
		{
			yyVAL.expr = NewComplex(NewSymbol(AMul), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:281
		{
			yyVAL.expr = NewComplex(NewSymbol(ADiv), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:282
		{
			yyVAL.expr = NewComplex(NewSymbol(AIDiv), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:283
		{
			yyVAL.expr = NewComplex(NewSymbol(AMod), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:284
		{
			yyVAL.expr = NewComplex(NewSymbol(ABitAnd), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:285
		{
			yyVAL.expr = NewComplex(NewSymbol(ABitOr), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:286
		{
			yyVAL.expr = NewComplex(NewSymbol(ABitXor), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:287
		{
			yyVAL.expr = NewComplex(NewSymbol(ABitLsh), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:288
		{
			yyVAL.expr = NewComplex(NewSymbol(ABitRsh), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:289
		{
			yyVAL.expr = NewComplex(NewSymbol(ABitURsh), yyDollar[1].expr, yyDollar[3].expr).SetPos(yyDollar[2].token.Pos)
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:290
		{
			yyVAL.expr = NewComplex(NewSymbol(ABitOr), NewComplex(NewSymbol(AMap), emptyNode).SetPos(yyDollar[1].token.Pos), NewSymbolFromToken(yyDollar[2].token)).SetPos(yyDollar[1].token.Pos)
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:291
		{
			yyVAL.expr = NewComplex(NewSymbol(ABitNot), yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:292
		{
			yyVAL.expr = NewComplex(NewSymbol(ANot), yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:293
		{
			yyVAL.expr = NewComplex(NewSymbol(ASub), zeroNode, yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:296
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:299
		{
			yyVAL.expr = __call(yyDollar[1].expr, NewComplex(NewString(yyDollar[2].token.Str))).SetPos(yyDollar[1].expr.Pos())
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:302
		{
			yyDollar[2].expr.Nodes[1] = yyDollar[1].expr
			yyVAL.expr = yyDollar[2].expr
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:306
		{
			yyDollar[4].expr.Nodes[1] = NewSymbolFromToken(yyDollar[3].token)
			yyVAL.expr = __callPatch(yyDollar[4].expr, yyDollar[1].expr)
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:312
		{
			yyVAL.expr = __call(emptyNode, emptyNode).SetPos(yyDollar[1].token.Pos)
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:315
		{
			yyVAL.expr = __call(emptyNode, yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:318
		{
			yyVAL.expr = __callMap(emptyNode, emptyNode, yyDollar[2].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 90:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:321
		{
			yyVAL.expr = __callMap(emptyNode, yyDollar[2].expr, yyDollar[4].expr).SetPos(yyDollar[1].token.Pos)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:326
		{
			yyVAL.expr = NewComplex(yyDollar[1].expr)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:329
		{
			yyVAL.expr = yyDollar[1].expr.append(yyDollar[3].expr)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:334
		{
			yyVAL.expr = NewComplex(NewString(yyDollar[1].token.Str), yyDollar[3].expr)
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:337
		{
			yyVAL.expr = NewComplex(yyDollar[2].expr, yyDollar[5].expr)
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:340
		{
			yyVAL.expr = yyDollar[1].expr.append(NewString(yyDollar[3].token.Str)).append(yyDollar[5].expr)
		}
	case 96:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:343
		{
			yyVAL.expr = yyDollar[1].expr.append(yyDollar[4].expr).append(yyDollar[7].expr)
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:347
		{
			yyVAL.expr = emptyNode
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:347
		{
			yyVAL.expr = emptyNode
		}
	}
	goto yystack /* stack new state and value */
}

// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

//line parser.go.y:28
type yySymType struct {
	yys   int
	token Token
	expr  *Node
	atom  Atom
}

const TAssert = 57346
const TBreak = 57347
const TContinue = 57348
const TElse = 57349
const TFor = 57350
const TFunc = 57351
const TIf = 57352
const TLen = 57353
const TReturn = 57354
const TReturnVoid = 57355
const TUse = 57356
const TTypeof = 57357
const TYield = 57358
const TYieldVoid = 57359
const TStruct = 57360
const TAddAdd = 57361
const TSubSub = 57362
const TEqeq = 57363
const TNeq = 57364
const TLsh = 57365
const TRsh = 57366
const TURsh = 57367
const TLte = 57368
const TGte = 57369
const TIdent = 57370
const TNumber = 57371
const TString = 57372
const TAddEq = 57373
const TSubEq = 57374
const TMulEq = 57375
const TDivEq = 57376
const TModEq = 57377
const TBitAndEq = 57378
const TBitOrEq = 57379
const TXorEq = 57380
const TLshEq = 57381
const TRshEq = 57382
const TURshEq = 57383
const TSquare = 57384
const ASSIGN = 57385
const FUNC = 57386
const TOr = 57387
const TAnd = 57388
const UNARY = 57389
const TMinMin = 57390

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"TAssert",
	"TBreak",
	"TContinue",
	"TElse",
	"TFor",
	"TFunc",
	"TIf",
	"TLen",
	"TReturn",
	"TReturnVoid",
	"TUse",
	"TTypeof",
	"TYield",
	"TYieldVoid",
	"TStruct",
	"TAddAdd",
	"TSubSub",
	"TEqeq",
	"TNeq",
	"TLsh",
	"TRsh",
	"TURsh",
	"TLte",
	"TGte",
	"TIdent",
	"TNumber",
	"TString",
	"'{'",
	"'['",
	"'('",
	"TAddEq",
	"TSubEq",
	"TMulEq",
	"TDivEq",
	"TModEq",
	"TBitAndEq",
	"TBitOrEq",
	"TXorEq",
	"TLshEq",
	"TRshEq",
	"TURshEq",
	"TSquare",
	"'T'",
	"ASSIGN",
	"FUNC",
	"TOr",
	"TAnd",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'~'",
	"'#'",
	"TMinMin",
	"'}'",
	"';'",
	"'='",
	"']'",
	"'.'",
	"','",
	"')'",
	"':'",
	"'!'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:359

var FieldsField = HashString("__fields")

func patchStruct(named bool, c *Node) *Node {
	x := c.C()
	names, args := CompNode(), CompNode()
	for i := 0; i < len(x); i += 3 {
		args.Cappend(x[i+1], x[i+2])
		names.Cappend(x[i])
	}
	if !named {
		return CompNode(AMap, args)
	}

	args.Cappend(NewNumberNode(FieldsField), CompNode(AArray, names).pos0(args))
	return CompNode(AMap, args)
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1059

var yyAct = [...]int{

	111, 108, 61, 60, 103, 35, 200, 19, 164, 28,
	128, 52, 6, 46, 47, 106, 36, 102, 20, 156,
	182, 173, 172, 189, 54, 57, 163, 59, 188, 161,
	183, 162, 96, 97, 160, 155, 49, 51, 156, 98,
	99, 100, 125, 45, 3, 21, 105, 109, 22, 127,
	114, 17, 112, 119, 121, 126, 129, 16, 158, 19,
	19, 106, 134, 19, 6, 183, 105, 201, 95, 48,
	20, 20, 181, 50, 20, 166, 132, 135, 136, 137,
	138, 139, 140, 141, 142, 143, 144, 145, 146, 147,
	148, 149, 150, 151, 152, 153, 3, 21, 21, 118,
	104, 21, 184, 17, 124, 157, 5, 116, 101, 16,
	159, 58, 131, 154, 165, 178, 169, 34, 33, 171,
	170, 4, 18, 174, 175, 2, 0, 1, 0, 0,
	0, 177, 0, 0, 0, 12, 10, 11, 19, 23,
	25, 24, 0, 13, 14, 15, 0, 8, 9, 20,
	53, 0, 0, 0, 0, 0, 180, 0, 5, 27,
	0, 0, 22, 185, 26, 187, 0, 0, 0, 192,
	191, 190, 195, 0, 185, 0, 21, 0, 0, 0,
	0, 0, 19, 0, 19, 0, 0, 179, 0, 0,
	0, 0, 202, 20, 0, 20, 120, 7, 0, 206,
	0, 207, 19, 19, 0, 0, 0, 0, 0, 0,
	19, 211, 19, 20, 20, 0, 0, 19, 0, 0,
	21, 20, 21, 20, 0, 0, 0, 0, 20, 0,
	0, 197, 0, 199, 0, 0, 0, 0, 0, 0,
	21, 21, 0, 0, 0, 0, 0, 0, 21, 0,
	21, 204, 205, 0, 0, 21, 0, 0, 0, 208,
	0, 209, 0, 12, 10, 11, 212, 23, 0, 24,
	0, 13, 14, 15, 0, 8, 9, 0, 0, 0,
	82, 83, 90, 91, 92, 81, 80, 27, 0, 0,
	22, 0, 26, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 77,
	78, 79, 84, 85, 93, 89, 86, 87, 88, 94,
	0, 0, 12, 10, 11, 122, 23, 0, 24, 123,
	13, 14, 15, 0, 8, 9, 0, 0, 0, 82,
	83, 90, 91, 92, 81, 80, 27, 0, 0, 22,
	0, 26, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 83, 90, 91, 92, 81, 80, 76, 77, 78,
	79, 84, 85, 93, 89, 86, 87, 88, 94, 82,
	83, 90, 91, 92, 81, 80, 0, 0, 210, 77,
	78, 79, 84, 85, 93, 89, 86, 87, 88, 94,
	0, 0, 0, 0, 0, 0, 0, 76, 77, 78,
	79, 84, 85, 93, 89, 86, 87, 88, 94, 12,
	10, 11, 0, 23, 0, 24, 167, 13, 14, 15,
	168, 8, 9, 0, 0, 0, 82, 83, 90, 91,
	92, 81, 80, 27, 0, 0, 22, 0, 26, 82,
	83, 90, 91, 92, 81, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 77, 78, 79, 84, 85,
	93, 89, 86, 87, 88, 94, 0, 76, 77, 78,
	79, 84, 85, 93, 89, 86, 87, 88, 94, 82,
	83, 90, 91, 92, 81, 80, 0, 0, 0, 133,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	83, 90, 91, 92, 81, 80, 0, 76, 77, 78,
	79, 84, 85, 93, 89, 86, 87, 88, 94, 82,
	83, 90, 91, 92, 81, 80, 0, 0, 198, 78,
	79, 84, 85, 93, 89, 86, 87, 88, 94, 82,
	83, 90, 91, 92, 81, 80, 0, 76, 77, 78,
	79, 84, 85, 93, 89, 86, 87, 88, 94, 90,
	91, 92, 0, 0, 0, 0, 203, 76, 77, 78,
	79, 84, 85, 93, 89, 86, 87, 88, 94, 42,
	0, 32, 0, 0, 30, 31, 194, 0, 44, 84,
	85, 93, 89, 86, 87, 88, 94, 0, 27, 29,
	37, 43, 0, 26, 0, 0, 0, 42, 0, 32,
	0, 0, 30, 31, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 39, 0, 27, 29, 37, 43,
	41, 26, 38, 0, 0, 42, 0, 32, 193, 0,
	30, 31, 0, 40, 44, 0, 0, 90, 91, 92,
	0, 0, 39, 0, 27, 29, 37, 43, 41, 26,
	38, 0, 0, 186, 0, 0, 0, 0, 0, 0,
	42, 40, 32, 0, 0, 30, 31, 0, 0, 44,
	39, 86, 87, 88, 94, 0, 41, 0, 38, 27,
	29, 37, 43, 0, 26, 0, 0, 117, 42, 40,
	32, 0, 0, 30, 31, 0, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 39, 0, 110, 29, 37,
	43, 41, 26, 38, 0, 0, 42, 0, 32, 0,
	0, 30, 31, 115, 40, 44, 0, 0, 0, 0,
	0, 0, 0, 39, 0, 56, 29, 37, 43, 41,
	26, 38, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 40, 0, 0, 0, 0, 42, 0, 32,
	0, 39, 30, 31, 0, 0, 44, 41, 0, 38,
	63, 64, 0, 55, 0, 0, 27, 29, 37, 43,
	40, 26, 0, 0, 0, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 62, 0, 0, 0,
	0, 0, 39, 0, 0, 0, 0, 0, 41, 0,
	38, 82, 83, 90, 91, 92, 81, 80, 0, 0,
	0, 40, 0, 164, 0, 0, 0, 0, 0, 82,
	83, 90, 91, 92, 81, 80, 0, 0, 0, 76,
	77, 78, 79, 84, 85, 93, 89, 86, 87, 88,
	94, 0, 0, 0, 0, 0, 196, 76, 77, 78,
	79, 84, 85, 93, 89, 86, 87, 88, 94, 63,
	64, 0, 0, 0, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 62, 12, 10, 11, 0,
	23, 25, 24, 0, 13, 14, 15, 0, 8, 9,
	82, 83, 90, 91, 92, 81, 80, 130, 0, 113,
	27, 0, 0, 22, 0, 26, 0, 0, 0, 0,
	0, 82, 83, 90, 91, 92, 81, 80, 76, 77,
	78, 79, 84, 85, 93, 89, 86, 87, 88, 94,
	0, 0, 0, 0, 0, 0, 63, 64, 7, 76,
	77, 78, 79, 84, 85, 93, 89, 86, 87, 88,
	94, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 62, 63, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 12,
	10, 11, 0, 23, 0, 24, 0, 13, 14, 15,
	0, 8, 9, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 27, 0, 0, 22, 0, 26,
}
var yyPact = [...]int{

	-1000, 912, -1000, -1000, -1000, -1000, -1000, -1000, 768, -1000,
	-1000, -1000, 768, 768, -1000, 39, -1000, -1000, -1000, 4,
	-1000, -56, -1000, 727, 768, 83, 768, 957, 930, -1000,
	38, 768, 768, -1000, -1000, 4, -1000, -1000, 768, 768,
	768, 80, 33, 699, 21, -1000, 909, 930, -1000, 671,
	79, 636, 768, 131, 259, 768, 870, 415, 13, 428,
	-1000, 768, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 768, 768, 768, 768,
	768, 768, 768, 768, 768, 768, 768, 768, 768, 768,
	768, 768, 768, 768, 768, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 17, -32, 768, -13, -1000, -1000, -36, -39,
	771, 930, 47, -1000, 358, 768, 984, -1000, -49, 930,
	-1000, -1000, 768, 768, -1000, -1000, -1000, -1000, -1000, 828,
	768, 108, 1025, -1000, 930, 339, 488, 546, 546, 546,
	546, 546, 546, 634, 634, -1000, -1000, -1000, 634, -1000,
	-1000, -1000, 634, -1000, -1000, 768, 44, 930, -1000, -51,
	37, -1000, 608, -1000, 768, -42, -64, 984, 580, 528,
	-1000, 768, -1000, 768, 810, 930, 1025, 468, 1025, -1000,
	930, -1000, -1000, -66, -1000, 930, -1000, 930, 2, -1000,
	-1000, 768, 508, -1000, -1000, 930, 1025, 1025, 768, -1000,
	768, -1000, 930, -1000, 1025, -1000, 318, 930, -1000, -1000,
	768, 415, -1000,
}
var yyPgo = [...]int{

	0, 127, 10, 125, 43, 4, 47, 1, 0, 16,
	3, 2, 5, 104, 55, 49, 54, 42, 122, 121,
	118, 17, 117,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 3, 3, 3, 3, 3, 16,
	16, 16, 16, 16, 19, 19, 19, 10, 10, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	13, 13, 13, 9, 9, 9, 9, 9, 9, 14,
	14, 14, 14, 14, 14, 15, 15, 18, 20, 20,
	20, 21, 21, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 4, 4, 4, 4, 4, 4, 4, 5,
	5, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 8, 8, 12, 12, 12, 12, 6, 6, 7,
	7, 22, 22, 22, 22, 22, 22, 22,
}
var yyR2 = [...]int{

	0, 0, 2, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 5, 4, 6, 5, 3,
	6, 7, 7, 9, 4, 3, 5, 4, 3, 4,
	3, 2, 3, 2, 1, 1, 1, 2, 3, 2,
	1, 2, 1, 2, 4, 3, 6, 5, 5, 1,
	3, 1, 2, 2, 2, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 1, 3, 4, 3, 1, 3, 3,
	5, 2, 3, 4, 4, 5, 3, 4,
}
var yyChk = [...]int{

	-1000, -1, -3, -17, -19, -13, -2, 66, 16, 17,
	5, 6, 4, 12, 13, 14, -14, -15, -18, -12,
	-9, -4, 31, 8, 10, 9, 33, 28, -8, 29,
	14, 15, 11, -20, -22, -12, -9, 30, 62, 54,
	73, 60, 9, 31, 18, -4, -8, -8, 30, 32,
	69, 33, 67, -1, -8, 66, 28, -8, 28, -8,
	-10, -11, 45, 19, 20, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 43, 44, 49, 50, 51, 52,
	27, 26, 21, 22, 53, 54, 57, 58, 59, 56,
	23, 24, 25, 55, 60, 30, -8, -8, -8, -8,
	-8, 28, -21, -5, 67, 33, 28, 65, -7, -6,
	28, -8, 31, 30, -8, 72, 28, 71, -6, -8,
	65, -16, 66, 70, -13, -17, -14, -15, -2, -8,
	67, -16, -21, 71, -8, -8, -8, -8, -8, -8,
	-8, -8, -8, -8, -8, -8, -8, -8, -8, -8,
	-8, -8, -8, -8, -2, 67, 70, -8, 71, -5,
	70, 65, 70, 65, 72, -7, 28, 68, 72, -8,
	-10, -11, 71, 70, -8, -8, 66, -8, 7, -16,
	-8, 28, 71, 28, 65, -8, 65, -8, 70, 65,
	-10, -11, -8, 68, 68, -8, 66, -16, 70, -16,
	72, 65, -8, 68, -16, -16, -8, -8, -16, -16,
	70, -8, -16,
}
var yyDef = [...]int{

	1, -2, 2, 4, 5, 6, 7, 8, 0, 54,
	55, 56, 0, 0, 60, 0, 14, 15, 16, 30,
	31, 103, 1, 0, 0, 0, 0, 62, 53, 71,
	0, 0, 0, 75, 76, 77, 78, 79, 0, 0,
	0, 0, 0, 0, 0, 103, 57, 59, 61, 0,
	0, 0, 0, 0, 0, 0, 62, 0, 0, 0,
	33, 0, 63, 17, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 72, 73, 74, 99, 100,
	101, 102, 0, 0, 0, 0, 69, 111, 0, 0,
	62, 107, 0, 58, 0, 0, 65, 104, 0, 32,
	3, 39, 0, 0, 9, 10, 11, 12, 13, 0,
	0, 45, 0, 106, 34, 80, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 48, 0, 0, 50, 51, 0,
	0, 112, 0, 116, 0, 0, 0, 64, 0, 0,
	36, 0, 105, 0, 0, 44, 0, 0, 0, 47,
	49, 70, 52, 0, 113, 108, 117, 109, 0, 114,
	35, 0, 0, 67, 68, 38, 0, 0, 0, 46,
	0, 115, 37, 66, 0, 40, 0, 110, 41, 42,
	0, 0, 43,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 63, 3, 59, 60, 3,
	33, 71, 57, 53, 70, 54, 69, 58, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 72, 66,
	52, 67, 51, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 46, 3, 3, 3, 3, 3,
	3, 32, 3, 68, 56, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 31, 55, 65, 62,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 47, 48, 49, 50, 61, 64,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:62
		{
			yyVAL.expr = __chain()
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.expr
			}
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:68
		{
			yyVAL.expr = yyDollar[1].expr.Cappend(yyDollar[2].expr)
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.expr
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:76
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:79
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:80
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:81
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:82
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:83
		{
			yyVAL.expr = emptyNode
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:86
		{
			yyVAL.expr = __chain(yyDollar[1].expr)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:87
		{
			yyVAL.expr = __chain(yyDollar[1].expr)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:88
		{
			yyVAL.expr = __chain(yyDollar[1].expr)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:89
		{
			yyVAL.expr = __chain(yyDollar[1].expr)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:90
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:93
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:94
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:95
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:98
		{
			yyVAL.expr = oneNode
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:99
		{
			yyVAL.expr = moneNode
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:102
		{
			yyVAL.atom = AAdd
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:103
		{
			yyVAL.atom = ASub
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:104
		{
			yyVAL.atom = AMul
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:105
		{
			yyVAL.atom = ADiv
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:106
		{
			yyVAL.atom = AMod
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:107
		{
			yyVAL.atom = ABitAnd
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:108
		{
			yyVAL.atom = ABitOr
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:109
		{
			yyVAL.atom = ABitXor
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:110
		{
			yyVAL.atom = ABitLsh
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:111
		{
			yyVAL.atom = ABitRsh
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:112
		{
			yyVAL.atom = ABitURsh
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:115
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:118
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:121
		{
			yyVAL.expr = __move(yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
			if yyDollar[1].expr.Cn() > 0 && yyDollar[1].expr.Cx(0).A() == ALoad {
				yyVAL.expr = __store(yyDollar[1].expr.Cx(1), yyDollar[1].expr.Cx(2), yyDollar[3].expr).pos0(yyDollar[1].expr)
			}
			if c := yyDollar[1].expr.A(); c != "" && yyDollar[1].expr.Type() == Natom {
				// For 'a = a +/- n', we will simplify it as 'inc a +/- n'
				if a, b, s := yyDollar[3].expr.isSimpleAddSub(); a == c {
					yyDollar[3].expr.Cx(2).Value = yyDollar[3].expr.Cx(2).N() * s
					yyVAL.expr = __inc(yyDollar[1].expr, yyDollar[3].expr.Cx(2)).pos0(yyDollar[1].expr)
				} else if b == c {
					yyDollar[3].expr.Cx(1).Value = yyDollar[3].expr.Cx(1).N() * s
					yyVAL.expr = __inc(yyDollar[1].expr, yyDollar[3].expr.Cx(1)).pos0(yyDollar[1].expr)
				}
			}
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:139
		{
			yyVAL.expr = __inc(ANode(yyDollar[1].token), yyDollar[2].expr).pos0(yyDollar[1].token)
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:142
		{
			yyVAL.expr = __move(ANode(yyDollar[1].token), CompNode(yyDollar[2].atom, ANode(yyDollar[1].token).setPos(yyDollar[1].token), yyDollar[3].expr)).pos0(yyDollar[1].token)
		}
	case 35:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:145
		{
			yyVAL.expr = __store(yyDollar[1].expr, yyDollar[3].expr, CompNode(AAdd, __load(yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr), yyDollar[5].expr).pos0(yyDollar[1].expr))
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:148
		{
			yyVAL.expr = __store(yyDollar[1].expr, __hash(yyDollar[3].token.Str), CompNode(AAdd, __load(yyDollar[1].expr, __hash(yyDollar[3].token.Str)).pos0(yyDollar[1].expr), yyDollar[4].expr).pos0(yyDollar[1].expr))
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:151
		{
			yyVAL.expr = __store(yyDollar[1].expr, yyDollar[3].expr, CompNode(yyDollar[5].atom, __load(yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr), yyDollar[6].expr).pos0(yyDollar[1].expr))
		}
	case 38:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:154
		{
			yyVAL.expr = __store(yyDollar[1].expr, __hash(yyDollar[3].token.Str), CompNode(yyDollar[4].atom, __load(yyDollar[1].expr, __hash(yyDollar[3].token.Str)).pos0(yyDollar[1].expr), yyDollar[5].expr).pos0(yyDollar[1].expr))
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:159
		{
			yyVAL.expr = __for(yyDollar[2].expr).__continue(emptyNode).__body(yyDollar[3].expr).pos0(yyDollar[1].token)
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:162
		{
			yyVAL.expr = __for(yyDollar[3].expr).__continue(yyDollar[5].expr).__body(yyDollar[6].expr).pos0(yyDollar[1].token)
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:165
		{
			yyVAL.expr = __chain(
				yyDollar[2].expr,
				__for(yyDollar[4].expr).__continue(yyDollar[6].expr).__body(yyDollar[7].expr).pos0(yyDollar[1].token),
			)
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:171
		{
			forVar, forEnd := ANode(yyDollar[2].token), ANodeS(yyDollar[2].token.Str+"_end")
			yyVAL.expr = __chain(
				__move(forVar, yyDollar[4].expr).pos0(yyDollar[1].token),
				__move(forEnd, yyDollar[6].expr).pos0(yyDollar[1].token),
				__for(
					CompNode(ALess, forVar, forEnd).pos0(yyDollar[1].token),
				).
					__continue(
						__chain(__inc(forVar, oneNode).pos0(yyDollar[1].token)),
					).
					__body(yyDollar[7].expr).pos0(yyDollar[1].token),
			)
		}
	case 43:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:185
		{
			forVar, forEnd := ANode(yyDollar[2].token), ANodeS(yyDollar[2].token.Str+"_end")
			if yyDollar[8].expr.Type() == Nnumber { // easy case
				var cond *Node
				if yyDollar[8].expr.N() < 0 {
					cond = __lessEq(forEnd, forVar)
				} else {
					cond = __lessEq(forVar, forEnd)
				}
				yyVAL.expr = __chain(
					__move(forVar, yyDollar[4].expr).pos0(yyDollar[1].token),
					__move(forEnd, yyDollar[6].expr).pos0(yyDollar[1].token),
					__for(cond).
						__continue(__chain(__inc(forVar, yyDollar[8].expr).pos0(yyDollar[1].token))).
						__body(yyDollar[9].expr).pos0(yyDollar[1].token),
				)
			} else {
				forStep := ANodeS(yyDollar[2].token.Str + "_step")
				forBegin := ANodeS(yyDollar[2].token.Str + "_begin")
				yyVAL.expr = __chain(
					__move(forVar, yyDollar[4].expr).pos0(yyDollar[1].token),
					__move(forBegin, yyDollar[4].expr).pos0(yyDollar[1].token),
					__move(forEnd, yyDollar[6].expr).pos0(yyDollar[1].token),
					__move(forStep, yyDollar[8].expr).pos0(yyDollar[1].token),
					__if(
						__lessEq(
							zeroNode,
							__mul(
								__sub(forEnd, forVar).pos0(yyDollar[1].token),
								forStep,
							).pos0(yyDollar[1].token),
						).pos0(yyDollar[1].token),
					).
						__then(
							__chain(
								__for(
									__lessEq(
										__mul(
											__sub(forVar, forBegin).pos0(yyDollar[1].token),
											__sub(forVar, forEnd).pos0(yyDollar[1].token),
										),
										zeroNode,
									).pos0(yyDollar[1].token), // (forVar - forBegin) * (forVar - forEnd) <= 0
								).
									__continue(
										__chain(__inc(forVar, forStep).pos0(yyDollar[1].token)),
									).
									__body(yyDollar[9].expr).pos0(yyDollar[1].token),
							),
						).
						__else(
							emptyNode,
						).pos0(yyDollar[1].token),
				)
			}

		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:242
		{
			yyVAL.expr = CompNode(AForeach, yyDollar[2].expr, yyDollar[4].expr).pos0(yyDollar[1].token)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:247
		{
			yyVAL.expr = __if(yyDollar[2].expr).__then(yyDollar[3].expr).__else(emptyNode).pos0(yyDollar[1].token)
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:250
		{
			yyVAL.expr = __if(yyDollar[2].expr).__then(yyDollar[3].expr).__else(yyDollar[5].expr).pos0(yyDollar[1].token)
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:255
		{
			funcname := ANode(yyDollar[2].token)
			yyVAL.expr = __chain(
				__set(funcname, nilNode).pos0(yyDollar[2].token),
				__move(funcname, __func(funcname).__params(yyDollar[3].expr).__body(yyDollar[4].expr).pos0(yyDollar[2].token)).pos0(yyDollar[2].token),
			)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:264
		{
			yyVAL.expr = __func("<a>").__params(yyDollar[2].expr).__body(yyDollar[3].expr).pos0(yyDollar[1].token).SetPos(yyDollar[1].token)
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:267
		{
			yyVAL.expr = __func("<a>").__params(yyDollar[2].expr).__body(__chain(__return(yyDollar[4].expr).pos0(yyDollar[1].token))).pos0(yyDollar[1].token).SetPos(yyDollar[1].token)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:270
		{
			yyVAL.expr = __func("<a>").__params(emptyNode).__body(__chain(__return(yyDollar[3].expr).pos0(yyDollar[1].token))).pos0(yyDollar[1].token).SetPos(yyDollar[1].token)
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:275
		{
			yyVAL.expr = emptyNode
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:276
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:279
		{
			yyVAL.expr = CompNode(AYield, yyDollar[2].expr).pos0(yyDollar[1].token)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:280
		{
			yyVAL.expr = CompNode(AYield, nilNode).pos0(yyDollar[1].token)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:281
		{
			yyVAL.expr = CompNode(ABreak).pos0(yyDollar[1].token)
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:282
		{
			yyVAL.expr = CompNode(AContinue).pos0(yyDollar[1].token)
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:283
		{
			yyVAL.expr = CompNode(AAssert, yyDollar[2].expr, nilNode).pos0(yyDollar[1].token)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:284
		{
			yyVAL.expr = CompNode(AAssert, yyDollar[2].expr, NewNode(yyDollar[3].token.Str)).pos0(yyDollar[1].token)
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:285
		{
			yyVAL.expr = __return(yyDollar[2].expr).pos0(yyDollar[1].token)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:286
		{
			yyVAL.expr = __return(nilNode).pos0(yyDollar[1].token)
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:287
		{
			yyVAL.expr = yylex.(*Lexer).loadFile(joinSourcePath(yyDollar[1].token.Pos.Source, yyDollar[2].token.Str), yyDollar[1].token)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:290
		{
			yyVAL.expr = ANode(yyDollar[1].token).setPos(yyDollar[1].token)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:291
		{
			yyVAL.expr = __load(nilNode, yyDollar[1].token).pos0(yyDollar[1].token)
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:292
		{
			yyVAL.expr = __load(yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[3].expr).setPos(yyDollar[3].expr)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:293
		{
			yyVAL.expr = __load(yyDollar[1].expr, __hash(yyDollar[3].token.Str)).pos0(yyDollar[3].token).setPos(yyDollar[3].token)
		}
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:294
		{
			yyVAL.expr = CompNode(ASlice, yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr).pos0(yyDollar[3].expr).setPos(yyDollar[3].expr)
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:295
		{
			yyVAL.expr = CompNode(ASlice, yyDollar[1].expr, yyDollar[3].expr, moneNode).pos0(yyDollar[3].expr).setPos(yyDollar[3].expr)
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:296
		{
			yyVAL.expr = CompNode(ASlice, yyDollar[1].expr, zeroNode, yyDollar[4].expr).pos0(yyDollar[4].expr).setPos(yyDollar[4].expr)
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:299
		{
			yyVAL.expr = CompNode(yyDollar[1].token.Str)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:300
		{
			yyVAL.expr = yyDollar[1].expr.Cappend(ANode(yyDollar[3].token))
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:303
		{
			yyVAL.expr = NewNumberNode(yyDollar[1].token.Str).SetPos(yyDollar[1].token)
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:304
		{
			yyVAL.expr = yylex.(*Lexer).loadFile(joinSourcePath(yyDollar[1].token.Pos.Source, yyDollar[2].token.Str), yyDollar[1].token)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:305
		{
			yyVAL.expr = CompNode(ATypeOf, yyDollar[2].expr)
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:306
		{
			yyVAL.expr = CompNode(ALen, yyDollar[2].expr)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:307
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:308
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:309
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:310
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:311
		{
			yyVAL.expr = NewNode(yyDollar[1].token.Str).SetPos(yyDollar[1].token)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:312
		{
			yyVAL.expr = CompNode(AOr, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:313
		{
			yyVAL.expr = CompNode(AAnd, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:314
		{
			yyVAL.expr = CompNode(ALess, yyDollar[3].expr, yyDollar[1].expr).pos0(yyDollar[1].expr)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:315
		{
			yyVAL.expr = CompNode(ALess, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:316
		{
			yyVAL.expr = CompNode(ALessEq, yyDollar[3].expr, yyDollar[1].expr).pos0(yyDollar[1].expr)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:317
		{
			yyVAL.expr = CompNode(ALessEq, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:318
		{
			yyVAL.expr = CompNode(AEq, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:319
		{
			yyVAL.expr = CompNode(ANeq, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:320
		{
			yyVAL.expr = CompNode(AAdd, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:321
		{
			yyVAL.expr = CompNode(ASub, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:322
		{
			yyVAL.expr = CompNode(AMul, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:323
		{
			yyVAL.expr = CompNode(ADiv, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:324
		{
			yyVAL.expr = CompNode(AMod, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:325
		{
			yyVAL.expr = CompNode(ABitXor, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:326
		{
			yyVAL.expr = CompNode(ABitLsh, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:327
		{
			yyVAL.expr = CompNode(ABitRsh, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:328
		{
			yyVAL.expr = CompNode(ABitURsh, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:329
		{
			yyVAL.expr = CompNode(ABitOr, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:330
		{
			yyVAL.expr = CompNode(ABitAnd, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:331
		{
			yyVAL.expr = CompNode(ABitXor, yyDollar[2].expr, max32Node).pos0(yyDollar[2].expr)
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:332
		{
			yyVAL.expr = CompNode(ASub, zeroNode, yyDollar[2].expr).pos0(yyDollar[2].expr)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:333
		{
			yyVAL.expr = CompNode(ANot, yyDollar[2].expr).pos0(yyDollar[2].expr)
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:334
		{
			yyVAL.expr = CompNode(AAddrOf, ANode(yyDollar[2].token)).pos0(yyDollar[2].token)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:337
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:338
		{
			yyVAL.expr = __call(yyDollar[1].expr, emptyNode).pos0(yyDollar[1].expr)
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:339
		{
			yyVAL.expr = __call(yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:340
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:343
		{
			yyVAL.expr = CompNode(yyDollar[1].expr)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:344
		{
			yyVAL.expr = yyDollar[1].expr.Cappend(yyDollar[3].expr)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:347
		{
			yyVAL.expr = CompNode(NewNode(yyDollar[1].token.Str), __hash(yyDollar[1].token.Str), yyDollar[3].expr)
		}
	case 110:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:348
		{
			yyVAL.expr = yyDollar[1].expr.Cappend(NewNode(yyDollar[3].token.Str), __hash(yyDollar[3].token.Str), yyDollar[5].expr)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:351
		{
			yyVAL.expr = CompNode(AArray, emptyNode).pos0(yyDollar[1].token)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:352
		{
			yyVAL.expr = patchStruct(false, yyDollar[2].expr).pos0(yyDollar[2].expr)
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:353
		{
			yyVAL.expr = patchStruct(false, yyDollar[2].expr).pos0(yyDollar[2].expr)
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:354
		{
			yyVAL.expr = patchStruct(true, yyDollar[3].expr).pos0(yyDollar[2].token)
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:355
		{
			yyVAL.expr = patchStruct(true, yyDollar[3].expr).pos0(yyDollar[2].token)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:356
		{
			yyVAL.expr = CompNode(AArray, yyDollar[2].expr).pos0(yyDollar[2].expr)
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:357
		{
			yyVAL.expr = CompNode(AArray, yyDollar[2].expr).pos0(yyDollar[2].expr)
		}
	}
	goto yystack /* stack new state and value */
}

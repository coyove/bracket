// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import "strconv"

//line parser.go.y:31
type yySymType struct {
	yys   int
	token Token
	expr  *Node
	atom  Atom
}

const TAssert = 57346
const TBreak = 57347
const TContinue = 57348
const TElse = 57349
const TFor = 57350
const TFunc = 57351
const TIf = 57352
const TLen = 57353
const TReturn = 57354
const TReturnVoid = 57355
const TImport = 57356
const TTypeof = 57357
const TYield = 57358
const TYieldVoid = 57359
const TStruct = 57360
const TAddAdd = 57361
const TSubSub = 57362
const TEqeq = 57363
const TNeq = 57364
const TLsh = 57365
const TRsh = 57366
const TURsh = 57367
const TLte = 57368
const TGte = 57369
const TIdent = 57370
const TNumber = 57371
const TString = 57372
const TAddEq = 57373
const TSubEq = 57374
const TMulEq = 57375
const TDivEq = 57376
const TModEq = 57377
const TBitAndEq = 57378
const TBitOrEq = 57379
const TXorEq = 57380
const TLshEq = 57381
const TRshEq = 57382
const TURshEq = 57383
const TSquare = 57384
const TDotDotDot = 57385
const TSet = 57386
const ASSIGN = 57387
const FUNC = 57388
const TOr = 57389
const TAnd = 57390
const UNARY = 57391
const TMinMin = 57392

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"TAssert",
	"TBreak",
	"TContinue",
	"TElse",
	"TFor",
	"TFunc",
	"TIf",
	"TLen",
	"TReturn",
	"TReturnVoid",
	"TImport",
	"TTypeof",
	"TYield",
	"TYieldVoid",
	"TStruct",
	"TAddAdd",
	"TSubSub",
	"TEqeq",
	"TNeq",
	"TLsh",
	"TRsh",
	"TURsh",
	"TLte",
	"TGte",
	"TIdent",
	"TNumber",
	"TString",
	"'{'",
	"'['",
	"'('",
	"TAddEq",
	"TSubEq",
	"TMulEq",
	"TDivEq",
	"TModEq",
	"TBitAndEq",
	"TBitOrEq",
	"TXorEq",
	"TLshEq",
	"TRshEq",
	"TURshEq",
	"TSquare",
	"TDotDotDot",
	"TSet",
	"'T'",
	"ASSIGN",
	"FUNC",
	"TOr",
	"TAnd",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'~'",
	"'#'",
	"TMinMin",
	"'}'",
	"';'",
	"']'",
	"'.'",
	"'='",
	"','",
	"')'",
	"':'",
	"'!'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:425

var FieldsField = HashString("__fields")

func patchStruct(named bool, c *Node) *Node {
	x := c.C()
	names, args := CompNode(), CompNode()
	for i := 0; i < len(x); i += 3 {
		args.Cappend(x[i+1], x[i+2])
		names.Cappend(x[i])
	}
	if !named {
		return CompNode(AMap, args)
	}
	args.Cappend(NewNumberNode(FieldsField), CompNode(AArray, names).pos0(args))
	return CompNode(AMap, args)
}

func patchVarargCall(callee interface{}, args *Node) *Node {
	ddd := false
	for _, a := range args.C() {
		if a.Type() == Ncompound && a.Cx(0).A() == ADDD {
			ddd = true
			break
		}
	}
	if !ddd {
		return __call(callee, args).pos0(callee)
	}

	if args.Cn() == 1 {
		return __chain(
			CompNode(ADDD, args.Cx(0).Cx(1)).pos0(callee),
			__call(callee, emptyNode).pos0(callee),
		)
	}

	varname := "...vararg"
	res := __chain(__set(varname, CompNode(AArray, emptyNode).pos0(callee)).pos0(callee))
	for _, a := range args.C() {
		if a.Type() == Ncompound && a.Cx(0).A() == ADDD {
			res.Cappend(__move(varname, CompNode(ABitLsh, varname, a.Cx(1)).pos0(callee)).pos0(callee))
		} else {
			res.Cappend(__store(varname, CompNode(ALen, varname).pos0(callee), a).pos0(callee))
		}
	}
	res.Cappend(CompNode(ADDD, varname).pos0(callee))
	res.Cappend(__call(callee, emptyNode).pos0(callee))
	return res
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1196

var yyAct = [...]int{

	52, 110, 64, 213, 115, 63, 65, 175, 35, 28,
	18, 166, 194, 46, 133, 113, 6, 125, 184, 59,
	200, 174, 125, 54, 57, 199, 173, 62, 65, 172,
	165, 166, 101, 102, 171, 175, 113, 195, 105, 106,
	107, 112, 127, 60, 61, 20, 109, 212, 44, 120,
	25, 170, 65, 45, 135, 112, 134, 21, 26, 130,
	168, 3, 18, 18, 118, 141, 18, 132, 6, 16,
	139, 103, 50, 48, 50, 100, 214, 195, 47, 111,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	136, 51, 25, 25, 162, 137, 25, 138, 193, 104,
	25, 49, 167, 3, 169, 131, 196, 15, 177, 163,
	178, 16, 181, 176, 164, 183, 185, 122, 182, 186,
	10, 11, 108, 22, 24, 23, 188, 12, 13, 14,
	58, 8, 9, 1, 116, 189, 18, 34, 129, 33,
	5, 4, 124, 27, 17, 19, 21, 2, 26, 0,
	0, 0, 0, 0, 0, 53, 192, 0, 0, 15,
	0, 0, 0, 0, 185, 0, 198, 0, 0, 0,
	190, 203, 202, 0, 206, 201, 25, 0, 0, 0,
	0, 0, 126, 7, 0, 0, 18, 18, 18, 41,
	0, 32, 5, 215, 30, 31, 0, 0, 43, 0,
	0, 219, 0, 0, 220, 0, 18, 18, 45, 29,
	36, 42, 0, 26, 224, 0, 18, 0, 18, 0,
	208, 209, 211, 18, 0, 0, 25, 25, 25, 0,
	0, 0, 0, 0, 0, 0, 38, 0, 37, 0,
	217, 218, 40, 0, 0, 0, 25, 25, 0, 204,
	221, 0, 222, 0, 0, 39, 25, 225, 25, 10,
	11, 0, 22, 25, 23, 0, 12, 13, 14, 0,
	8, 9, 0, 0, 0, 86, 87, 94, 95, 96,
	85, 84, 27, 0, 0, 21, 0, 26, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 0, 0, 0, 80, 81, 82, 83, 88,
	89, 97, 93, 90, 91, 92, 98, 94, 95, 96,
	10, 11, 0, 22, 0, 23, 223, 12, 13, 14,
	0, 8, 9, 0, 0, 0, 86, 87, 94, 95,
	96, 85, 84, 27, 0, 0, 21, 0, 26, 88,
	89, 97, 93, 90, 91, 92, 98, 0, 0, 0,
	0, 99, 0, 0, 0, 0, 80, 81, 82, 83,
	88, 89, 97, 93, 90, 91, 92, 98, 0, 0,
	0, 10, 11, 0, 22, 0, 23, 210, 12, 13,
	14, 0, 8, 9, 0, 0, 0, 86, 87, 94,
	95, 96, 85, 84, 27, 0, 0, 21, 0, 26,
	0, 0, 0, 0, 0, 86, 87, 94, 95, 96,
	85, 84, 99, 94, 95, 96, 0, 80, 81, 82,
	83, 88, 89, 97, 93, 90, 91, 92, 98, 0,
	99, 0, 0, 0, 128, 80, 81, 82, 83, 88,
	89, 97, 93, 90, 91, 92, 98, 0, 0, 90,
	91, 92, 98, 191, 66, 67, 0, 0, 180, 86,
	87, 94, 95, 96, 85, 84, 0, 0, 0, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	65, 0, 0, 0, 99, 0, 0, 0, 0, 80,
	81, 82, 83, 88, 89, 97, 93, 90, 91, 92,
	98, 0, 0, 0, 0, 0, 0, 179, 10, 11,
	0, 22, 180, 23, 0, 12, 13, 14, 0, 8,
	9, 0, 0, 0, 86, 87, 94, 95, 96, 85,
	84, 27, 0, 0, 21, 0, 26, 0, 0, 0,
	0, 86, 87, 94, 95, 96, 85, 84, 0, 99,
	0, 0, 0, 0, 80, 81, 82, 83, 88, 89,
	97, 93, 90, 91, 92, 98, 99, 0, 0, 0,
	0, 80, 81, 82, 83, 88, 89, 97, 93, 90,
	91, 92, 98, 86, 87, 94, 95, 96, 85, 84,
	0, 0, 0, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	0, 0, 0, 80, 81, 82, 83, 88, 89, 97,
	93, 90, 91, 92, 98, 86, 87, 94, 95, 96,
	85, 84, 0, 0, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 0, 0, 0, 80, 81, 82, 83, 88,
	89, 97, 93, 90, 91, 92, 98, 86, 87, 94,
	95, 96, 85, 84, 0, 0, 79, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 0, 0, 0, 80, 81, 82,
	83, 88, 89, 97, 93, 90, 91, 92, 98, 66,
	67, 0, 0, 0, 0, 216, 86, 87, 94, 95,
	96, 85, 84, 0, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 0, 0, 0, 0, 0,
	0, 99, 0, 0, 0, 0, 80, 81, 82, 83,
	88, 89, 97, 93, 90, 91, 92, 98, 0, 0,
	41, 0, 32, 0, 205, 30, 31, 0, 41, 43,
	32, 0, 0, 30, 31, 0, 0, 43, 0, 45,
	29, 36, 42, 0, 26, 0, 0, 45, 29, 36,
	42, 0, 26, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 38, 0, 37,
	0, 0, 0, 40, 0, 38, 0, 37, 197, 0,
	0, 40, 41, 0, 32, 0, 39, 30, 31, 0,
	0, 43, 0, 121, 39, 0, 0, 0, 0, 0,
	0, 45, 29, 36, 42, 0, 26, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 41, 0, 32,
	0, 0, 30, 31, 0, 0, 43, 0, 0, 38,
	0, 37, 0, 0, 0, 40, 117, 29, 36, 42,
	0, 26, 0, 0, 0, 0, 123, 0, 39, 0,
	0, 0, 41, 0, 32, 0, 0, 30, 31, 0,
	0, 43, 0, 0, 38, 0, 37, 0, 0, 0,
	40, 56, 29, 36, 42, 114, 26, 0, 0, 0,
	0, 0, 0, 39, 0, 0, 0, 0, 41, 0,
	32, 0, 0, 30, 31, 0, 0, 43, 0, 38,
	0, 37, 0, 0, 0, 40, 0, 45, 29, 36,
	42, 55, 26, 0, 0, 0, 0, 0, 39, 0,
	0, 0, 0, 0, 0, 86, 87, 94, 95, 96,
	85, 84, 0, 0, 0, 38, 0, 37, 0, 0,
	0, 40, 0, 86, 87, 94, 95, 96, 85, 84,
	99, 0, 0, 0, 39, 80, 81, 82, 83, 88,
	89, 97, 93, 90, 91, 92, 98, 0, 99, 0,
	0, 0, 207, 80, 81, 82, 83, 88, 89, 97,
	93, 90, 91, 92, 98, 0, 0, 0, 0, 0,
	187, 86, 87, 94, 95, 96, 85, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 0, 0,
	0, 80, 81, 82, 83, 88, 89, 97, 93, 90,
	91, 92, 98, 10, 11, 0, 22, 24, 23, 0,
	12, 13, 14, 0, 8, 9, 86, 87, 94, 95,
	96, 85, 84, 0, 0, 0, 27, 0, 0, 21,
	0, 26, 0, 0, 0, 86, 87, 94, 95, 96,
	85, 84, 0, 0, 0, 0, 0, 81, 82, 83,
	88, 89, 97, 93, 90, 91, 92, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 7, 82, 83, 88,
	89, 97, 93, 90, 91, 92, 98, 10, 11, 0,
	22, 0, 23, 0, 12, 13, 14, 0, 8, 9,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	27, 0, 0, 21, 0, 26,
}
var yyPact = [...]int{

	-1000, 1088, -1000, -1000, -1000, -1000, -1000, -1000, 939, -1000,
	-1000, -1000, 939, -1000, 48, -1000, -1000, -1000, 41, -1000,
	939, -1000, 903, 939, 112, -28, 939, 455, 624, -1000,
	45, 939, 939, -1000, -1000, 39, -1000, 939, 939, 939,
	104, 8, 868, 33, -1000, 7, 582, -1000, 779, 99,
	833, -50, 1030, 125, 386, 939, -17, 523, 22, -1000,
	-1000, 25, 540, -1000, 939, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 939,
	939, 939, 939, 939, 939, 939, 939, 939, 939, 939,
	939, 939, 939, 939, 939, 939, 939, 939, 939, -1000,
	-1000, -1000, -1000, 779, 91, -1000, -1000, -1000, -1000, 26,
	-41, 939, -13, 5, -1000, -38, -46, -39, 90, 939,
	458, 939, 710, -1000, -55, 939, -1000, -1000, 939, -1000,
	-1000, -1000, -1000, -1000, 982, 939, 138, 1162, -1000, 39,
	-1000, 1030, 1030, 1085, 1104, 304, 304, 304, 304, 304,
	304, 410, 410, -1000, -1000, -1000, 410, -1000, -1000, -1000,
	410, -1000, 404, -1000, -1000, 939, 80, 1030, -1000, -61,
	-1000, 49, -1000, 771, -1000, 939, -47, -67, 1030, 710,
	190, 715, -1000, 939, -1000, 1030, 964, 1162, 325, 1162,
	-1000, -1000, 1030, 1, -1000, -71, -1000, -1000, 1030, 9,
	-1000, -1000, 939, 666, -1000, -1000, 1030, 1162, 1162, -1000,
	939, -1000, -1000, 939, -1000, 1030, -1000, 1162, -1000, 264,
	1030, -1000, -1000, 939, 523, -1000,
}
var yyPgo = [...]int{

	0, 143, 14, 157, 48, 45, 1, 101, 4, 0,
	155, 5, 2, 8, 148, 115, 67, 42, 59, 154,
	151, 149, 46, 147,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 3, 3, 3, 3, 3, 17,
	17, 17, 17, 17, 20, 20, 20, 11, 11, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	14, 14, 14, 10, 10, 10, 10, 10, 10, 15,
	15, 15, 15, 15, 15, 16, 16, 19, 21, 21,
	21, 22, 22, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 4, 4, 4, 4, 4, 4, 4, 5,
	5, 5, 6, 6, 6, 6, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 13, 13,
	13, 13, 7, 7, 8, 8, 23, 23, 23, 23,
	23, 23, 23,
}
var yyR2 = [...]int{

	0, 0, 2, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 3, 5, 4, 6, 5, 3,
	6, 7, 5, 7, 9, 3, 5, 4, 3, 4,
	3, 2, 3, 2, 4, 1, 1, 1, 2, 4,
	1, 2, 1, 2, 4, 3, 6, 5, 5, 2,
	2, 3, 1, 2, 3, 4, 1, 2, 2, 2,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 1, 3,
	4, 3, 1, 3, 3, 5, 2, 3, 4, 4,
	5, 3, 4,
}
var yyChk = [...]int{

	-1000, -1, -3, -18, -20, -14, -2, 68, 16, 17,
	5, 6, 12, 13, 14, -15, -16, -19, -13, -10,
	-5, 31, 8, 10, 9, -4, 33, 28, -9, 29,
	14, 15, 11, -21, -23, -13, 30, 58, 56, 75,
	62, 9, 31, 18, -4, 28, -9, 30, 32, 70,
	33, -7, -9, -1, -9, 68, 28, -9, 28, 47,
	71, 72, -9, -11, -12, 45, 19, 20, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 72,
	51, 52, 53, 54, 27, 26, 21, 22, 55, 56,
	59, 60, 61, 58, 23, 24, 25, 57, 62, 46,
	30, -9, -9, 32, 70, -9, -9, -9, 28, -22,
	-6, 71, 33, 28, 67, -8, -7, 28, 31, 72,
	-9, 74, 28, 73, -7, 72, 67, -17, 68, -14,
	-18, -15, -16, -2, -9, 71, -17, -22, -5, -13,
	73, -9, -9, -9, -9, -9, -9, -9, -9, -9,
	-9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
	-9, -9, -9, 28, -2, 71, 72, -9, 73, -6,
	46, 72, 67, 72, 67, 74, -8, 28, -9, 69,
	74, -9, -11, -12, 73, -9, -9, 68, -9, 7,
	-17, 69, -9, 28, 73, 28, 67, 67, -9, 72,
	67, -11, -12, -9, 69, 69, -9, 68, -17, -17,
	72, -17, 46, 74, 67, -9, 69, -17, -17, -9,
	-9, -17, -17, 72, -9, -17,
}
var yyDef = [...]int{

	1, -2, 2, 4, 5, 6, 7, 8, 0, 55,
	56, 57, 0, 60, 0, 14, 15, 16, 30, 31,
	0, 1, 0, 0, 0, 108, 0, 62, 53, 76,
	0, 0, 0, 80, 81, 82, 83, 0, 0, 0,
	0, 0, 0, 0, 108, 62, 58, 61, 0, 0,
	0, 32, 112, 0, 0, 0, 62, 0, 0, 69,
	70, 0, 0, 33, 0, 63, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	77, 78, 79, 0, 0, 104, 105, 106, 107, 0,
	0, 0, 0, 72, 116, 0, 0, 62, 0, 0,
	0, 0, 65, 109, 0, 0, 3, 39, 0, 9,
	10, 11, 12, 13, 0, 0, 45, 0, 71, 0,
	111, 34, 54, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 0, 65, 48, 0, 0, 50, 51, 0,
	73, 0, 117, 0, 121, 0, 0, 0, 59, 64,
	0, 0, 36, 0, 110, 113, 0, 0, 0, 0,
	47, 64, 49, 74, 52, 0, 118, 122, 114, 0,
	119, 35, 0, 0, 67, 68, 38, 0, 0, 42,
	0, 46, 75, 0, 120, 37, 66, 0, 40, 0,
	115, 41, 43, 0, 0, 44,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 65, 3, 61, 62, 3,
	33, 73, 59, 55, 72, 56, 70, 60, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 74, 68,
	54, 71, 53, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 48, 3, 3, 3, 3, 3,
	3, 32, 3, 69, 58, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 31, 57, 67, 64,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 49, 50, 51, 52, 63, 66,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:66
		{
			yyVAL.expr = __chain()
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.expr
			}
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:72
		{
			yyVAL.expr = yyDollar[1].expr.Cappend(yyDollar[2].expr)
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.expr
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:80
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:83
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:84
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:85
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:86
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:87
		{
			yyVAL.expr = emptyNode
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:90
		{
			yyVAL.expr = __chain(yyDollar[1].expr)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:91
		{
			yyVAL.expr = __chain(yyDollar[1].expr)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:92
		{
			yyVAL.expr = __chain(yyDollar[1].expr)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:93
		{
			yyVAL.expr = __chain(yyDollar[1].expr)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:94
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:97
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:98
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:99
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:102
		{
			yyVAL.expr = oneNode
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:103
		{
			yyVAL.expr = moneNode
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:106
		{
			yyVAL.atom = AAdd
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:107
		{
			yyVAL.atom = ASub
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:108
		{
			yyVAL.atom = AMul
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:109
		{
			yyVAL.atom = ADiv
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:110
		{
			yyVAL.atom = AMod
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:111
		{
			yyVAL.atom = ABitAnd
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:112
		{
			yyVAL.atom = ABitOr
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:113
		{
			yyVAL.atom = ABitXor
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:114
		{
			yyVAL.atom = ABitLsh
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:115
		{
			yyVAL.atom = ABitRsh
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:116
		{
			yyVAL.atom = ABitURsh
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:119
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:122
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:125
		{
			nodes := yyDollar[1].expr.C()
			op := nodes[len(nodes)-1]
			nodes = nodes[:len(nodes)-1]

			yyVAL.expr = __chain()
			if len(nodes) == 2 && yyDollar[2].expr.Cn() == 1 { // a, b = c()
				y := __move
				if op.A() == ASet {
					y = __set
				}
				if nodes[0].Type() == Natom && nodes[1].Type() == Natom {
					yyVAL.expr = __chain(
						yyDollar[2].expr.Cx(0),
						y(nodes[0], nilNode).pos0(yyDollar[1].expr),
						y(nodes[1], nilNode).pos0(yyDollar[1].expr),
						CompNode(ASetFromAB, nodes[0], nodes[1]),
					)
				} else {
					yyVAL.expr = __chain(
						yyDollar[2].expr.Cx(0),
						__set("(2)a", nilNode).pos0(yyDollar[1].expr),
						__set("(2)b", nilNode).pos0(yyDollar[1].expr),
						CompNode(ASetFromAB, "(2)a", "(2)b"),
					)
					x := func(n *Node, src string) {
						if n.Cn() > 0 && n.Cx(0).A() == ALoad {
							yyVAL.expr.Cappend(__store(n.Cx(1), n.Cx(2), src).pos0(n))
						} else {
							yyVAL.expr.Cappend(y(n, src).pos0(n))
						}
					}
					x(nodes[0], "(2)a")
					x(nodes[1], "(2)b")
				}
			} else if op.A() == ASet { // a0, ..., an := b0, ..., bn
				for i, v := range nodes {
					yyVAL.expr = yyVAL.expr.Cappend(__set(v, yyDollar[2].expr.Cx(i)).pos0(yyDollar[1].expr))
				}
			} else if head := nodes[0]; len(nodes) == 1 { // a0 = b0
				yyVAL.expr = __move(head, yyDollar[2].expr.Cx(0)).pos0(yyDollar[1].expr)
				if head.Cn() > 0 && head.Cx(0).A() == ALoad {
					yyVAL.expr = __store(head.Cx(1), head.Cx(2), yyDollar[2].expr.Cx(0)).pos0(yyDollar[1].expr)
				}
				if a, s := yyDollar[2].expr.Cx(0).isSimpleAddSub(); a != "" && a == head.A() { // Note that a := a + v is different
					yyVAL.expr = __inc(head, NewNumberNode(s)).pos0(yyDollar[1].expr)
				}
			} else { // a0, ..., an = b0, ..., bn
				for i := range nodes {
					yyVAL.expr.Cappend(__set("(1)"+strconv.Itoa(i), yyDollar[2].expr.Cx(i)).pos0(yyDollar[1].expr))
				}
				for i, v := range nodes {
					if v.Cn() > 0 && v.Cx(0).A() == ALoad {
						yyVAL.expr.Cappend(__store(v.Cx(1), v.Cx(2), "(1)"+strconv.Itoa(i)).pos0(yyDollar[1].expr))
					} else {
						yyVAL.expr.Cappend(__move(v, "(1)"+strconv.Itoa(i)).pos0(yyDollar[1].expr))
					}
				}
			}
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:187
		{
			yyVAL.expr = __inc(ANode(yyDollar[1].token), yyDollar[2].expr).pos0(yyDollar[1].token)
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:190
		{
			yyVAL.expr = __move(ANode(yyDollar[1].token), CompNode(yyDollar[2].atom, ANode(yyDollar[1].token).setPos(yyDollar[1].token), yyDollar[3].expr)).pos0(yyDollar[1].token)
		}
	case 35:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:193
		{
			yyVAL.expr = __store(yyDollar[1].expr, yyDollar[3].expr, CompNode(AAdd, __load(yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr), yyDollar[5].expr).pos0(yyDollar[1].expr))
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:196
		{
			yyVAL.expr = __store(yyDollar[1].expr, __hash(yyDollar[3].token.Str), CompNode(AAdd, __load(yyDollar[1].expr, __hash(yyDollar[3].token.Str)).pos0(yyDollar[1].expr), yyDollar[4].expr).pos0(yyDollar[1].expr))
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:199
		{
			yyVAL.expr = __store(yyDollar[1].expr, yyDollar[3].expr, CompNode(yyDollar[5].atom, __load(yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr), yyDollar[6].expr).pos0(yyDollar[1].expr))
		}
	case 38:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:202
		{
			yyVAL.expr = __store(yyDollar[1].expr, __hash(yyDollar[3].token.Str), CompNode(yyDollar[4].atom, __load(yyDollar[1].expr, __hash(yyDollar[3].token.Str)).pos0(yyDollar[1].expr), yyDollar[5].expr).pos0(yyDollar[1].expr))
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:207
		{
			yyVAL.expr = __for(yyDollar[2].expr).__continue(emptyNode).__body(yyDollar[3].expr).pos0(yyDollar[1].token)
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:210
		{
			yyVAL.expr = __for(yyDollar[3].expr).__continue(yyDollar[5].expr).__body(yyDollar[6].expr).pos0(yyDollar[1].token)
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:213
		{
			yyVAL.expr = __chain(
				yyDollar[2].expr,
				__for(yyDollar[4].expr).__continue(yyDollar[6].expr).__body(yyDollar[7].expr).pos0(yyDollar[1].token),
			)
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:219
		{
			forVar, forEnd := ANode(yyDollar[2].token), ANodeS(yyDollar[2].token.Str+"_end")
			yyVAL.expr = __chain(
				__move(forVar, NewNumberNode(0)).pos0(yyDollar[1].token),
				__move(forEnd, CompNode(ALen, yyDollar[4].expr).pos0(yyDollar[1].token)).pos0(yyDollar[1].token),
				__for(
					CompNode(ALess, forVar, forEnd).pos0(yyDollar[1].token),
				).
					__continue(
						__chain(__inc(forVar, oneNode).pos0(yyDollar[1].token)),
					).
					__body(yyDollar[5].expr).pos0(yyDollar[1].token),
			)
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:233
		{
			forVar, forEnd := ANode(yyDollar[2].token), ANodeS(yyDollar[2].token.Str+"_end")
			yyVAL.expr = __chain(
				__move(forVar, yyDollar[4].expr).pos0(yyDollar[1].token),
				__move(forEnd, yyDollar[6].expr).pos0(yyDollar[1].token),
				__for(
					CompNode(ALess, forVar, forEnd).pos0(yyDollar[1].token),
				).
					__continue(
						__chain(__inc(forVar, oneNode).pos0(yyDollar[1].token)),
					).
					__body(yyDollar[7].expr).pos0(yyDollar[1].token),
			)
		}
	case 44:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:247
		{
			forVar, forEnd := ANode(yyDollar[2].token), ANodeS(yyDollar[2].token.Str+"_end")
			if yyDollar[8].expr.Type() == Nnumber { // easy case
				var cond *Node
				if yyDollar[8].expr.N() < 0 {
					cond = __lessEq(forEnd, forVar)
				} else {
					cond = __lessEq(forVar, forEnd)
				}
				yyVAL.expr = __chain(
					__move(forVar, yyDollar[4].expr).pos0(yyDollar[1].token),
					__move(forEnd, yyDollar[6].expr).pos0(yyDollar[1].token),
					__for(cond).
						__continue(__chain(__inc(forVar, yyDollar[8].expr).pos0(yyDollar[1].token))).
						__body(yyDollar[9].expr).pos0(yyDollar[1].token),
				)
			} else {
				forStep := ANodeS(yyDollar[2].token.Str + "_step")
				forBegin := ANodeS(yyDollar[2].token.Str + "_begin")
				yyVAL.expr = __chain(
					__move(forVar, yyDollar[4].expr).pos0(yyDollar[1].token),
					__move(forBegin, yyDollar[4].expr).pos0(yyDollar[1].token),
					__move(forEnd, yyDollar[6].expr).pos0(yyDollar[1].token),
					__move(forStep, yyDollar[8].expr).pos0(yyDollar[1].token),
					__if(
						__lessEq(
							zeroNode,
							__mul(
								__sub(forEnd, forVar).pos0(yyDollar[1].token),
								forStep,
							).pos0(yyDollar[1].token),
						).pos0(yyDollar[1].token),
					).
						__then(
							__chain(
								__for(
									__lessEq(
										__mul(
											__sub(forVar, forBegin).pos0(yyDollar[1].token),
											__sub(forVar, forEnd).pos0(yyDollar[1].token),
										),
										zeroNode,
									).pos0(yyDollar[1].token), // (forVar - forBegin) * (forVar - forEnd) <= 0
								).
									__continue(
										__chain(__inc(forVar, forStep).pos0(yyDollar[1].token)),
									).
									__body(yyDollar[9].expr).pos0(yyDollar[1].token),
							),
						).
						__else(
							emptyNode,
						).pos0(yyDollar[1].token),
				)
			}

		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:306
		{
			yyVAL.expr = __if(yyDollar[2].expr).__then(yyDollar[3].expr).__else(emptyNode).pos0(yyDollar[1].token)
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:309
		{
			yyVAL.expr = __if(yyDollar[2].expr).__then(yyDollar[3].expr).__else(yyDollar[5].expr).pos0(yyDollar[1].token)
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:314
		{
			funcname := ANode(yyDollar[2].token)
			yyVAL.expr = __chain(
				__set(funcname, nilNode).pos0(yyDollar[2].token),
				__move(funcname, __func(funcname).__params(yyDollar[3].expr).__body(yyDollar[4].expr).pos0(yyDollar[2].token)).pos0(yyDollar[2].token),
			)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:323
		{
			yyVAL.expr = __func("<a>").__params(yyDollar[2].expr).__body(yyDollar[3].expr).pos0(yyDollar[1].token).SetPos(yyDollar[1].token)
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:326
		{
			yyVAL.expr = __func("<a>").__params(yyDollar[2].expr).__body(__chain(__return(yyDollar[4].expr).pos0(yyDollar[1].token))).pos0(yyDollar[1].token).SetPos(yyDollar[1].token)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:329
		{
			yyVAL.expr = __func("<a>").__params(emptyNode).__body(__chain(__return(yyDollar[3].expr).pos0(yyDollar[1].token))).pos0(yyDollar[1].token).SetPos(yyDollar[1].token)
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:334
		{
			yyVAL.expr = emptyNode
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:335
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:338
		{
			yyVAL.expr = CompNode(AYield, yyDollar[2].expr).pos0(yyDollar[1].token)
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:339
		{
			yyVAL.expr = __chain(CompNode(ASetB, yyDollar[4].expr).pos0(yyDollar[1].token), CompNode(AYield, yyDollar[2].expr).pos0(yyDollar[1].token))
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:340
		{
			yyVAL.expr = CompNode(AYield, nilNode).pos0(yyDollar[1].token)
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:341
		{
			yyVAL.expr = CompNode(ABreak).pos0(yyDollar[1].token)
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:342
		{
			yyVAL.expr = CompNode(AContinue).pos0(yyDollar[1].token)
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:343
		{
			yyVAL.expr = __return(yyDollar[2].expr).pos0(yyDollar[1].token)
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:344
		{
			yyVAL.expr = __chain(CompNode(ASetB, yyDollar[4].expr).pos0(yyDollar[1].token), __return(yyDollar[2].expr).pos0(yyDollar[1].token))
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:345
		{
			yyVAL.expr = __return(nilNode).pos0(yyDollar[1].token)
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:346
		{
			yyVAL.expr = yylex.(*Lexer).loadFile(joinSourcePath(yyDollar[1].token.Pos.Source, yyDollar[2].token.Str), yyDollar[1].token)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:349
		{
			yyVAL.expr = ANode(yyDollar[1].token).setPos(yyDollar[1].token)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:350
		{
			yyVAL.expr = __load(nilNode, yyDollar[1].token).pos0(yyDollar[1].token)
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:351
		{
			yyVAL.expr = __load(yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[3].expr).setPos(yyDollar[3].expr)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:352
		{
			yyVAL.expr = __load(yyDollar[1].expr, __hash(yyDollar[3].token.Str)).pos0(yyDollar[3].token).setPos(yyDollar[3].token)
		}
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:353
		{
			yyVAL.expr = CompNode(ASlice, yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr).pos0(yyDollar[3].expr).setPos(yyDollar[3].expr)
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:354
		{
			yyVAL.expr = CompNode(ASlice, yyDollar[1].expr, yyDollar[3].expr, moneNode).pos0(yyDollar[3].expr).setPos(yyDollar[3].expr)
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:355
		{
			yyVAL.expr = CompNode(ASlice, yyDollar[1].expr, zeroNode, yyDollar[4].expr).pos0(yyDollar[4].expr).setPos(yyDollar[4].expr)
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:358
		{
			yyVAL.expr = CompNode(yyDollar[1].expr, ASet)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:359
		{
			yyVAL.expr = CompNode(yyDollar[1].expr, AMove)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:360
		{
			yyVAL.expr = yyDollar[3].expr.Cprepend(yyDollar[1].expr)
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:363
		{
			yyVAL.expr = CompNode(yyDollar[1].token.Str)
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:364
		{
			yyVAL.expr = CompNode(yyDollar[1].token.Str + "...")
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:365
		{
			yyVAL.expr = yyDollar[1].expr.Cappend(ANode(yyDollar[3].token))
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:366
		{
			yyVAL.expr = yyDollar[1].expr.Cappend(ANodeS(yyDollar[3].token.Str + "...").SetPos(yyDollar[3].token))
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:369
		{
			yyVAL.expr = NewNumberNode(yyDollar[1].token.Str).SetPos(yyDollar[1].token)
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:370
		{
			yyVAL.expr = yylex.(*Lexer).loadFile(joinSourcePath(yyDollar[1].token.Pos.Source, yyDollar[2].token.Str), yyDollar[1].token)
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:371
		{
			yyVAL.expr = CompNode(ATypeOf, yyDollar[2].expr)
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:372
		{
			yyVAL.expr = CompNode(ALen, yyDollar[2].expr)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:373
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:374
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:375
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:376
		{
			yyVAL.expr = NewNode(yyDollar[1].token.Str).SetPos(yyDollar[1].token)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:377
		{
			yyVAL.expr = CompNode(AOr, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:378
		{
			yyVAL.expr = CompNode(AAnd, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:379
		{
			yyVAL.expr = CompNode(ALess, yyDollar[3].expr, yyDollar[1].expr).pos0(yyDollar[1].expr)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:380
		{
			yyVAL.expr = CompNode(ALess, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:381
		{
			yyVAL.expr = CompNode(ALessEq, yyDollar[3].expr, yyDollar[1].expr).pos0(yyDollar[1].expr)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:382
		{
			yyVAL.expr = CompNode(ALessEq, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:383
		{
			yyVAL.expr = CompNode(AEq, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:384
		{
			yyVAL.expr = CompNode(ANeq, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:385
		{
			yyVAL.expr = CompNode(AAdd, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:386
		{
			yyVAL.expr = CompNode(ASub, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:387
		{
			yyVAL.expr = CompNode(AMul, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:388
		{
			yyVAL.expr = CompNode(ADiv, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:389
		{
			yyVAL.expr = CompNode(AMod, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:390
		{
			yyVAL.expr = CompNode(ABitXor, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:391
		{
			yyVAL.expr = CompNode(ABitLsh, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:392
		{
			yyVAL.expr = CompNode(ABitRsh, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:393
		{
			yyVAL.expr = CompNode(ABitURsh, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:394
		{
			yyVAL.expr = CompNode(ABitOr, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:395
		{
			yyVAL.expr = CompNode(ABitAnd, yyDollar[1].expr, yyDollar[3].expr).pos0(yyDollar[1].expr)
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:396
		{
			yyVAL.expr = CompNode(ADDD, yyDollar[1].expr).pos0(yyDollar[1].expr)
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:397
		{
			yyVAL.expr = CompNode(ABitXor, yyDollar[2].expr, max32Node).pos0(yyDollar[2].expr)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:398
		{
			yyVAL.expr = CompNode(ASub, zeroNode, yyDollar[2].expr).pos0(yyDollar[2].expr)
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:399
		{
			yyVAL.expr = CompNode(ANot, yyDollar[2].expr).pos0(yyDollar[2].expr)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:400
		{
			yyVAL.expr = CompNode(AAddrOf, ANode(yyDollar[2].token)).pos0(yyDollar[2].token)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:403
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:404
		{
			yyVAL.expr = __call(yyDollar[1].expr, emptyNode).pos0(yyDollar[1].expr)
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:405
		{
			yyVAL.expr = patchVarargCall(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:406
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:409
		{
			yyVAL.expr = CompNode(yyDollar[1].expr)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:410
		{
			yyVAL.expr = yyDollar[1].expr.Cappend(yyDollar[3].expr)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:413
		{
			yyVAL.expr = CompNode(NewNode(yyDollar[1].token.Str), __hash(yyDollar[1].token.Str), yyDollar[3].expr)
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:414
		{
			yyVAL.expr = yyDollar[1].expr.Cappend(NewNode(yyDollar[3].token.Str), __hash(yyDollar[3].token.Str), yyDollar[5].expr)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:417
		{
			yyVAL.expr = CompNode(AArray, emptyNode).pos0(yyDollar[1].token)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:418
		{
			yyVAL.expr = patchStruct(false, yyDollar[2].expr).pos0(yyDollar[2].expr)
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:419
		{
			yyVAL.expr = patchStruct(false, yyDollar[2].expr).pos0(yyDollar[2].expr)
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:420
		{
			yyVAL.expr = patchStruct(true, yyDollar[3].expr).pos0(yyDollar[2].token)
		}
	case 120:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:421
		{
			yyVAL.expr = patchStruct(true, yyDollar[3].expr).pos0(yyDollar[2].token)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:422
		{
			yyVAL.expr = CompNode(AArray, yyDollar[2].expr).pos0(yyDollar[2].expr)
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:423
		{
			yyVAL.expr = CompNode(AArray, yyDollar[2].expr).pos0(yyDollar[2].expr)
		}
	}
	goto yystack /* stack new state and value */
}

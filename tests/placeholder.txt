// a simple example to demo the 'placeholder' concept

 _ = std.unique()

 curry = func(f) {
     __args = {}
     __argscount = std.opcode.closure.get(f, "argscount")
     __remain = __argscount

    func appendargs(args) {
        for i = 0, len( __args) {
             __arg = __args[i]
            if (__arg == _&&len(args) > 0) {
                __args[i] = args[0]
                args = args[1:]
            }
        }

        for i = 0, len(args) {
            __args[len(__args)] = args[i]
        }

        __remain = __argscount - len(__args)
        for    i  = 0, len( __args) {
            if (__args[i] == _) {
                __remain = __remain+1
            }
        }
    }

    func __f() { 
        appendargs(copystack())
        
        if (__remain > 0) return __f

        return std.apply(f, __args)
    }
    return __f
}

func add(a, b, c) { return a + b + c }

assert( curry(add)(1,2)(3) == 6)
assert( curry(add)(_,2)(1)(3) == 6)
assert( curry(add)(_,_,_)("a")(_,"c")("b") == "abc")
 

// a simple example to demo the 'placeholder' concept

var _ = std.unique()

var curry = fun(f) {
    var __args = {}
    var __argscount = std.opcode.closure.get(f, "argscount")
    var __remain = __argscount

    fun appendargs(args) {
        foreach i, __arg = __args {
            if (__arg == _ and len(args) > 0) {
                __args[i] = args[0]
                args = args[1:]
            }
        }

        foreach i, arg = args {
            __args[len(__args)] = arg
        }

        __remain = __argscount - len(__args)
        foreach i, __arg = __args {
            if (__arg == _) {
                __remain = __remain+1
            }
        }
    }

    fun var __f() { 
        appendargs(arguments)
        
        if (__remain > 0) return __f

        return std.apply(f, __args)
    }
    return __f
}

fun add(a, b, c) { return a + b + c }

assert curry(add)(1,2)(3) == 6
assert curry(add)(_,2)(1)(3) == 6
assert curry(add)(_,_,_)("a")(_,"c")("b") == "abc"
 

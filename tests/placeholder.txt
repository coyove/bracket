-- a simple example to demo the 'placeholder' concept

local _ = {}

local function curry(f)
    local __args = {}
    local __argscount = #f
    local __remain = __argscount

    local function appendargs(args)
        for i=1,#__args do
            local __arg = __args[i]
            if __arg == _ and #args > 0 then
                __args[i] = args[1]
                table.remove(args, 1)
            end
        end

        for i = 1, #(args) do
            __args[#__args + 1] = args[i]
        end

        __remain = __argscount - #(__args)
        for i = 1, #( __args) do
            if (__args[i] == _) then
                __remain = __remain+1
            end
        end
    end

    local function __f(...)
        appendargs({...})
        
        if (__remain > 0) then return __f end

        local _, ... = pcall(f, unpack(__args))
        return ...
    end
    return __f
end

function add(a, b, c) return a + b + c end
function addstr(a, b, c) return a .. b .. c end
function add2(a, b, c) return a+b, b+c end

assert(curry(add)(1,2)(3) == 6)
assert(curry(add)(_,2)(1)(3) == 6)
assert(curry(addstr)(_,_,_)("a")(_,"c")("b") == "abc")

x, y = curry(add2)(_,2)(3)(1)
assert(x== 5 and y == 3)
 

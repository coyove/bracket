assert( "abc" == "abc")
assert( "abc" == "\97\98\99")
assert( "abc" == "\x61\x62\x63")
local abc = "abc" 
assert( "abc吱吱吱" == abc .. "吱吱" .. "吱")
assert( "abc吱吱吱" == "abc\u5431\u5431\u5431")

assert(1 + "2" == 3)

local a, b, c, d = match("a\"12\" \"2\"3", [["(\d+)"]])
assert(a == [["12"]] and b == "12" and c == [["2"]] and d == "2")

local err = error("err")
print("reflectLoad: ", err.error())
assert(err.error() == "err")
assert("eerrrr" == replace(err.error(), "(e|r)", "$1$1"))

function cb(s)
		return s == "e" and "R" or "E"
end
assert("REE" == replace(err.error(), "(e|r)", cb))

do
	local c, r, state = 0
	local function loop123()
	    yield 1
	    yield 2
	    return 3
	end

	function stringcallback()
	    r, c, ...state = resume(loop123, c, state)
	    c = c and c or 0
	    println(c, state)
	    return r
	end
end

assert(loop123 == nil)

assert("1 2 3 1 2 3" == replace("a b c d e f", "(\\w)", stringcallback))

assert("x" == trim("嘻x嘻", "嘻"))
assert("嘻x" == trim("嘻x嘻", "嘻", "right"))
assert("x嘻" == trim("嘻x嘻", "嘻", "left"))

assert(("abc")[1,2] == "ab")
assert(("abc")[20,2] == nil)
assert(("cde")[rune("b") - rune("a"),2] == "cd")
assert(("efg")[rune("b") - rune("a"), rune("c") - rune("a")] == "ef")

local s = struct("a", 1, "b", 2, 3, "c")
assert(s.a == 1 and s.b == 2 and s[3] == "c")
s.b += s.a
assert(s.b == 3)
s.a = s
print(s)

assert( "abc" == "abc")
-- assert( "abc" == "\97\98\99")
assert( "abc" == "\x61\x62\x63")
local abc = "abc" 
assert( "abc吱吱吱" == abc + "吱吱" + "吱")
assert( "abc吱吱吱" == "abc\u5431\u5431\u5431")

assert(1 + "2" == "12")

local a, b, c, d = match("a\"12\" \"2\"3", [["(\d+)"]])
assert(a == [["12"]] and b == "12" and c == [["2"]] and d == "2")

local err = error("err")
print("reflectLoad: ", err.error())
assert(err.error() == "err")
assert("eerrrr" == replace(err.error(), "(e|r)", "$1$1"))

function cb(s)
    return s == "e" and "R" or "E"
end
assert("REE" == replace(err.error(), "(e|r)", cb))

assert("x" == trim("嘻x嘻", "嘻"))
assert("嘻x" == trim("嘻x嘻", "嘻", "right"))
assert("x嘻" == trim("嘻x嘻", "嘻", "left"))

-- assert(("abc")[1:2] == "ab")
-- assert(("abc")[3:3] == "c")
-- assert(("abc")[1:0] == "")
-- assert(("cde")[unicode("b")[1] - unicode("a")[1]:2] == "cd")
-- assert(("efg")[unicode("b")[1] - unicode("a")[1]: unicode("c")[1] - unicode("a")[1]] == "ef")

-- json generator
do
	local j = json({
	      a = 1,
	      ["b-2"] = true,
	})
    print(j)
end


var n = 21

 fun bottomUpTree(depth) {
   if (depth <= 0) {
      return { } 
   }
   return { bottomUpTree(depth-1), bottomUpTree(depth-1) } 
}

 fun itemCheck(n) {
    if (len(n) == 0) return 1 
    return itemCheck(n[0]) + itemCheck(n[1]) + 1
}

var minDepth = 4 
var maxDepth = n 
if (minDepth + 2 > n) maxDepth = minDepth + 2 
var stretchDepth = maxDepth + 1 

var check_l = itemCheck(bottomUpTree(stretchDepth)) 
io.printf("stretch tree of depth ~1\t check: ~2\n", stretchDepth, check_l) 

var longLivedTree = bottomUpTree(maxDepth) 
var wg = std.sync.waitgroup() 
var result = std.genlist(maxDepth+1) 

fun worker( depth, check) {
        var iterations = 1 << (maxDepth - depth + minDepth) 
        check = 0 

        for i = 0,iterations {
            check = check + itemCheck(bottomUpTree(depth)) 
        }
        result[depth] = std.sprintf("~1\t trees of depth ~2\t check: ~3", iterations, depth, check) 
        wg.done()
    }

for depth_l = minDepth,2,maxDepth  {
    wg.add(1)
    std.sync.run(worker, depth_l, check_l)
}

wg.wait()

for depth = minDepth,2,maxDepth  {
    io.println( result[depth]) 
}
io.printf("long lived tree of depth ~1\t check: ~2\n", maxDepth, itemCheck(longLivedTree)) 

 n = 23

 func bottomUpTree(depth) {
   if (depth <= 0) {
      return { } 
   }
   return { left: bottomUpTree(depth-1), right: bottomUpTree(depth-1) } 
}

 func itemCheck(n) {
    if (len(n) == 0) return 1 
    return itemCheck(n.left) + itemCheck(n.right) + 1
}

 minDepth = 4 
 maxDepth = n 
if (minDepth + 2 > n) maxDepth = minDepth + 2 
 stretchDepth = maxDepth + 1 

check_l = itemCheck(bottomUpTree(stretchDepth)) 
io.printf("stretch tree of depth {}\t check: {}\n", stretchDepth, check_l) 

//longLivedTree = bottomUpTree(maxDepth) 
//wg = std.sync.waitgroup() 
//result = std.genlist(maxDepth+1) 
//
//func worker( depth, check) {
//    iterations = 1 << (maxDepth - depth + minDepth) 
//    check = 0 
//
//    for i = 0,iterations {
//        check = check + itemCheck(bottomUpTree(depth)) 
//    }
//    result[depth] = std.sprintf("{}\t trees of depth %s\t check: {}", iterations, depth, check) 
//    wg.done()
//}
//
//for depth_l = minDepth,2,maxDepth  {
//    wg.add(1)
//    std.sync.run(worker, depth_l, check_l)
//}
//
//wg.wait()
//
//for depth = minDepth,2,maxDepth  {
//    io.println( result[depth]) 
//}
//io.printf("long lived tree of depth {}\t check: {}\n", maxDepth, itemCheck(longLivedTree)) 

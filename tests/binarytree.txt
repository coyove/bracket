var n = 15 

 fun bottomUpTree(depth) {
   if (depth <= 0) {
      return { } 
   }
   return { bottomUpTree(depth-1), bottomUpTree(depth-1) } 
}

 fun itemCheck(n) {
    if (len(n) == 0) return 1 
    $r2(0) 
    $load() 
    $push($a) 
    $call(itemCheck) 
    $r0($a) 
    $r2(1) 
    $load() 
    $push($a) 
    $call(itemCheck) 
    $r1($a) 
    $add() 
    $r0($a) 
    $r1(1) 
    $add() 
    $ret($a) 
}

var minDepth = 4 
var maxDepth = n 
if (minDepth + 2 > n) maxDepth = minDepth + 2 
var stretchDepth = maxDepth + 1 

var check_l = itemCheck(bottomUpTree(stretchDepth)) 
io.printf("stretch tree of depth ~1\t check: ~2\n", stretchDepth, check_l) 

var longLivedTree = bottomUpTree(maxDepth) 
var wg = std.sync.waitgroup() 
var result = std.genlist(maxDepth+1) 

for  var depth_l = minDepth ; depth_l <= maxDepth ; depth_l = depth_l + 2  {
    ( fun( depth, check) {
        var iterations = 1 << (maxDepth - depth + minDepth) 
        check = 0 

        for  var i = 1 ; i <= iterations ; i=i+1  {
            check = check + itemCheck(bottomUpTree(depth)) 
        }
        result[depth] = io.sprintf("~1\t trees of depth ~2\t check: ~3", iterations, depth, check) 
    })(depth_l, check_l) 
}
for  var depth = minDepth ; depth <= maxDepth ; depth=depth+2  {
    io.println( result[depth]) 
}
io.printf("long lived tree of depth ~1\t check: ~2\n", maxDepth, itemCheck(longLivedTree)) 
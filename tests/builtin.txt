function foo1(c)
    set a = 3 * c
    set b = 2 * c
    return dup()
end

set ans = foo1()(2)
assert ans[len(ans)-1] == 4 and ans[len(ans)-2] == 6

function sum()
    set x = dup() 
    set s = 0
    if typeof(x[0], string) then s = "" end

    dup(x, function(i, n) s = s + n end)
    return s
end

assert sum(1, -1) == 0
assert sum(1, 2, 3) == 6 
assert sum("1", "2") == "12"

set m = {
    "c" = 123, 
    "a" = "a",
    "incr" = function(this)
        this.c = this.c + 1
        return this
    end
}
set mp = m
set  m2 = dup(m)

m.incr()
assert m.c == 124
mp.incr()
assert m.c == 125

m2.incr().incr()

assert m.c == 125
assert m2.c == 125

function errtest(a, b)
    if b == 0 then 
        error("divided by zero")
        return
    else
        return a / b
    end
end

assert errtest(1, 2) == 0.5
errtest(1, 1 - 1)
assert error() == "divided by zero"

set a = {1,2,3}
dup(a, function(i, v) a[i] = v + 1 end)
assert a == {2,3,4}

a = "hello world"
set upper = function(i, r) if i == 0 then return r - 32 else return r end end
dup(a, upper)
assert a == "hello world"
a = dup(a, upper)
assert "" & a == "Hello world"

assert typeof(a) == "map"
assert typeof(a, map)

a = dup(a, function(i,b) if i == 5 then error(true) end return b end)
assert "" & a == "Hello"

a = {
    (function() return "key" end)() = "value"
}
assert a.key == "value" and a["key"] == "value"

assert(0 & ("0x0")) == 0
assert(0 & ("0xa")) == 10
assert(0 & ("0xA")) == 10
assert(0 & ("1")) == 1
assert(0 & ("+0.0")) == 0.0
assert(0 & ("0i12345678")) == 0i12345678
assert(0 & ("-10e-2")) == -10e-2
assert(0 & ("1.2a")) == nil
assert(0 & ("0xabcdefg")) == nil
var count = 1 
var idx = 0 
var flag = 0 

while "true" {
    idx = idx+1 
    if (count == 4  and not flag) {
        count = count / 2 
        flag = 1 
        continue 
    }
    count = count * 2 
    if (count == 8) {break }
}

assert idx == 5 

var m = {} 
var a = idx++ 
assert a == 6 

for i=0,8 {
    var l = {} 
    for j=0,2,8 {
        if (j < 2) {continue }
        if (j > 4) {break }
        l[j/2+i ] = j 
    }
    if (i < 2) {continue }
    if (i > 6) {break }
    m[i] = l 
}

var m2 = {
    2:{
        2+1:2,
        2+2:5
    },
    3:{
        3+1:2,
        3+2:4
    },
    4:{
        4+1:2,
        4+2:4
    },
    5:{
        5+1:2,
        5+2:4
    },
    6:{
        6+1:2,
        6+2:4
    }
} 

m2[2][4]-- 
assert (m==m2) 

var a = 0, b = 0 
while a < 10   {
    b=b+1 
    if (b == 5) continue 
    a=a+1 
}

assert b == 11 

var a = 0, b = 0 
while a < 10 ,a=a+1 {
    b=b+1 
    if (b == 5) continue   
}

assert b == 10 

var   b = 0 
var a = 0
while 1 ,a=a+1 {
    b=b+2 
    if (b == 6) break 
}
assert a == 2 
 
var a = {} 
var i = 0, j = 1
while i < 10,
    {i=i+1 
    j=j*2 }
 {
    if (i == 5) {
        a[i] = "a" 
        continue 
    }
    a[i] = j 
}
assert a == {1,2,4,8,16,"a",64,128,256,512} 

while 1 {
    var last = #a 
    if (last == "a") break 
}

assert a == {1,2,4,8,16,} 

foreach  a = fun (i,v){  assert v == 1 << i }


var m = {} 
foreach {1,2,3} = fun(a,b)  {
    m[len(m)] = b 
    if (a == 1) return 0
} 

assert m == {3, 2} 

var m = {} 
var s = {1,2,3,4,5,6,7,8,9,10} 
var s2 = {}
foreach  s  = fun (i ,v) { s2[i] = itoa(11 - v) }
foreach  s  = fun (i ,v) { s[i] = (11 - v) }

for  i = 9,-1,0  {
    var a = {} 
    if (i == 4) continue 
    if (i == 1) break 

    foreach  s = fun (j , s) {
        a[len(a)] = s  
        if (j == i) {
            for  j = i + 1,len(s2)  {
                if (j % 2 == 0) {
                    a[len(a)] = s2[j] 
                    continue
                }
                a[len(a)] = s2[j] 
            }
            return 0
        }
    }

    m[len(m)] = a 
}

assert m == std.eval(`
    return {
        {1},
        {1,2,"1"},
        {1,2,3,"2","1"},
        {1,2,3,4,"3","2","1"},
        {1,2,3,4,5,"4","3","2","1"},
      /*{1,2,3,4,5,6,"7","8","9","10"},*/
        {1,2,3,4,5,6,7,"6","5","4","3","2","1"},
        {1,2,3,4,5,6,7,8,"7","6","5","4","3","2","1"},
        }
`)()


var start = 10, end = 1, step = -1
var results = {}
for  i = start,step,end results[len(results)] = i
assert results == {10,9,8,7,6,5,4,3,2,1}

var start = 10, end = 1, step = -2
var results = {}
for  i = start,step,end results[len(results)] = i
assert results == {10,8,6,4,2}

var start = 10, end = 11, step = -2
var results = {}
for  i = start,step,end results[len(results)] = i
assert results == {}

var start = 10, end = 11, step = 1
var results = {}
for  i = start,step,end results[len(results)] = i
assert results == {10, 11}


var a = {}
var key = {1}
var key2 = {2}
a[key] = 1 
a[key2] = 2

assert a == {key: 1, key2: 2}

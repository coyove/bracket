var count = 1 
var idx = 0 
var flag = 0 

while "true" {
    idx = idx+1 
    if (count == 4  and not flag) {
        count = count / 2 
        flag = 1 
        continue 
    }
    count = count * 2 
    if (count == 8) {break }
}

assert idx == 5 

var m = {} 
var a = idx++ 
assert a == 6 

var i = 0  for  ;i < 8; i++ {
    var l = {} 
    var j = 0  for ; j < 8 ; j = j + 2 {
        if (j < 2) {continue }
        if (j > 4) {break }
        l[j/2+i ] = j 
    }
    if (i < 2) {continue }
    if (i > 6) {break }
    m[i] = l 
}

var m2 = {
    2:{
        2+1:2,
        2+2:5
    },
    3:{
        3+1:2,
        3+2:4
    },
    4:{
        4+1:2,
        4+2:4
    },
    5:{
        5+1:2,
        5+2:4
    },
    6:{
        6+1:2,
        6+2:4
    }
} 

m2[2][4]-- 
assert (m==m2) 

var a = 0, b = 0 
for  ;a<10;_   {
    b=b+1 
    if (b == 5) continue 
    a=a+1 
}

assert b == 11 

var a = 0, b = 0 
for ; a<10; a=a+1 {
    b=b+1 
    if (b == 5) continue   
}

assert b == 10 

var   b = 0 
for var a = 0  ;;  a=a+1 {
    b=b+2 
    if (b == 6) break 
}
assert a == 2 
 

var a = copy({1,2,3}, fun(i,a) {
    yield "1" 
    yield "2" 
    yield "3" 
}) 

assert a =={"1","2","3"} 

var a = {} 
for  var i = 0, j = 1  ;i < 10  ;
    {i=i+1 
    j=j*2 }
 {
    if (i == 5) {
        a[i] = "a" 
        continue 
    }
    a[i] = j 
}
assert a == {1,2,4,8,16,"a",64,128,256,512} 

while 1 {
    var last = #a 
    if (last == "a") break 
}

assert a == {1,2,4,8,16,} 

for  i, v = a  assert v == 1 << i 


var m = {} 
for  a,b={1,2,3}  {
    m[len(m)] = b 
    if (a == 1) break 
} 

assert m == {1,2} 

var m = {} 
var s = {1,2,3,4,5,6,7,8,9,10} 
var s2 = copy(s, fun (i, a) { return "" & a  }) 

for  var i = 0;  i < 10;  i++  {
    var a = {} 
    if (i == 5) continue 
    if (i == 8) break 

    for j, s = s {
        a[len(a)] = s  
        if (j == i) {
            for  j = i + 1  ;j < len(s2) ; j++  {
                if (j % 2 == 0) {
                    a[len(a)] = s2[j] 
                    continue 
                }
                a[len(a)] = s2[j] 
            }
            break 
        }
    }

    m[len(m)] = a 
}

assert m == std.eval(`
    return {
        {1,"2","3","4","5","6","7","8","9","10"},
        {1,2,"3","4","5","6","7","8","9","10"},
        {1,2,3,"4","5","6","7","8","9","10"},
        {1,2,3,4,"5","6","7","8","9","10"},
        {1,2,3,4,5,"6","7","8","9","10"},
      /*{1,2,3,4,5,6,"7","8","9","10"},*/
        {1,2,3,4,5,6,7,"8","9","10"},
        {1,2,3,4,5,6,7,8,"9","10"}} 
`)() 
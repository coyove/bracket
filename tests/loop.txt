 count = 1 
 idx = 0 
 flag = 0 

for "true" {
    idx = idx+1 
    if (count == 4 &&!flag) {
        count = count / 2 
        flag = 1 
        continue 
    }
    count = count * 2 
    if (count == 8) {break }
}

assert idx == 5 

m = std.genlist(8) 
a = idx++ 
assert a == 6 

for i=0,8 {
    l = std.genlist(8)
    for j=0,8,2 {
        if (j < 2) {continue }
        if (j > 4) {break }
        l[j/2+i ] = j 
    }
    if (i < 2) {continue }
    if (i > 4) {break }
    m[i] = l 
}

m2 = {
    nil,
    nil,
    {nil, nil, nil,  2 ,  4 , nil, nil, nil},
    {nil, nil, nil, nil,  2 ,  4 , nil, nil},
    {nil, nil, nil, nil, nil,  2 ,  4 , nil},
    nil,
    nil,
    nil,
} 

assert (m==m2) 

 a = 0
 b = 0 
for a < 10   {
    b=b+1 
    if (b == 5) continue 
    a=a+1 
}

assert b == 11 

 a = 0
 b = 0 
for ;a < 10 ;a=a+1 {
    b=b+1 
    if (b == 5) continue   
}

assert b == 10 

   b = 0 
 a = 0
for ; "true" ;a=a+1 {
    b=b+2 
    if (b == 6) break 
}
assert a == 2 
 
 a = {} 
 i = 0 j = 1
for ;i < 10;
    {i=i+1 
    j=j*2 }
 {
    if (i == 5) {
        a[i] = "a" 
        continue 
    }
    a[i] = j 
}
assert a == {1,2,4,8,16,"a",64,128,256,512} 

for 1 {
    last = a[len a - 1]
    a  = a[:len a - 1]
    if (last == "a") break 
}

assert a == {1,2,4,8,16,} 

for a , func (i,v){  assert v == 1 << i }


 m = {} 
for {1,2,3} , func(a,b)  {
    m[len(m)] = b 
    if (a == 1) return 0
} 

assert m == {3, 2} 

m = {} 
s = {1,2,3,4,5,6,7,8,9,10} 
s2 = std.genlist(10)
for s  , func (i ,v) { s2[i] = itoa(11 - v) }
for s  , func (i ,v) { s[i] = (11 - v) }

for  i = 9,0,-1  {
     a = {} 
    if (i == 4) continue 
    if (i == 1) break 

    for s , func (j , s) {
        a[len(a)] = s  
        if (j == i) {
            for  j = i + 1,len(s2)  {
                if (j % 2 == 0) {
                    a[len(a)] = s2[j] 
                    continue
                }
                a[len(a)] = s2[j] 
            }
            return 0
        }
    }

    m[len(m)] = a 
}

assert m == std.eval(`
    return {
        {1},
        {1,2,"1"},
        {1,2,3,"2","1"},
        {1,2,3,4,"3","2","1"},
        {1,2,3,4,5,"4","3","2","1"},
      /*{1,2,3,4,5,6,"7","8","9","10"},*/
        {1,2,3,4,5,6,7,"6","5","4","3","2","1"},
        {1,2,3,4,5,6,7,8,"7","6","5","4","3","2","1"},
        }
`)()


start = 10 end = 1 step = -1
results = {}
for  i = start,end,step results[len(results)] = i
assert results == {10,9,8,7,6,5,4,3,2,1}

start = 10 end = 1 step = -2
results = {}
for  i = start,end,step results[len(results)] = i
assert results == {10,8,6,4,2}

start = 10 end = 11 step = -2
results = {}
for  i = start,end,step results[len(results)] = i
assert results == {}

start = 10 end = 11 step = 1
results = {}
for  i = start,end,step results[len(results)] = i
assert results == {10, 11}


s = 0
for i = 1, 10 {
if i == 5 break
s++
}
assert s == 4

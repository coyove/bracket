func fib(n) {
    if (n < 2) {return n;}
    return fib(n-2)+fib(n-1);
}

var K, OP = std.opcode.closure, std.opcode;
var fib2 = K.empty();

K.setparam(fib2, "argscount", 1);
K.setparam(fib2, "envescaped", 0);

K.writeconst(fib2, 2);
K.writeconst(fib2, 1);

K.write(fib2, OP.R0, 0, 0);
K.write(fib2, OP.R1K, 0, 0);
K.write(fib2, OP.LESS, 0, 0);
K.write(fib2, OP.IFNOT, OP.A, 1);
K.write(fib2, OP.RET, 0, 0);
K.write(fib2, OP.SUB, 0, 0);
K.write(fib2, OP.PUSH, OP.A, 0);
K.write(fib2, OP.CALL, addressof(fib2) | 0x00010000, 0);
K.write(fib2, OP.R2, OP.A, 0);
K.write(fib2, OP.R1K, 1, 0);
K.write(fib2, OP.SUB, 0, 0);
K.write(fib2, OP.PUSH, OP.A, 0);
K.write(fib2, OP.CALL, addressof(fib2) | 0x00010000, 0);
K.write(fib2, OP.R0R2, 0, 0);
K.write(fib2, OP.R1, OP.A, 0);
K.write(fib2, OP.ADD, 0, 0);
K.write(fib2, OP.RET, OP.A, 0);
K.write(fib2, OP.EOB, 0, 0);

io.println(fib2);

var ans = fib2(35);
return ans;
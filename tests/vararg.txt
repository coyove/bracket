-- $Id: testes/vararg.lua $
-- See Copyright Notice in file all.lua

print('testing vararg')

local function foo_foo()
    return 1, 2, 3
end

function foo(n)
    if n == 1 then
        foo_foo()
        return true
    elseif n == 2 then
        a = foo_foo()
        return true
    elseif n == 3 then
        local a = foo_foo()
        return true
    elseif n == 4 then
        local a, b = foo_foo()
        return true, b
    end
end

do
    local a, ... = foo(1)
    assert(a and #... == 0)
    local a, ... = foo(2)
    assert(a and #... == 0)
    local a, ... = foo(3)
    assert(a and #... == 0)
    local a, ... = foo(4)
    assert(a and ...[1] == 2)
end

function g(a,b,c)
  assert(a == 1.3 and b == 2.3 and c == 3.3)
end

-- call(f, a) will fail
-- call(g, a) will fail
 
lim = 10
_, ...a = narray(lim)
i = 1
while i <= lim do a[i] = i; i=i+1 end
assert(max(a) == lim)

print("+")
 
-- new-style varargs

function oneless (...) return select(2, ...) end
 
function f (n, a, ...)
  local b
  -- assert(arg == _G.arg)   -- no local 'arg'
  if n == 0 then
    local b, c, d = select(1, ...)
    return a, b, c, d, oneless(oneless(oneless(...)))
  else
    -- n, b, a = n-1, ..., a
    -- assert(b == ...)
    return f(n - 1, a, ...)
  end
end
 
a,b,c,d,e = f(10,5,4,3,2,1)
assert(a==5 and b==4 and c==3 and d==2 and e==1)

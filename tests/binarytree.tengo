n := 23

bottomUpTree := func(depth) {
   if (depth <= 0) {
      return []
   }
   return [ bottomUpTree(depth-1), bottomUpTree(depth-1) ]
}

itemCheck := func(n) {
    if (len(n) == 0) {
        return 1 
        }
    return itemCheck(n[0]) + itemCheck(n[1]) + 1
}

minDepth := 4 
maxDepth := n 
if (minDepth + 2 > n)  {
    maxDepth = minDepth + 2 
}

stretchDepth := maxDepth + 1 

check_l := itemCheck(bottomUpTree(stretchDepth)) 
fmt := import("fmt")
fmt.println("stretch tree of depth ", stretchDepth, " check:", check_l) 

//longLivedTree := bottomUpTree(maxDepth) 
//result = std.genlist(maxDepth+1) 
//
//fun worker( depth, check) {
//    iterations = 1 << (maxDepth - depth + minDepth) 
//    check = 0 
//
//    for i = 0,iterations {
//        check = check + itemCheck(bottomUpTree(depth)) 
//    }
//    result[depth] = std.sprintf("{}\t trees of depth %s\t check: {}", iterations, depth, check) 
//    wg.done()
//}
//
//for depth_l = minDepth,2,maxDepth  {
//    wg.add(1)
//    std.sync.run(worker, depth_l, check_l)
//}
//
//wg.wait()
//
//for depth = minDepth,2,maxDepth  {
//    io.println( result[depth]) 
//}
//io.printf("long lived tree of depth {}\t check: {}\n", maxDepth, itemCheck(longLivedTree)) 

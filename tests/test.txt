fun add(a,b) return a + b


 fib2 = fun(a, b) {
   for "true" {
        c = add(a, b)
       a = b       b = c
       yield c
   }
}

 fib3 = (fib2)()
 
for i = 0,33 fib2(0,1)

assert (fib2())==9227465
assert (fib3(0, 1)+fib3()+fib3()+fib3()) == 11

fun yieldtest() {
    yield 1
    yield 2
    yield 3
}

assert yieldtest() ==1 and yieldtest()==2 and yieldtest()==3 and yieldtest()==nil
assert yieldtest() ==1 and yieldtest()==2 and yieldtest()==3 and yieldtest()==nil

fun counter() for i=2,-1,0 yield i

fun yieldtest() for true yield ({3, 2, 1})[counter()]

assert yieldtest() ==1 and yieldtest()==2 and yieldtest()==3 

fun deepadd(a) {
    if (a <= 0) { return 0 }
    return add(a)(deepadd(a - 1))
}

 e = 100000
assert deepadd(e) == (1 + e) * (e / 2 )

 a = 2
assert 1 + 2 *3/5 == 2.2
assert true /2+ 2.2 * 5 * (a + 1) == 33.5
assert 1 /2+ 2.2 * (a + 1) * 5 == 33.5

 l = {1,2,3}
 l2= {"1","2","3"}
l[len l-1+1] = l2
assert l == {1,2,3, {"1","2","3"}}
assert (l << l2) == {1,2,3, {"1","2","3"}, "1", "2", "3"}

 mul = (fun(a) { b = 1 return fun() {b = b * a return b } })(2)

assert mul() == 2 and mul() == 4 and mul() == 8
if (0 == 1 ) {
    assert 0
} else if (2 == 2) {
    assert 1
} else {
    assert 0
}

 double = (fun a = fun b = a * b)(2)
assert double(2) == 4

if (1 or fun() {assert 0 }) {
    assert 1
}

if (0 and fun() {assert 0 }) {
    assert 1
}

fun returncond(n) {
    return {
        "counter": n,
        "test": fun(this) {
            this.counter = this.counter + 1
            return this.counter % 2 == 0
        }
    }
}

 cond = returncond(0)
assert cond.test() or cond.test()
cond.test()
assert cond.test() and not cond.test()


fun test2() {
    fun test1() {
         sum = 0
        for i =0, 100 {
            sum = sum + i
            if (sum > 100) { break }
        }
        assert sum == 105
    }
    test1()
}

test2()

 m = {
    "key1": "value1",
    "key2": {1,2,3}
}

assert m == m()
 m2 = {}
m2.key1 = "value1"
m2.key2 = {}
for i=1,4 { m2.key2[len(m2.key2)] = i }
assert m2 == m

 m3 = m()
m.key2[0] = 0
assert m3.key2[0] == 1 and m.key2[0] == 0

//a = 0i0
// b = 0iffffffffffffffff
//assert math.u64.eq(math.u64.xor(a, b), b)
a = math.u64.eq(12)
assert a(12)

fun select(cond, t, f) {
    return cond and t or f
} 

assert 1 and 1 or 0
assert 0 and 0 or 1
assert select(1, 1, 2) == 1 and select(0)(1)(2) == 2
a = 1
a = a - 1  // this will be eventually compiled into: [inc a -1]
assert a == 0

 counter = {
    "tick" : 0,
    "add": fun(this, step) {
        this.tick = this.tick + step
    },
}

 c = counter()
c.add()(2)
c.add(1)
assert c.tick == 3

 _array = {1,2,3}
assert len(_array)==3

_array = {1,2,3,}
assert len(_array)==3


 af = 2

if (af == 0)
    af = 1
else 
    if (af == 1)
        af = 2
    else    
        af = 3

assert af == 3

 af = 1

if (af == 0)
    if (af < 2)
        assert 1
else
    assert 0  // shouldn't be here

 a = use "simple.txt" + 1
assert a == 2

fun fun safeexec() {
    assert 0
}

safeexec()

 m = {1,2,{1,2,{1,2,{1,2,3}}}}
m[2][2][2][2] = 4
assert m == {1,2,{1,2,{1,2,{1,2,4}}}}

fun safeexec(f, args) {
     result = "none"
     x = (fun fun () {
        result = std.apply(f, args)
    })()

    return {
        "result": result,
        "ok": x == nil,
    }
}

 r = safeexec(fun(a, b) {
    return a / b
}, {1,2})
 
assert r.result == 0.5

 r = safeexec(fun(a, b) {
    return a / b
}, {1,"2"})
  
assert r.result == "none" and not r.ok


// version 2
 safeexec = fun var f = (std.apply(f, arguments[1:]))
safeexec(fun = (({})[1]))

 a = fun a = fun b = fun c = a + b + (fun d = d * 2)(c)
assert a(1)(2)(3) == 9

assert (fun var = arguments)(1,2,3) == {1,2,3}

 a = "abc"
switch a {
    case "abc":
        assert 1
    case "a":
        assert 0
}

 b = 0
switch a{
    case "b":
        assert 0
    case "a":
        assert 0
    case else:
    b++
}
assert b == 1

 b = 0
switch (fun = b++)() {
    case else: b+=2
}

assert b == 3

fun multi_return(a, b) {
    yield a + 1
    yield b + 1
    return a + b 
}

 mr_a = multi_return(1, 2)
 mr_b = multi_return()
 mr_ab = multi_return()

assert mr_a == 2 and mr_b == 3 and mr_ab == 3

x = 10
(fun() { x = 2 })()
assert x == 2

x= 10
(fun() { $x = 2 * x assert $x == 20 })()
assert x == 10

a = {1, 2, 3, "a", "b" , "c"}
n = len ({"2", "3"})(a[1:3])
 assert n == 2 and a == {1, "2", "3", "a", "b", "c"}

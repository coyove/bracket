assert(G == "test")

do
	local j = dict( a= 1, b= 2, array= dict(1, 2, dict(inner="inner") ))
	-- assert(json('{"a":1}', "a") == 1)
	assert(j.b == 2)
	-- local n, a, b, c = json(j, "array")
	-- assert(n == 3 and a == 1 and b == 2 and json(c, "inner")== "inner")
	-- assert(json(j, "array.2.inner")=="inner")
	-- print(json(j, "array"))
end

function yrec(x, e)
    while true do
	if x == e then return x end
	return x, debug_state()
	x += 1
    end
end

function array(...) return ... end

do
    local ...arr = array(1,2,3,4,5)
    local _, state = yrec(0, 5)

    while true do
        i, state = debug_resume(yrec, state)
        assert(i == arr[i])
	    if not c then break end
    end
end

print("s2")

local function vararg2(...) return ..., true  end
local function vararg(...) return vararg2(...) end
local function test(a0,b0,c0,d0,a, b, c, d)
      assert(a0==a and b0==b and c0==c and d0==d)
end

do
    local a, ... = vararg(1, 2, 3)
    assert(a == 1 and ...[1] == 2 and ...[2] == 3 and ...[3])
    local ... = vararg()
    assert(#... == 1)
    test(1,2,3,true,vararg(1, 2, 3))
    test(1,2,true,3,vararg(1,2),3)
    test(1,2,true,1,vararg(1,2),vararg(1,2))

    local function vararg(n, ...) assert(n == select("#", ...)) end
    vararg(0)
    vararg(1, 1)
    vararg(1, ...)

    local function foo() return 1, 2, 3 end
    local function bar()
        local a, b = foo()
        return true
    end
    local a, b = bar()
    assert(a and b == nil)
end


assert(true and true or false)
assert(false and false or true)

function deepadd(v)
if v == 1e6 then
return v
end
    return deepadd(v + 1)
end
assert(deepadd(0) == 1e6)

do
    local sum = 0
    for i = 1,10 do
        for j=1,10,2 do
           sum *= j
           if j == 3 then break end
        end
        if i == 5 then break end
        sum += i
    end
    assert(sum == 174)
end

do
	local ... = array(1,2,3)
	for i =1,#... do
	    assert( i == ...[i])
	end
end

function return123() return 1, 2, 3 end

do
    local a, b, c = return123()
    assert(a == 1 and b == 2 and c == 3)
end

do
    local function f(a, b) assert(true); return b, a end
    local function g(a, b ,c)
	b, c = f(b, c)
	return c, b, a
    end
    a,b,c = g(1,2,3)
    assert(a == 2 and b == 3 and c == 1)
end

function syntax_return_void() return end
function syntax_return_value(en) return en end
function syntax_return_void2(en) return
en end
assert(syntax_return_void2(1) == nil)

...ex = array(1, 2)
ex[1], ex[2], ex3 = ex3, ex[1], ex[2]
assert(ex3 == 2 and ex[1] == nil and ex[2] == 1)

do
    local ...ms = array(0)
    ms[1], ms2 = return123()
    assert(ms[1] == 1 and ms2 == 2)
end
assert(ms == nil and ms2 == 2)

assert(0x7fff_fffffffffffd < 0x7fffffffffffffff)
assert(0x7fff_ffff_ffff_fffd + 2 == 0x7fff_ffff_ffff_ffff)
assert(0x7fff_fffffffffffe + 1 == 0x7fffffffffffffff)

do
    scope = 1
    assert(scope == 1)
end
assert(scope == 1)

function callstr(a) 
    return a .. "a"
end

assert(callstr"a" == "aa")

-- local iii = 3
-- t = {1, 2, (1 + iii - 1); a = "a", ["" .. "b"] = "b"}
-- for k, v in pairs(t) do
--     assert(k == v)
-- end
-- assert(k == nil and v != 3) -- k, v in the above for-loop are now dropped
-- 
-- for i = 1,3 do
--     assert(t[i] == i)
-- end
-- assert(i == nil)
-- 
-- t, step, ii = {10,8,6,4,2}, -2, 1
-- for i = 10,1,step do
--     assert(t[ii] == i)
--     ii+=1
-- end
-- 
-- function vararg(a, b, ...) 
--     local c = a * (b + a) + b
--     assert(c == 5)
--     for i =1, select("#",...) do
--         local iv = select(i, ...)
--         assert(iv == i + 2)
--     end
--     return {select("#",...), ...}
-- end
-- 
-- vararg(1, 2, 3, 4, 5);
-- result = vararg(1, 2, unpack({3, 4, 5}))
-- 
a = 0
assert(a == 0)

local a , b = 1, 2
assert(a == 1)
assert(b == 2)

if false then
    assert(false)
elseif a == 1 then
    local a = 3
    a = a + 2 - b
    assert(a == 3)
elseif true then
    assert(false)
end

assert(a == 1)

function add(a,b) return a + b end

function fib2(a, b)
   return "start", debug_state()
   while true do
       c = add(a, b)
       a = b
       b = c
       return c, debug_state()
   end
end

do
    ...fib_seq = array(1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465)

    local s, ...state = fib2(0, 1)
    for i = 0,32 do
	s, ...state = debug_resume(fib2, state)
	print(s)
	assert(fib_seq[i +1] == s)
    end
end

function deepadd(a)
    if (a <= 0) then return 0 end
    return add(a, deepadd(a - 1))
end

e = 100000
assert( deepadd(e) == (1 + e) * (e / 2 ))
 
a = 2
assert( 1 + 2 *3/4 == 2.5)
assert( 1 /2+ 2.5 * (a + 1) * 5 == 38)

do
    local mark = 0
    for i=0x7000000000000707,0,-0x1000000000000101 do
	mark+=0x1000000000000001
	println(i, mark)
    end
    assert(mark == 0x8000000000000008)
end

assert(0==nativeVarargTest())
assert(1==nativeVarargTest(1))
assert(2==nativeVarargTest(1, 2))
assert("10"==nativeVarargTest2("1"))
assert("11"==nativeVarargTest2("1", 2))

assert(intAlias(1e9).Unix() == 1)
print(Go_time().Format("2006-01-02"))

println("boolean test")
boolConvert(1)

function returnnil()
local _ = 1 + 1
end
assert(returnnil() == nil)

do -- yieldable variadic function
    function generator(...array)
        local i = 1
        while i <= #array do
            return array[i], debug_state()
            i += 1
        end
    end

    local i, v, state = 1, generator(1, 2, 3)
    repeat
        assert(i, v)
        v, ...state = debug_resume(generator, state)
        i += 1
    until not v
end

G_FLAG = 1
findGlobal()
assert(G_FLAG == 'ok')

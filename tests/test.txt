do
    local function vararg2(...) return ..., true  end
    local function vararg(...) return vararg2(...) end
    local a, ... = vararg(1, 2, 3)
    assert(a == 1 and ...[1] == 2 and ...[2] == 3 and ...[3])
    local ... = vararg()
    assert(#... == 1)

    local function test(a0,b0,c0,d0,a, b, c, d)
        assert(a0==a and b0==b and c0==c and d0==d)
    end
    test(1,2,3,true,vararg(1, 2, 3))
    test(1,2,true,3,vararg(1,2),3)
    test(1,1,2,true,vararg(1,2),vararg(1,2))

    local function vararg(n, ...) assert(n == select("#", ...)) end
    vararg(0)
    vararg(1, 1)
    vararg(1, ...)

    local function bar()
        local function foo() return 1, 2, 3 end
        local a, b = foo()
        return true
    end
    local a, b = bar()
    assert(a and b == nil)
end

function array(...) return ... end

assert(true and true or false)
assert(false and false or true)

function deepadd(v)
if v == 1e6 then
return v
end
    return deepadd(v + 1)
end
assert(deepadd(0) == 1e6)

do
    local sum = 0
    for i = 1,10 do
        for j=1,10,2 do
           sum *= j
           if j == 3 then break end
        end
        if i == 5 then break end
        sum += i
    end
    assert(sum == 174)
end

do
	local ... = array(1,2,3)
	for i =1,#... do
	    assert( i == ...[i])
	end
end

assert(require "goto.txt" == "goto")

local a, b, c = (function() return 1, 2, 3 end)()
assert(a == 1 and b == 2 and c == 3)

a,b,c = (function (a, b ,c)
    local function f(a, b) assert(true); return b, a end
    b, c = f(b, c)
    return c, b, a
end)(1,2,3)
assert(a == 2 and b == 3 and c == 1)

for v1, v2 in (function() 
    yield 1, 1
    yield 2, 2
end) do
    assert(v1 != nil and v1 == v2)
end

function syntax_return_void() return end
function syntax_return_value(en) return en end
function syntax_return_void2(en) return
en end
assert(syntax_return_void2(1) == nil)

...ex = array(1, 2)
ex[1], ex[2], ex3 = ex3, ex[1], ex[2]
assert(ex3 == 2 and ex[1] == nil and ex[2] == 1)

do
    local ...ms = array(0)
    ms[1], ms2 = (function () return 1, 2 end)()
    assert(ms[1] == 1 and ms2 == 2)
end
assert(ms == nil and ms2 == 2)

assert(0x7ffffffffffffffd < 0x7fffffffffffffff)
assert(0x7ffffffffffffffd + 2 == 0x7fffffffffffffff)
assert(0x7ffffffffffffffe + 1 == 0x7fffffffffffffff)

do
global_x = 1
local str = require "string.txt"
assert(str == "r:abc1")

global_x = 2
require "string.txt"
assert(string== "r:abc2")

assert(strname == "abc")
assert(abc == nil)
end
 
do
    scope = 1
    assert(scope == 1)
end
assert(scope == 1)

-- do
-- local a, i = {}, 1
-- a[1 + i ] = i;
-- (function () return a end)().test = 1
-- assert(a[2] == 1 and a["test"] == 1)
-- end

function callstr(a) 
    return a .. "a"
end

assert(callstr"a" == "aa")

-- local iii = 3
-- t = {1, 2, (1 + iii - 1); a = "a", ["" .. "b"] = "b"}
-- for k, v in pairs(t) do
--     assert(k == v)
-- end
-- assert(k == nil and v != 3) -- k, v in the above for-loop are now dropped
-- 
-- for i = 1,3 do
--     assert(t[i] == i)
-- end
-- assert(i == nil)
-- 
-- t, step, ii = {10,8,6,4,2}, -2, 1
-- for i = 10,1,step do
--     assert(t[ii] == i)
--     ii+=1
-- end
-- 
-- function vararg(a, b, ...) 
--     local c = a * (b + a) + b
--     assert(c == 5)
--     for i =1, select("#",...) do
--         local iv = select(i, ...)
--         assert(iv == i + 2)
--     end
--     return {select("#",...), ...}
-- end
-- 
-- vararg(1, 2, 3, 4, 5);
-- result = vararg(1, 2, unpack({3, 4, 5}))
-- 
a = 0
assert(a == 0)

local a , b = 1, 2
assert(a == 1)
assert(b == 2)

if false then
    assert(false)
elseif a == 1 then
    local a = 3
    a = a + 2 - b
    assert(a == 3)
elseif true then
    assert(false)
end

assert(a == 1)

function add(a,b) return a + b end

fib2 = function(a, b)
   while true do
       c = add(a, b)
       a = b
       b = c
       yield c
   end
end

fib3 = copyfunction(fib2)

...fib_seq = array( 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465)
for i = 0,32 do local s = fib2(0,1); assert(fib_seq[i +1] == s) end
 
assert( (fib2())==9227465)
assert( (fib3(0, 1)+fib3()+fib3()+fib3()) == 11)

function yieldtest()
    yield 1
    yield 2
    yield 3
end

assert(yieldtest() ==1 and yieldtest()==2 and yieldtest()==3 and yieldtest()==nil)
assert(yieldtest() ==1 and yieldtest()==2 and yieldtest()==3 and yieldtest()==nil)
 
do
	local ...tmp = array(3,2,1)
	 function counter() for i= 3,1,-1 do yield i end end
	 function yieldtest() while true do yield tmp[counter()] end end
	 assert( yieldtest() ==1 and yieldtest()==2 and yieldtest()==3 )
	 print("yield test", tmp)
end

function deepadd(a)
    if (a <= 0) then return 0 end
    return add(a, deepadd(a - 1))
end

e = 100000
assert( deepadd(e) == (1 + e) * (e / 2 ))
 
a = 2
assert( 1 + 2 *3/5 == 2.2)
assert( 1 /2+ 2.2 * (a + 1) * 5 == 33.5)


limit = 4.0 
maxIter = 50 
rows = 0 
bytesPerRow = 0 
initial_r = 0 
initial_i = 0 

func renderRow (y0) {
     row = "" 
     for xByte = 0, bytesPerRow {
        res = 0 
        Ci = initial_i[y0] 

        for i=0,6,2 {
            x = xByte<<3 
            Cr1 = initial_r[x+i] 
            Cr2 = initial_r[x+i+1] 

            Zr1=Cr1 
            Zi1=Ci 
            Zr2=Cr2 
            Zi2=Ci 

            b=0 

            for j = 0,maxIter {
                Tr1 = Zr1*Zr1 
                Ti1 = Zi1*Zi1 
                Zi1 = (2*Zr1*Zi1)+Ci 
                Zr1 = (Tr1-Ti1)+Cr1 

                if (Tr1+Ti1>limit) {
                    b = b | 2 
                    if (b == 3) {break }
                }

                Tr2 = Zr2*Zr2 
                Ti2 = Zi2*Zi2 
                Zi2 = (2*Zr2*Zi2)+Ci 
                Zr2 = Tr2-Ti2+Cr2 

                if (Tr2+Ti2>limit) {
                    b = b | 1 
                    if (b == 3) break 
                }
            }
            res = res<<2 | b 
        }

        row = append(row, ^res & 0xFF) 
    }
    return row 
} 

size = 1600
nCPU = 4
bytesPerRow = size >> 3 

initial_r = make(size) 
initial_i = make(size) 

inv = 2 / size 
for xy =0, size {
    i = inv * xy 
    initial_r[xy] = i - 1.5 
    initial_i[xy] = i - 1.0 
}

rows = make(size) 
y = -1 
mux = std.sync.mutex() 
wg = std.sync.waitgroup() 
wg.add(nCPU)

worker = func() {
    for (y < size) {
        mux.lock() 
        y = y + 1 
        y0 = y 
        mux.unlock() 
        if (y0 < size) {
            rows[y0] = renderRow(y0) 
        } 
    }
    wg.done() 
} 

for i = 0,nCPU go(worker)  

wg.wait() 
 
fmt.Write(os.Stdout, "P4\n" + itoa(size) + " " + itoa(size) + "\n") 
for i = rows {
    fmt.Write(os.Stdout, rows[i]) 
}

set n =0
set pi =3.14159265358
set solarMass = 4 *pi*pi
set daysPerYear =365.24
set N =5

set sysV = list
    list
       0.0, 0.0, 0.0, solarMass
    end,
    list
        1.66007664274403694e-03 *daysPerYear,
        7.69901118419740425e-03 *daysPerYear,
        -6.90460016972063023e-05* daysPerYear,
        9.54791938424326609e-04 *solarMass
    end,
    list
        -2.76742510726862411e-03*daysPerYear,
        4.99852801234917238e-03 *daysPerYear,
        2.30417297573763929e-05 *daysPerYear,
        2.85885980666130812e-04 *solarMass
    end,
    list
        2.96460137564761618e-03 *daysPerYear,
        2.37847173959480950e-03 *daysPerYear,
        -2.96589568540237556e-05* daysPerYear,
        4.36624404335156298e-05 *solarMass
    end,
    list
        2.68067772490389322e-03 *daysPerYear,
        1.62824170038242295e-03 *daysPerYear,
        -9.51592254519715870e-05* daysPerYear,
        5.15138902046611451e-05 *solarMass
    end
end
set sysS = list
    list 0.0, 0.0, 0.0 end,
    list 4.84143144246472090e+00, -1.16032004402742839e+00,  -1.03622044471123109e-01 end,
    list 8.34336671824457987e+00, 4.12479856412430479e+00 , -4.03523417114321381e-01 end,
    list 1.28943695621391310e+01, -1.51111514016986312e+01,  -2.23307578892655734e-01 end,
    list 1.53796971148509165e+01, -2.59193146099879641e+01,  1.79258772950371181e-01 end
end

function offsetMomentum()
    set px, py, pz = 0
    set i = 0 while i < N then i = i + 1 do
        set m = sysV[i][3]
        px = px + sysV[i][0] * m
        py = py + sysV[i][1] * m
        pz = pz + sysV[i][2] * m
    end

    sysV[0][0] = -px / solarMass
    sysV[0][1] = -py / solarMass
    sysV[0][2] = -pz / solarMass
end

set sqrt = math.sqrt
function energy()
    set e, i = 0 while i < N then i = i + 1 do
        set x, y, z = sysV[i][0], sysV[i][1], sysV[i][2]

        e = e + sysV[i][3] * 0.5 * (x * x + y * y + z * z)

        set j = i + 1 while j < N then j =j + 1 do
            set dx = sysS[i][0] - sysS[j][0]
            set dy = sysS[i][1] - sysS[j][1]
            set dz = sysS[i][2] - sysS[j][2]

            set distance = sqrt(dx * dx + dy * dy + dz * dz)
            e = e - sysV[i][3] * sysV[j][3] / distance
        end
    end
    return e
end

function advance(dt)
    set i = 0 while i < N - 1 then i = i + 1 do
        set sysSi = sysS[i]
        set sysVi = sysV[i]

        set _vx = sysVi[0]
        set _vy = sysVi[1]
        set _vz = sysVi[2]
        set j = i + 1 while j < N then j = j + 1 do
            set sysSj = sysS[j]
            set sysVj = sysV[j]

            set dx = sysSi[0] - sysSj[0]
            set dy = sysSi[1] - sysSj[1]
            set dz = sysSi[2] - sysSj[2]

            set dSquared = dx * dx + dy * dy + dz * dz
            set distance = sqrt(dSquared)
            set mag = dt / (dSquared * distance)

            set mi = sysVi[3] * mag
            set m = -sysVj[3] * mag

            _vx = _vx + dx * m
            _vy = _vy + dy * m
            _vz = _vz + dz * m

            sysVj[0] = sysVj[0] + dx * mi
            sysVj[1] = sysVj[1] + dy * mi
            sysVj[2] = sysVj[2] + dz * mi
        end

        sysVi[0] = _vx
        sysVi[1] = _vy
        sysVi[2] = _vz
    end

    i = 0 while i < N then i = i + 1 do
        sysSi = sysS[i]
        sysVi = sysV[i]
        sysSi[0] = sysSi[0] + dt * sysVi[0]
        sysSi[1] = sysSi[1] + dt * sysVi[1]
        sysSi[2] = sysSi[2] + dt * sysVi[2]
    end
end

offsetMomentum()
# assert [energy] -0.16907516382527074
io.println(energy())

set i = 0 while i < 500000 then i = i + 1 do
    advance(0.01)
end

    io.println(energy())
##[assert  [energy] -0.16907807065622285 ]
set n =0
set pi =3.14159265358
set solarMass = 4 *pi*pi
set daysPerYear =365.24
set N =5

set sysV = { 
    {
        "x"=0.0,
        "y"=0.0, 
        "z"=0.0, 
        "m"=solarMass
    },
    {
        "x"=1.66007664274403694e-03 *daysPerYear,
        "y"=7.69901118419740425e-03 *daysPerYear,
        "z"=-6.90460016972063023e-05* daysPerYear,
        "m"=9.54791938424326609e-04 *solarMass
    },
    {
        "x"=-2.76742510726862411e-03*daysPerYear,
        "y"=4.99852801234917238e-03 *daysPerYear,
        "z"=2.30417297573763929e-05 *daysPerYear,
        "m"=2.85885980666130812e-04 *solarMass
    },
    {
        "x"=2.96460137564761618e-03 *daysPerYear,
        "y"=2.37847173959480950e-03 *daysPerYear,
        "z"=-2.96589568540237556e-05* daysPerYear,
        "m"=4.36624404335156298e-05 *solarMass
    },
    {
        "x"=2.68067772490389322e-03 *daysPerYear,
        "y"=1.62824170038242295e-03 *daysPerYear,
        "z"=-9.51592254519715870e-05* daysPerYear,
        "m"=5.15138902046611451e-05 *solarMass
    }
}
set sysS = {
    { "x"=0.0, "y"=0.0, "z"=0.0 },
    { "x"=4.84143144246472090e+00, "y"=-1.16032004402742839e+00,  "z"=-1.03622044471123109e-01 },
    { "x"=8.34336671824457987e+00, "y"=4.12479856412430479e+00 ,  "z"=-4.03523417114321381e-01 },
    { "x"=1.28943695621391310e+01, "y"=-1.51111514016986312e+01,  "z"=-2.23307578892655734e-01 },
    { "x"=1.53796971148509165e+01, "y"=-2.59193146099879641e+01,  "z"=1.79258772950371181e-01}
}

function offsetMomentum()
    set px, py, pz = 0
    set i = 0 for i < N , i = i + 1 do
        set m = sysV[i].m
        px = px + sysV[i].x * m
        py = py + sysV[i].y * m
        pz = pz + sysV[i].z * m
    end

    sysV[0].x = -px / solarMass
    sysV[0].y = -py / solarMass
    sysV[0].z = -pz / solarMass
end

set sqrt = math.sqrt
function energy()
    set e, i = 0 for i < N , i = i + 1 do
        set x, y, z = sysV[i].x, sysV[i].y, sysV[i].z

        e = e + sysV[i].m * 0.5 * (x * x + y * y + z * z)

        set j = i + 1 for j < N , j =j + 1 do
            set dx = sysS[i].x - sysS[j].x
            set dy = sysS[i].y - sysS[j].y
            set dz = sysS[i].z - sysS[j].z

            set distance = sqrt(dx * dx + dy * dy + dz * dz)
            e = e - sysV[i].m * sysV[j].m / distance
        end
    end
    return e
end

function advance(dt)
    set i = 0 for i < N - 1 , i = i + 1 do
        set sysSi = sysS[i]
        set sysVi = sysV[i]

        set _vx = sysVi.x
        set _vy = sysVi.y
        set _vz = sysVi.z
        set j = i + 1 for j < N , j = j + 1 do
            set sysSj = sysS[j]
            set sysVj = sysV[j]

            set dx = sysSi.x - sysSj.x
            set dy = sysSi.y - sysSj.y
            set dz = sysSi.z - sysSj.z

            set dSquared = dx * dx + dy * dy + dz * dz
            set distance = sqrt(dSquared)
            set mag = dt / (dSquared * distance)

            set mi = sysVi.m * mag
            set m = -sysVj.m * mag

            _vx = _vx + dx * m
            _vy = _vy + dy * m
            _vz = _vz + dz * m

            sysVj.x = sysVj.x + dx * mi
            sysVj.y = sysVj.y + dy * mi
            sysVj.z = sysVj.z + dz * mi
        end

        sysVi.x = _vx
        sysVi.y = _vy
        sysVi.z = _vz
    end

    i = 0 for i < N , i = i + 1 do
        sysSi = sysS[i]
        sysVi = sysV[i]
        sysSi.x = sysSi.x + dt * sysVi.x
        sysSi.y = sysSi.y + dt * sysVi.y
        sysSi.z = sysSi.z + dt * sysVi.z
    end
end

offsetMomentum()
# assert [energy] -0.16907516382527074
io.println(energy())

set i = 0 for i < 500000 , i = i + 1 do
    advance(0.01)
end

    io.println(energy())
##[assert  [energy] -0.16907807065622285 ]
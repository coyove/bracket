a = 2
b = (a + 1) / (a - 1)
assert( b == 3)
assert( "sep0")

assert( (a + 1) / (a - 1) == 3)
assert( "sep1")

assert( 3 == (a + 1) / (a - 1))
assert( "sep2")

assert( (a + 1) == (a + 1) / (a - 1))
assert( "sep3")

function sub1(a) return a - 1 end
assert( (a + 1) == (a + 1) / sub1(a))
assert( "sep4")

assert( a + (a + (a + (a + 1))) == 9)
assert( "sep5")

assert( 1 + (1 + (1 + (1 + a))) == 6)
assert( "sep6")

function array(...) return ... end
...c = array(1,2,3,4)
assert( 1 + (1 + (1 + (1 + a))) + # c == 10)
assert( "sep7")

 a = 10
assert( 1 + (1 + a) == 12)

function foo1(a, b, c)
return a, b, c
end

local a, b, c = foo1(1, 2, 3)
assert(a == 1 and b + c == 5)
a,b,c = foo1(c=10,b="a")
assert(a==nil and c == 10 and b == "a")

function foo1(a, b, c, ...)
return a, b, c, ...
end

local _, _, _, x = foo1(1,2,3,"4")
assert(x == "4")

_, b, _, x = foo1(["b"]=2)
assert(b == 2 and x == nil)

do
	assert("a" == mapFunc(a=1))
	assert("[1,2,3]" == mapFunc(c=1,c=2,c=3))
	assert("1" == mapFunc(c=1))
	assert(mapFunc(b=1,d=2) == "12")
	assert(mapFunc(nil, "b", d="d") == "bd")
end


do
	local flag = false
	function nilCall(a, b, c)
		 println("nilCall 1")
		 if flag and c == 3 then
		    panic("growZero")
		 end
	end
	nilCall(1, 2, 3)
	flag = true
	nilCall(1, 2)


	flag = false
	function nilCall(a, b, ...)
		 println("nilCall 2")
		 if flag and b == 2 then
		    panic("growZero")
		 end
	end
	nilCall(1, 2)
	flag = true
	nilCall(1)

	flag = false
	function nilCall(a, b, ...)
		 println("nilCall 3")
		 if flag and ...[1] == 3 then
		    panic("growZero")
		 end
	end
	nilCall(1, 2, 3)
	flag = true
	nilCall(1, 2)
end

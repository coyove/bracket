var n = 0 
var nCPU = 6

fun A(i, j) {
    return ((i+j)*(i+j+1)/2 + i + 1) 
}

// fun A0(i, j) {
//     $r0(i)
//     $r1(j)
//     $add0()
//     $r1(1)
//     $add1()
//     $mul0()
//     $r1(2)
//     $div0()
//     $r1(i)
//     $add0()
//     $r1(1)
//     $add()
//     $ret($a)
// }
// 
// assert  A0(1,2) == A(1,2)

fun TimesVec(v, s, n, u, wg) {
    var ul = len(u) 
    for i = s  ,n {
        var vi = 0 
        for j = 0,ul {
            vi = vi + u[j] / A(i, j) 
        }
        v[i] = vi 
    }
    wg.done() 
}

fun TimesTranspVec(v, s, n, u, wg) {
    var ul = len(u) 
    for i = s, n  {
        var vi = 0 
        for j = 0, ul  {
            vi = vi + u[j] / A(j, i) 
        }
        v[i] = vi 
    }
    wg.done() 
}

fun ATimesTransp(v, u) {
    var x = std.genlist(len(u)) 
    var wg = std.sync.waitgroup() 

    for i = 0, nCPU {
        wg.add(1) 
        std.sync.run(TimesVec, x, i*len(v)/nCPU, (i+1)*len(v)/nCPU, u, wg) 
    }
    wg.wait() 

    for  i = 0, nCPU {
        wg.add(1) 
        std.sync.run(TimesTranspVec, v, i*len(v)/nCPU, (i+1)*len(v)/nCPU, x, wg) 
    }
    wg.wait() 
}

n = 5500
var u = {} 
var v = {} 
 
for idx = 0, n {
    u[idx] = 1 
    v[idx] = 0 
}

for i = 0, 10 {
    ATimesTransp(v, u) 
    ATimesTransp(u, v) 
}

var vBv = 0, vv = 0 
foreach i, x = v {
    vBv = vBv + u[i] * x 
    vv = vv + x * x 
}

io.println(math.sqrt(vBv/vv)) 
// io.println(v)
    

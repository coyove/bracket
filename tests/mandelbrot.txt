set limit = 4.0
set maxIter = 50
set rows = 0
set bytesPerRow = 0
set initial_r = 0
set initial_i = 0
set ctr = 0
set renderRow = function(y0)
    set i,j,x,res,b,Zr1,Zr2,Zi1,Zi2,Tr1,Tr2,Ti1,Ti2 = 0
    set row = std.genbytes(bytesPerRow) 
    set xByte = 0 for xByte < bytesPerRow do
        res = 0
        set Ci = initial_i[y0]

        i = 0 for i<8 do
            x = xByte<<3
            set Cr1 = initial_r[x+i]
            set Cr2 = initial_r[x+i+1]

            Zr1=Cr1
            Zi1=Ci
            Zr2=Cr2
            Zi2=Ci

            b=0

            j = 0 for j < maxIter do
                Tr1=Zr1*Zr1
                Ti1=Zi1*Zi1
                Zi1=(2*Zr1*Zi1)+Ci
                Zr1=(Tr1-Ti1)+Cr1

                if (Tr1+Ti1)>limit then
                    b = b | 2
                    if b == 3 then break end
                end

                Tr2 = Zr2*Zr2
                Ti2 = Zi2*Zi2
                Zi2 = (2*Zr2*Zi2)+Ci
                Zr2 = Tr2-Ti2+Cr2

                if (Tr2+Ti2)>limit then
                    b = b | 1
                    if b == 3 then break end
                end
                j=j+1
            end

            res = res<<2 | b
            i=i+2
        end

        row[xByte] = ~res
        xByte=xByte+1
    end

    return row
end

set size = 1600
bytesPerRow = size >> 3

initial_r = std.genlist(size)
initial_i = std.genlist(size)

set inv = 2 / size
set xy = 0 for xy < size , xy = xy + 1 do
    set i = inv * xy
    initial_r[xy] = i - 1.5
    initial_i[xy] = i - 1.0
end

#io.println("zzz",initial_i)

rows = std.genlist(size)
set y = -1
set mux = std.sync.mutex()
set wg = std.sync.waitgroup()
wg.add(4)

set worker = function()
    for y < size do
        mux.lock()
        y = y + 1
        set y0 = y
        mux.unlock()
        if y0 < size then rows[y0] = renderRow(y0) end
    end
    wg.done()
end

std.sync.run(worker) 
std.sync.run(worker) 
std.sync.run(worker) 
std.sync.run(worker)
wg.wait()
 
io.write("P4\n" & size & " " & size & "\n")
dup(rows, function(i,row) 
    io.write(row)
end) 
a = "hello world"
assert( a[6:]  == "world")

m = {}
for i=0,20 { m[i] = i }
m2 = make(10)
n = copy(m2, m[5:len(m2) + 5])
assert(n == 10&&m2 == {5,6,7,8,9,10,11,12,13,14})

r = m2[2]
m2 = m2[:2] << m2[3:]
assert( r == 7&&m2 == {5,6,8,9,10,11,12,13,14})

ptr_test = std.Eval(`return func ( a) {
    a[] = 10
}`)()

ptr_test(&a)
assert( a == 10)


func testassert() {
    assert( 0,"hello")
    return "world"
}

std.Safe(testassert)

msg = testassert()
assert( msg == "hello")

a = {
    a: {hello: nil, n3: {
        n0: {1,2,3},
    }},
}

j = `{"a": { "hello": null, "n3": { "n0" : [1,2,3]}}}`
assert(json.Unmarshal(j) == a)
assert(json.Unmarshal("true") == true)
assert(json.Unmarshal("     true") == !false)

assert(atoi("1") == 1)
assert(atoi("1a", &err) == nil && err != "")

assert(chan.Select("default") == nil)

ch = chan.Make(1)
chan.Send(ch, "hello")
assert(chan.Select(ch, "default") == "hello")

v1 = ""
v2 = 0
fmt.Println(fmt.Sscanf("hello world 123", "%s world %f", &v1, &v2))
assert(v1 == "hello" && v2 == 123)

function IndexByte(s, b)
    for i = 1, #(s) do
        if s[i] == b then return i end
    end
    return 0
end

primeRK = 16777619 

-- hashStr returns the hash&&the appropriate multiplicative
-- factor for use in Rabin-Karp algorithm.
function hashStr(sep)
    local hash = 0 
    for i = 1,#(sep) do
	    hash = hash * primeRK + sep[i]
    end
    hash = bitand(hash, 0xffffffff)
    
    local pow = 1
    local sq = primeRK 
    local i = #(sep)

    while i > 0 do
        if bitand(i, 1) != 0 then
            pow = pow * sq
        end
        sq = sq * sq
        i = bitrsh(i, 1)
    end
    return {hash, pow}
end

-- Index returns the index of the first instance of substr in s,||-1 if substr is not present in s.
function Index(s, substr)
    local n = #(substr)
    if n == 0 then
       return 0
    end
    if (n == 1) then
       return IndexByte(s, substr[1]) 
    end
    if (n == #(s)) then
       return substr == s and 1 or 0
    end
    if (n > #(s)) then
       return 0
    end

    -- Rabin-Karp search
    local {hashss, pow} = hashStr(substr) 
    local h = 0 

    for i = 1, n do
	    h = h *primeRK + s[i]
    end
    h = bitand(h, 0xffffffff)

    if (h == hashss and s[1:n] == substr) then
       return 1
    end

    local i = n + 1
    while i <= #(s) do
	    h = h * primeRK
	    h = h + s[i]
	    h = h - pow * s[i-n]
	    h = bitand(h, 0xffffffff)
	    i = i + 1
	    if (h == hashss and s[i-n:i-1] == substr) then
	        return i - n 
	    end
    end
    return 0
end

assert(Index("abc", "a") == 1)
assert(Index("abc", "b") == 2)
assert(Index("abc", "c") == 3)
assert(Index("abc", "d") == 0)
assert(Index("abc", "ab") == 1)
assert(Index("abc", "bc") == 2)
assert(Index("abc", "abc") == 1)
assert(Index("abc中文def", "d") == 10)
assert(Index("abc中文def", "ef") == 11)
assert(Index("abc中文def", "中") == 4)
assert(Index("abc中文def", "文") == 7)
